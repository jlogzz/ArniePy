Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    TRUE
    FALSE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM bloque ENDPROGRAM
Rule 2     programa -> PROGRAM bloque funciones ENDPROGRAM
Rule 3     programa -> PROGRAM global bloque funciones ENDPROGRAM
Rule 4     programa -> PROGRAM global bloque ENDPROGRAM
Rule 5     funciones -> func funciones
Rule 6     funciones -> voidfunc funciones
Rule 7     funciones -> empty
Rule 8     vars -> VAR vars_list ENDVAR
Rule 9     global -> GLOBAL vars_list ENDGLOBAL
Rule 10    vars_list -> vars_declaration vars_list
Rule 11    vars_list -> vars_declaration
Rule 12    vars_list -> empty
Rule 13    vars_declaration -> tipo identifier
Rule 14    tipo -> int
Rule 15    tipo -> float
Rule 16    tipo -> string
Rule 17    tipo -> bool
Rule 18    tipo -> hash
Rule 19    tipo -> VOID
Rule 20    bloque -> BLOQUE estatuto_list ENDBLOQUE
Rule 21    estatuto_list -> estatuto estatuto_list
Rule 22    estatuto_list -> estatuto
Rule 23    estatuto_list -> empty
Rule 24    estatuto -> asignacion
Rule 25    estatuto -> condicion
Rule 26    estatuto -> escritura
Rule 27    estatuto -> lectura
Rule 28    estatuto -> while
Rule 29    estatuto -> for
Rule 30    estatuto -> vars
Rule 31    asignacion -> identifier EQUAL expresion
Rule 32    escritura -> PRINT escritura_vars
Rule 33    escritura_vars -> expresion COMMA escritura_vars
Rule 34    escritura_vars -> expresion
Rule 35    lectura -> READ identifier
Rule 36    condicion -> IF expresion estatuto_list elseif ENDIF
Rule 37    condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF
Rule 38    condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF
Rule 39    condicion -> IF expresion estatuto_list ENDIF
Rule 40    elseif -> ELSEIF expresion estatuto_list
Rule 41    while -> WHILE expresion estatuto_list ENDWHILE
Rule 42    for -> FOR int estatuto_list ENDFOR
Rule 43    expresion -> termino
Rule 44    expresion -> expresion and_or termino
Rule 45    termino -> factor
Rule 46    termino -> termino sign factor
Rule 47    factor -> elemento
Rule 48    factor -> factor psign elemento
Rule 49    sign -> LTHAN
Rule 50    sign -> GTHAN
Rule 51    sign -> EQUALTO
Rule 52    sign -> GTHANEQ
Rule 53    sign -> LTHANEQ
Rule 54    sign -> NOTEQUAL
Rule 55    sign -> PLUS
Rule 56    sign -> MINUS
Rule 57    psign -> MULTI
Rule 58    psign -> DIVIDE
Rule 59    and_or -> AND
Rule 60    and_or -> OR
Rule 61    elemento -> identifier
Rule 62    elemento -> int
Rule 63    elemento -> float
Rule 64    elemento -> string
Rule 65    elemento -> LPARENTHESES expresion RPARENTHESES
Rule 66    elemento -> llamarfun
Rule 67    func -> funchead bloque RETURN identifier ENDMETHOD
Rule 68    voidfunc -> prochead bloque ENDMETHOD
Rule 69    prochead -> METHOD VOID identifier parameter_list
Rule 70    prochead -> METHOD VOID identifier
Rule 71    funchead -> METHOD tipo identifier parameter_list
Rule 72    funchead -> METHOD tipo identifier
Rule 73    parameter_list -> parameter
Rule 74    parameter_list -> parameter COMMA parameter_list
Rule 75    parameter -> tipo identifier
Rule 76    parameter -> tipo referencia
Rule 77    llamarfun -> CALLMETHOD identifier funparams
Rule 78    llamarfun -> CALLMETHOD identifier
Rule 79    funparams -> expresion
Rule 80    funparams -> expresion COMMA funparams
Rule 81    empty -> <empty>
Rule 82    identifier -> IDENTIFIER
Rule 83    referencia -> REFERENCIA
Rule 84    int -> INT
Rule 85    float -> FLOAT
Rule 86    bool -> BOOL
Rule 87    string -> STRING
Rule 88    hash -> HASH

Terminals, with rules where they appear

AND                  : 59
BLOQUE               : 20
BOOL                 : 86
CALLMETHOD           : 77 78
COMMA                : 33 74 80
DIVIDE               : 58
ELSE                 : 37 38
ELSEIF               : 40
ENDBLOQUE            : 20
ENDFOR               : 42
ENDGLOBAL            : 9
ENDIF                : 36 37 38 39
ENDMETHOD            : 67 68
ENDPROGRAM           : 1 2 3 4
ENDVAR               : 8
ENDWHILE             : 41
EQUAL                : 31
EQUALTO              : 51
FALSE                : 
FLOAT                : 85
FOR                  : 42
GLOBAL               : 9
GTHAN                : 50
GTHANEQ              : 52
HASH                 : 88
IDENTIFIER           : 82
IF                   : 36 37 38 39
INT                  : 84
LPARENTHESES         : 65
LTHAN                : 49
LTHANEQ              : 53
METHOD               : 69 70 71 72
MINUS                : 56
MULTI                : 57
NOTEQUAL             : 54
OR                   : 60
PLUS                 : 55
PRINT                : 32
PROGRAM              : 1 2 3 4
READ                 : 35
REFERENCIA           : 83
RETURN               : 67
RPARENTHESES         : 65
STRING               : 87
TRUE                 : 
VAR                  : 8
VOID                 : 19 69 70
WHILE                : 41
error                : 

Nonterminals, with rules where they appear

and_or               : 44
asignacion           : 24
bloque               : 1 2 3 4 67 68
bool                 : 17
condicion            : 25
elemento             : 47 48
elseif               : 36 37
empty                : 7 12 23
escritura            : 26
escritura_vars       : 32 33
estatuto             : 21 22
estatuto_list        : 20 21 36 37 37 38 38 39 40 41 42
expresion            : 31 33 34 36 37 38 39 40 41 44 65 79 80
factor               : 45 46 48
float                : 15 63
for                  : 29
func                 : 5
funchead             : 67
funciones            : 2 3 5 6
funparams            : 77 80
global               : 3 4
hash                 : 18
identifier           : 13 31 35 61 67 69 70 71 72 75 77 78
int                  : 14 42 62
lectura              : 27
llamarfun            : 66
parameter            : 73 74
parameter_list       : 69 71 74
prochead             : 68
programa             : 0
psign                : 48
referencia           : 76
sign                 : 46
string               : 16 64
termino              : 43 44 46
tipo                 : 13 71 72 75 76
vars                 : 30
vars_declaration     : 10 11
vars_list            : 8 9 10
voidfunc             : 6
while                : 28

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM bloque ENDPROGRAM
    (2) programa -> . PROGRAM bloque funciones ENDPROGRAM
    (3) programa -> . PROGRAM global bloque funciones ENDPROGRAM
    (4) programa -> . PROGRAM global bloque ENDPROGRAM

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . bloque ENDPROGRAM
    (2) programa -> PROGRAM . bloque funciones ENDPROGRAM
    (3) programa -> PROGRAM . global bloque funciones ENDPROGRAM
    (4) programa -> PROGRAM . global bloque ENDPROGRAM
    (20) bloque -> . BLOQUE estatuto_list ENDBLOQUE
    (9) global -> . GLOBAL vars_list ENDGLOBAL

    BLOQUE          shift and go to state 6
    GLOBAL          shift and go to state 5

    bloque                         shift and go to state 3
    global                         shift and go to state 4

state 3

    (1) programa -> PROGRAM bloque . ENDPROGRAM
    (2) programa -> PROGRAM bloque . funciones ENDPROGRAM
    (5) funciones -> . func funciones
    (6) funciones -> . voidfunc funciones
    (7) funciones -> . empty
    (67) func -> . funchead bloque RETURN identifier ENDMETHOD
    (68) voidfunc -> . prochead bloque ENDMETHOD
    (81) empty -> .
    (71) funchead -> . METHOD tipo identifier parameter_list
    (72) funchead -> . METHOD tipo identifier
    (69) prochead -> . METHOD VOID identifier parameter_list
    (70) prochead -> . METHOD VOID identifier

  ! shift/reduce conflict for ENDPROGRAM resolved as shift
    ENDPROGRAM      shift and go to state 13
    METHOD          shift and go to state 8

  ! ENDPROGRAM      [ reduce using rule 81 (empty -> .) ]

    empty                          shift and go to state 10
    funchead                       shift and go to state 12
    func                           shift and go to state 7
    prochead                       shift and go to state 11
    funciones                      shift and go to state 9
    voidfunc                       shift and go to state 14

state 4

    (3) programa -> PROGRAM global . bloque funciones ENDPROGRAM
    (4) programa -> PROGRAM global . bloque ENDPROGRAM
    (20) bloque -> . BLOQUE estatuto_list ENDBLOQUE

    BLOQUE          shift and go to state 6

    bloque                         shift and go to state 15

state 5

    (9) global -> GLOBAL . vars_list ENDGLOBAL
    (10) vars_list -> . vars_declaration vars_list
    (11) vars_list -> . vars_declaration
    (12) vars_list -> . empty
    (13) vars_declaration -> . tipo identifier
    (81) empty -> .
    (14) tipo -> . int
    (15) tipo -> . float
    (16) tipo -> . string
    (17) tipo -> . bool
    (18) tipo -> . hash
    (19) tipo -> . VOID
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (86) bool -> . BOOL
    (88) hash -> . HASH

    ENDGLOBAL       reduce using rule 81 (empty -> .)
    VOID            shift and go to state 20
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    BOOL            shift and go to state 16
    HASH            shift and go to state 26

    hash                           shift and go to state 23
    bool                           shift and go to state 17
    empty                          shift and go to state 24
    int                            shift and go to state 27
    float                          shift and go to state 28
    vars_list                      shift and go to state 22
    vars_declaration               shift and go to state 21
    tipo                           shift and go to state 18
    string                         shift and go to state 30

state 6

    (20) bloque -> BLOQUE . estatuto_list ENDBLOQUE
    (21) estatuto_list -> . estatuto estatuto_list
    (22) estatuto_list -> . estatuto
    (23) estatuto_list -> . empty
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . lectura
    (28) estatuto -> . while
    (29) estatuto -> . for
    (30) estatuto -> . vars
    (81) empty -> .
    (31) asignacion -> . identifier EQUAL expresion
    (36) condicion -> . IF expresion estatuto_list elseif ENDIF
    (37) condicion -> . IF expresion estatuto_list elseif ELSE estatuto_list ENDIF
    (38) condicion -> . IF expresion estatuto_list ELSE estatuto_list ENDIF
    (39) condicion -> . IF expresion estatuto_list ENDIF
    (32) escritura -> . PRINT escritura_vars
    (35) lectura -> . READ identifier
    (41) while -> . WHILE expresion estatuto_list ENDWHILE
    (42) for -> . FOR int estatuto_list ENDFOR
    (8) vars -> . VAR vars_list ENDVAR
    (82) identifier -> . IDENTIFIER

    ENDBLOQUE       reduce using rule 81 (empty -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 34
    READ            shift and go to state 48
    WHILE           shift and go to state 40
    FOR             shift and go to state 36
    VAR             shift and go to state 46
    IDENTIFIER      shift and go to state 47

    estatuto_list                  shift and go to state 32
    vars                           shift and go to state 33
    for                            shift and go to state 41
    estatuto                       shift and go to state 38
    empty                          shift and go to state 37
    asignacion                     shift and go to state 35
    lectura                        shift and go to state 43
    escritura                      shift and go to state 42
    while                          shift and go to state 44
    identifier                     shift and go to state 45
    condicion                      shift and go to state 39

state 7

    (5) funciones -> func . funciones
    (5) funciones -> . func funciones
    (6) funciones -> . voidfunc funciones
    (7) funciones -> . empty
    (67) func -> . funchead bloque RETURN identifier ENDMETHOD
    (68) voidfunc -> . prochead bloque ENDMETHOD
    (81) empty -> .
    (71) funchead -> . METHOD tipo identifier parameter_list
    (72) funchead -> . METHOD tipo identifier
    (69) prochead -> . METHOD VOID identifier parameter_list
    (70) prochead -> . METHOD VOID identifier

    ENDPROGRAM      reduce using rule 81 (empty -> .)
    METHOD          shift and go to state 8

    empty                          shift and go to state 10
    funciones                      shift and go to state 49
    funchead                       shift and go to state 12
    func                           shift and go to state 7
    prochead                       shift and go to state 11
    voidfunc                       shift and go to state 14

state 8

    (71) funchead -> METHOD . tipo identifier parameter_list
    (72) funchead -> METHOD . tipo identifier
    (69) prochead -> METHOD . VOID identifier parameter_list
    (70) prochead -> METHOD . VOID identifier
    (14) tipo -> . int
    (15) tipo -> . float
    (16) tipo -> . string
    (17) tipo -> . bool
    (18) tipo -> . hash
    (19) tipo -> . VOID
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (86) bool -> . BOOL
    (88) hash -> . HASH

    VOID            shift and go to state 51
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    BOOL            shift and go to state 16
    HASH            shift and go to state 26

    hash                           shift and go to state 23
    bool                           shift and go to state 17
    tipo                           shift and go to state 50
    int                            shift and go to state 27
    float                          shift and go to state 28
    string                         shift and go to state 30

state 9

    (2) programa -> PROGRAM bloque funciones . ENDPROGRAM

    ENDPROGRAM      shift and go to state 52


state 10

    (7) funciones -> empty .

    ENDPROGRAM      reduce using rule 7 (funciones -> empty .)


state 11

    (68) voidfunc -> prochead . bloque ENDMETHOD
    (20) bloque -> . BLOQUE estatuto_list ENDBLOQUE

    BLOQUE          shift and go to state 6

    bloque                         shift and go to state 53

state 12

    (67) func -> funchead . bloque RETURN identifier ENDMETHOD
    (20) bloque -> . BLOQUE estatuto_list ENDBLOQUE

    BLOQUE          shift and go to state 6

    bloque                         shift and go to state 54

state 13

    (1) programa -> PROGRAM bloque ENDPROGRAM .

    $end            reduce using rule 1 (programa -> PROGRAM bloque ENDPROGRAM .)


state 14

    (6) funciones -> voidfunc . funciones
    (5) funciones -> . func funciones
    (6) funciones -> . voidfunc funciones
    (7) funciones -> . empty
    (67) func -> . funchead bloque RETURN identifier ENDMETHOD
    (68) voidfunc -> . prochead bloque ENDMETHOD
    (81) empty -> .
    (71) funchead -> . METHOD tipo identifier parameter_list
    (72) funchead -> . METHOD tipo identifier
    (69) prochead -> . METHOD VOID identifier parameter_list
    (70) prochead -> . METHOD VOID identifier

    ENDPROGRAM      reduce using rule 81 (empty -> .)
    METHOD          shift and go to state 8

    empty                          shift and go to state 10
    voidfunc                       shift and go to state 14
    funchead                       shift and go to state 12
    func                           shift and go to state 7
    prochead                       shift and go to state 11
    funciones                      shift and go to state 55

state 15

    (3) programa -> PROGRAM global bloque . funciones ENDPROGRAM
    (4) programa -> PROGRAM global bloque . ENDPROGRAM
    (5) funciones -> . func funciones
    (6) funciones -> . voidfunc funciones
    (7) funciones -> . empty
    (67) func -> . funchead bloque RETURN identifier ENDMETHOD
    (68) voidfunc -> . prochead bloque ENDMETHOD
    (81) empty -> .
    (71) funchead -> . METHOD tipo identifier parameter_list
    (72) funchead -> . METHOD tipo identifier
    (69) prochead -> . METHOD VOID identifier parameter_list
    (70) prochead -> . METHOD VOID identifier

  ! shift/reduce conflict for ENDPROGRAM resolved as shift
    ENDPROGRAM      shift and go to state 57
    METHOD          shift and go to state 8

  ! ENDPROGRAM      [ reduce using rule 81 (empty -> .) ]

    empty                          shift and go to state 10
    funchead                       shift and go to state 12
    funciones                      shift and go to state 56
    func                           shift and go to state 7
    prochead                       shift and go to state 11
    voidfunc                       shift and go to state 14

state 16

    (86) bool -> BOOL .

    IDENTIFIER      reduce using rule 86 (bool -> BOOL .)
    REFERENCIA      reduce using rule 86 (bool -> BOOL .)


state 17

    (17) tipo -> bool .

    IDENTIFIER      reduce using rule 17 (tipo -> bool .)
    REFERENCIA      reduce using rule 17 (tipo -> bool .)


state 18

    (13) vars_declaration -> tipo . identifier
    (82) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 47

    identifier                     shift and go to state 58

state 19

    (87) string -> STRING .

    MULTI           reduce using rule 87 (string -> STRING .)
    DIVIDE          reduce using rule 87 (string -> STRING .)
    LTHAN           reduce using rule 87 (string -> STRING .)
    GTHAN           reduce using rule 87 (string -> STRING .)
    EQUALTO         reduce using rule 87 (string -> STRING .)
    GTHANEQ         reduce using rule 87 (string -> STRING .)
    LTHANEQ         reduce using rule 87 (string -> STRING .)
    NOTEQUAL        reduce using rule 87 (string -> STRING .)
    PLUS            reduce using rule 87 (string -> STRING .)
    MINUS           reduce using rule 87 (string -> STRING .)
    COMMA           reduce using rule 87 (string -> STRING .)
    AND             reduce using rule 87 (string -> STRING .)
    OR              reduce using rule 87 (string -> STRING .)
    IF              reduce using rule 87 (string -> STRING .)
    PRINT           reduce using rule 87 (string -> STRING .)
    READ            reduce using rule 87 (string -> STRING .)
    WHILE           reduce using rule 87 (string -> STRING .)
    FOR             reduce using rule 87 (string -> STRING .)
    VAR             reduce using rule 87 (string -> STRING .)
    IDENTIFIER      reduce using rule 87 (string -> STRING .)
    ENDBLOQUE       reduce using rule 87 (string -> STRING .)
    ELSE            reduce using rule 87 (string -> STRING .)
    ENDIF           reduce using rule 87 (string -> STRING .)
    ELSEIF          reduce using rule 87 (string -> STRING .)
    ENDFOR          reduce using rule 87 (string -> STRING .)
    ENDWHILE        reduce using rule 87 (string -> STRING .)
    RPARENTHESES    reduce using rule 87 (string -> STRING .)
    REFERENCIA      reduce using rule 87 (string -> STRING .)


state 20

    (19) tipo -> VOID .

    IDENTIFIER      reduce using rule 19 (tipo -> VOID .)
    REFERENCIA      reduce using rule 19 (tipo -> VOID .)


state 21

    (10) vars_list -> vars_declaration . vars_list
    (11) vars_list -> vars_declaration .
    (10) vars_list -> . vars_declaration vars_list
    (11) vars_list -> . vars_declaration
    (12) vars_list -> . empty
    (13) vars_declaration -> . tipo identifier
    (81) empty -> .
    (14) tipo -> . int
    (15) tipo -> . float
    (16) tipo -> . string
    (17) tipo -> . bool
    (18) tipo -> . hash
    (19) tipo -> . VOID
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (86) bool -> . BOOL
    (88) hash -> . HASH

  ! reduce/reduce conflict for ENDGLOBAL resolved using rule 11 (vars_list -> vars_declaration .)
  ! reduce/reduce conflict for ENDVAR resolved using rule 11 (vars_list -> vars_declaration .)
    ENDGLOBAL       reduce using rule 11 (vars_list -> vars_declaration .)
    ENDVAR          reduce using rule 11 (vars_list -> vars_declaration .)
    VOID            shift and go to state 20
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    BOOL            shift and go to state 16
    HASH            shift and go to state 26

  ! ENDGLOBAL       [ reduce using rule 81 (empty -> .) ]
  ! ENDVAR          [ reduce using rule 81 (empty -> .) ]

    hash                           shift and go to state 23
    bool                           shift and go to state 17
    empty                          shift and go to state 24
    int                            shift and go to state 27
    float                          shift and go to state 28
    vars_declaration               shift and go to state 21
    vars_list                      shift and go to state 59
    tipo                           shift and go to state 18
    string                         shift and go to state 30

state 22

    (9) global -> GLOBAL vars_list . ENDGLOBAL

    ENDGLOBAL       shift and go to state 60


state 23

    (18) tipo -> hash .

    IDENTIFIER      reduce using rule 18 (tipo -> hash .)
    REFERENCIA      reduce using rule 18 (tipo -> hash .)


state 24

    (12) vars_list -> empty .

    ENDGLOBAL       reduce using rule 12 (vars_list -> empty .)
    ENDVAR          reduce using rule 12 (vars_list -> empty .)


state 25

    (84) int -> INT .

    MULTI           reduce using rule 84 (int -> INT .)
    DIVIDE          reduce using rule 84 (int -> INT .)
    LTHAN           reduce using rule 84 (int -> INT .)
    GTHAN           reduce using rule 84 (int -> INT .)
    EQUALTO         reduce using rule 84 (int -> INT .)
    GTHANEQ         reduce using rule 84 (int -> INT .)
    LTHANEQ         reduce using rule 84 (int -> INT .)
    NOTEQUAL        reduce using rule 84 (int -> INT .)
    PLUS            reduce using rule 84 (int -> INT .)
    MINUS           reduce using rule 84 (int -> INT .)
    RPARENTHESES    reduce using rule 84 (int -> INT .)
    AND             reduce using rule 84 (int -> INT .)
    OR              reduce using rule 84 (int -> INT .)
    COMMA           reduce using rule 84 (int -> INT .)
    IF              reduce using rule 84 (int -> INT .)
    PRINT           reduce using rule 84 (int -> INT .)
    READ            reduce using rule 84 (int -> INT .)
    WHILE           reduce using rule 84 (int -> INT .)
    FOR             reduce using rule 84 (int -> INT .)
    VAR             reduce using rule 84 (int -> INT .)
    IDENTIFIER      reduce using rule 84 (int -> INT .)
    ENDBLOQUE       reduce using rule 84 (int -> INT .)
    ELSE            reduce using rule 84 (int -> INT .)
    ENDIF           reduce using rule 84 (int -> INT .)
    ELSEIF          reduce using rule 84 (int -> INT .)
    ENDFOR          reduce using rule 84 (int -> INT .)
    ENDWHILE        reduce using rule 84 (int -> INT .)
    REFERENCIA      reduce using rule 84 (int -> INT .)


state 26

    (88) hash -> HASH .

    IDENTIFIER      reduce using rule 88 (hash -> HASH .)
    REFERENCIA      reduce using rule 88 (hash -> HASH .)


state 27

    (14) tipo -> int .

    IDENTIFIER      reduce using rule 14 (tipo -> int .)
    REFERENCIA      reduce using rule 14 (tipo -> int .)


state 28

    (15) tipo -> float .

    IDENTIFIER      reduce using rule 15 (tipo -> float .)
    REFERENCIA      reduce using rule 15 (tipo -> float .)


state 29

    (85) float -> FLOAT .

    MULTI           reduce using rule 85 (float -> FLOAT .)
    DIVIDE          reduce using rule 85 (float -> FLOAT .)
    LTHAN           reduce using rule 85 (float -> FLOAT .)
    GTHAN           reduce using rule 85 (float -> FLOAT .)
    EQUALTO         reduce using rule 85 (float -> FLOAT .)
    GTHANEQ         reduce using rule 85 (float -> FLOAT .)
    LTHANEQ         reduce using rule 85 (float -> FLOAT .)
    NOTEQUAL        reduce using rule 85 (float -> FLOAT .)
    PLUS            reduce using rule 85 (float -> FLOAT .)
    MINUS           reduce using rule 85 (float -> FLOAT .)
    COMMA           reduce using rule 85 (float -> FLOAT .)
    AND             reduce using rule 85 (float -> FLOAT .)
    OR              reduce using rule 85 (float -> FLOAT .)
    IF              reduce using rule 85 (float -> FLOAT .)
    PRINT           reduce using rule 85 (float -> FLOAT .)
    READ            reduce using rule 85 (float -> FLOAT .)
    WHILE           reduce using rule 85 (float -> FLOAT .)
    FOR             reduce using rule 85 (float -> FLOAT .)
    VAR             reduce using rule 85 (float -> FLOAT .)
    IDENTIFIER      reduce using rule 85 (float -> FLOAT .)
    ENDBLOQUE       reduce using rule 85 (float -> FLOAT .)
    ELSE            reduce using rule 85 (float -> FLOAT .)
    ENDIF           reduce using rule 85 (float -> FLOAT .)
    ELSEIF          reduce using rule 85 (float -> FLOAT .)
    ENDFOR          reduce using rule 85 (float -> FLOAT .)
    ENDWHILE        reduce using rule 85 (float -> FLOAT .)
    RPARENTHESES    reduce using rule 85 (float -> FLOAT .)
    REFERENCIA      reduce using rule 85 (float -> FLOAT .)


state 30

    (16) tipo -> string .

    IDENTIFIER      reduce using rule 16 (tipo -> string .)
    REFERENCIA      reduce using rule 16 (tipo -> string .)


state 31

    (36) condicion -> IF . expresion estatuto_list elseif ENDIF
    (37) condicion -> IF . expresion estatuto_list elseif ELSE estatuto_list ENDIF
    (38) condicion -> IF . expresion estatuto_list ELSE estatuto_list ENDIF
    (39) condicion -> IF . expresion estatuto_list ENDIF
    (43) expresion -> . termino
    (44) expresion -> . expresion and_or termino
    (45) termino -> . factor
    (46) termino -> . termino sign factor
    (47) factor -> . elemento
    (48) factor -> . factor psign elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

    int                            shift and go to state 69
    expresion                      shift and go to state 61
    termino                        shift and go to state 62
    factor                         shift and go to state 67
    llamarfun                      shift and go to state 68
    string                         shift and go to state 65
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    elemento                       shift and go to state 71

state 32

    (20) bloque -> BLOQUE estatuto_list . ENDBLOQUE

    ENDBLOQUE       shift and go to state 72


state 33

    (30) estatuto -> vars .

    IF              reduce using rule 30 (estatuto -> vars .)
    PRINT           reduce using rule 30 (estatuto -> vars .)
    READ            reduce using rule 30 (estatuto -> vars .)
    WHILE           reduce using rule 30 (estatuto -> vars .)
    FOR             reduce using rule 30 (estatuto -> vars .)
    VAR             reduce using rule 30 (estatuto -> vars .)
    IDENTIFIER      reduce using rule 30 (estatuto -> vars .)
    ENDFOR          reduce using rule 30 (estatuto -> vars .)
    ENDIF           reduce using rule 30 (estatuto -> vars .)
    ELSE            reduce using rule 30 (estatuto -> vars .)
    ENDWHILE        reduce using rule 30 (estatuto -> vars .)
    ENDBLOQUE       reduce using rule 30 (estatuto -> vars .)
    ELSEIF          reduce using rule 30 (estatuto -> vars .)


state 34

    (32) escritura -> PRINT . escritura_vars
    (33) escritura_vars -> . expresion COMMA escritura_vars
    (34) escritura_vars -> . expresion
    (43) expresion -> . termino
    (44) expresion -> . expresion and_or termino
    (45) termino -> . factor
    (46) termino -> . termino sign factor
    (47) factor -> . elemento
    (48) factor -> . factor psign elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

    expresion                      shift and go to state 73
    termino                        shift and go to state 62
    factor                         shift and go to state 67
    llamarfun                      shift and go to state 68
    string                         shift and go to state 65
    int                            shift and go to state 69
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    escritura_vars                 shift and go to state 74
    elemento                       shift and go to state 71

state 35

    (24) estatuto -> asignacion .

    IF              reduce using rule 24 (estatuto -> asignacion .)
    PRINT           reduce using rule 24 (estatuto -> asignacion .)
    READ            reduce using rule 24 (estatuto -> asignacion .)
    WHILE           reduce using rule 24 (estatuto -> asignacion .)
    FOR             reduce using rule 24 (estatuto -> asignacion .)
    VAR             reduce using rule 24 (estatuto -> asignacion .)
    IDENTIFIER      reduce using rule 24 (estatuto -> asignacion .)
    ENDFOR          reduce using rule 24 (estatuto -> asignacion .)
    ENDIF           reduce using rule 24 (estatuto -> asignacion .)
    ELSE            reduce using rule 24 (estatuto -> asignacion .)
    ENDWHILE        reduce using rule 24 (estatuto -> asignacion .)
    ENDBLOQUE       reduce using rule 24 (estatuto -> asignacion .)
    ELSEIF          reduce using rule 24 (estatuto -> asignacion .)


state 36

    (42) for -> FOR . int estatuto_list ENDFOR
    (84) int -> . INT

    INT             shift and go to state 25

    int                            shift and go to state 75

state 37

    (23) estatuto_list -> empty .

    ENDIF           reduce using rule 23 (estatuto_list -> empty .)
    ELSE            reduce using rule 23 (estatuto_list -> empty .)
    ENDWHILE        reduce using rule 23 (estatuto_list -> empty .)
    ENDBLOQUE       reduce using rule 23 (estatuto_list -> empty .)
    ENDFOR          reduce using rule 23 (estatuto_list -> empty .)
    ELSEIF          reduce using rule 23 (estatuto_list -> empty .)


state 38

    (21) estatuto_list -> estatuto . estatuto_list
    (22) estatuto_list -> estatuto .
    (21) estatuto_list -> . estatuto estatuto_list
    (22) estatuto_list -> . estatuto
    (23) estatuto_list -> . empty
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . lectura
    (28) estatuto -> . while
    (29) estatuto -> . for
    (30) estatuto -> . vars
    (81) empty -> .
    (31) asignacion -> . identifier EQUAL expresion
    (36) condicion -> . IF expresion estatuto_list elseif ENDIF
    (37) condicion -> . IF expresion estatuto_list elseif ELSE estatuto_list ENDIF
    (38) condicion -> . IF expresion estatuto_list ELSE estatuto_list ENDIF
    (39) condicion -> . IF expresion estatuto_list ENDIF
    (32) escritura -> . PRINT escritura_vars
    (35) lectura -> . READ identifier
    (41) while -> . WHILE expresion estatuto_list ENDWHILE
    (42) for -> . FOR int estatuto_list ENDFOR
    (8) vars -> . VAR vars_list ENDVAR
    (82) identifier -> . IDENTIFIER

  ! reduce/reduce conflict for ENDBLOQUE resolved using rule 22 (estatuto_list -> estatuto .)
  ! reduce/reduce conflict for ELSE resolved using rule 22 (estatuto_list -> estatuto .)
  ! reduce/reduce conflict for ENDIF resolved using rule 22 (estatuto_list -> estatuto .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 22 (estatuto_list -> estatuto .)
  ! reduce/reduce conflict for ENDFOR resolved using rule 22 (estatuto_list -> estatuto .)
  ! reduce/reduce conflict for ENDWHILE resolved using rule 22 (estatuto_list -> estatuto .)
    ENDIF           reduce using rule 22 (estatuto_list -> estatuto .)
    ELSE            reduce using rule 22 (estatuto_list -> estatuto .)
    ENDWHILE        reduce using rule 22 (estatuto_list -> estatuto .)
    ENDBLOQUE       reduce using rule 22 (estatuto_list -> estatuto .)
    ENDFOR          reduce using rule 22 (estatuto_list -> estatuto .)
    ELSEIF          reduce using rule 22 (estatuto_list -> estatuto .)
    IF              shift and go to state 31
    PRINT           shift and go to state 34
    READ            shift and go to state 48
    WHILE           shift and go to state 40
    FOR             shift and go to state 36
    VAR             shift and go to state 46
    IDENTIFIER      shift and go to state 47

  ! ENDBLOQUE       [ reduce using rule 81 (empty -> .) ]
  ! ELSE            [ reduce using rule 81 (empty -> .) ]
  ! ENDIF           [ reduce using rule 81 (empty -> .) ]
  ! ELSEIF          [ reduce using rule 81 (empty -> .) ]
  ! ENDFOR          [ reduce using rule 81 (empty -> .) ]
  ! ENDWHILE        [ reduce using rule 81 (empty -> .) ]

    estatuto_list                  shift and go to state 76
    vars                           shift and go to state 33
    for                            shift and go to state 41
    estatuto                       shift and go to state 38
    empty                          shift and go to state 37
    asignacion                     shift and go to state 35
    lectura                        shift and go to state 43
    escritura                      shift and go to state 42
    while                          shift and go to state 44
    identifier                     shift and go to state 45
    condicion                      shift and go to state 39

state 39

    (25) estatuto -> condicion .

    IF              reduce using rule 25 (estatuto -> condicion .)
    PRINT           reduce using rule 25 (estatuto -> condicion .)
    READ            reduce using rule 25 (estatuto -> condicion .)
    WHILE           reduce using rule 25 (estatuto -> condicion .)
    FOR             reduce using rule 25 (estatuto -> condicion .)
    VAR             reduce using rule 25 (estatuto -> condicion .)
    IDENTIFIER      reduce using rule 25 (estatuto -> condicion .)
    ENDFOR          reduce using rule 25 (estatuto -> condicion .)
    ENDIF           reduce using rule 25 (estatuto -> condicion .)
    ELSE            reduce using rule 25 (estatuto -> condicion .)
    ENDWHILE        reduce using rule 25 (estatuto -> condicion .)
    ENDBLOQUE       reduce using rule 25 (estatuto -> condicion .)
    ELSEIF          reduce using rule 25 (estatuto -> condicion .)


state 40

    (41) while -> WHILE . expresion estatuto_list ENDWHILE
    (43) expresion -> . termino
    (44) expresion -> . expresion and_or termino
    (45) termino -> . factor
    (46) termino -> . termino sign factor
    (47) factor -> . elemento
    (48) factor -> . factor psign elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

    int                            shift and go to state 69
    expresion                      shift and go to state 77
    termino                        shift and go to state 62
    factor                         shift and go to state 67
    llamarfun                      shift and go to state 68
    string                         shift and go to state 65
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    elemento                       shift and go to state 71

state 41

    (29) estatuto -> for .

    IF              reduce using rule 29 (estatuto -> for .)
    PRINT           reduce using rule 29 (estatuto -> for .)
    READ            reduce using rule 29 (estatuto -> for .)
    WHILE           reduce using rule 29 (estatuto -> for .)
    FOR             reduce using rule 29 (estatuto -> for .)
    VAR             reduce using rule 29 (estatuto -> for .)
    IDENTIFIER      reduce using rule 29 (estatuto -> for .)
    ENDFOR          reduce using rule 29 (estatuto -> for .)
    ENDIF           reduce using rule 29 (estatuto -> for .)
    ELSE            reduce using rule 29 (estatuto -> for .)
    ENDWHILE        reduce using rule 29 (estatuto -> for .)
    ENDBLOQUE       reduce using rule 29 (estatuto -> for .)
    ELSEIF          reduce using rule 29 (estatuto -> for .)


state 42

    (26) estatuto -> escritura .

    IF              reduce using rule 26 (estatuto -> escritura .)
    PRINT           reduce using rule 26 (estatuto -> escritura .)
    READ            reduce using rule 26 (estatuto -> escritura .)
    WHILE           reduce using rule 26 (estatuto -> escritura .)
    FOR             reduce using rule 26 (estatuto -> escritura .)
    VAR             reduce using rule 26 (estatuto -> escritura .)
    IDENTIFIER      reduce using rule 26 (estatuto -> escritura .)
    ENDFOR          reduce using rule 26 (estatuto -> escritura .)
    ENDIF           reduce using rule 26 (estatuto -> escritura .)
    ELSE            reduce using rule 26 (estatuto -> escritura .)
    ENDWHILE        reduce using rule 26 (estatuto -> escritura .)
    ENDBLOQUE       reduce using rule 26 (estatuto -> escritura .)
    ELSEIF          reduce using rule 26 (estatuto -> escritura .)


state 43

    (27) estatuto -> lectura .

    IF              reduce using rule 27 (estatuto -> lectura .)
    PRINT           reduce using rule 27 (estatuto -> lectura .)
    READ            reduce using rule 27 (estatuto -> lectura .)
    WHILE           reduce using rule 27 (estatuto -> lectura .)
    FOR             reduce using rule 27 (estatuto -> lectura .)
    VAR             reduce using rule 27 (estatuto -> lectura .)
    IDENTIFIER      reduce using rule 27 (estatuto -> lectura .)
    ENDFOR          reduce using rule 27 (estatuto -> lectura .)
    ENDIF           reduce using rule 27 (estatuto -> lectura .)
    ELSE            reduce using rule 27 (estatuto -> lectura .)
    ENDWHILE        reduce using rule 27 (estatuto -> lectura .)
    ENDBLOQUE       reduce using rule 27 (estatuto -> lectura .)
    ELSEIF          reduce using rule 27 (estatuto -> lectura .)


state 44

    (28) estatuto -> while .

    IF              reduce using rule 28 (estatuto -> while .)
    PRINT           reduce using rule 28 (estatuto -> while .)
    READ            reduce using rule 28 (estatuto -> while .)
    WHILE           reduce using rule 28 (estatuto -> while .)
    FOR             reduce using rule 28 (estatuto -> while .)
    VAR             reduce using rule 28 (estatuto -> while .)
    IDENTIFIER      reduce using rule 28 (estatuto -> while .)
    ENDFOR          reduce using rule 28 (estatuto -> while .)
    ENDIF           reduce using rule 28 (estatuto -> while .)
    ELSE            reduce using rule 28 (estatuto -> while .)
    ENDWHILE        reduce using rule 28 (estatuto -> while .)
    ENDBLOQUE       reduce using rule 28 (estatuto -> while .)
    ELSEIF          reduce using rule 28 (estatuto -> while .)


state 45

    (31) asignacion -> identifier . EQUAL expresion

    EQUAL           shift and go to state 78


state 46

    (8) vars -> VAR . vars_list ENDVAR
    (10) vars_list -> . vars_declaration vars_list
    (11) vars_list -> . vars_declaration
    (12) vars_list -> . empty
    (13) vars_declaration -> . tipo identifier
    (81) empty -> .
    (14) tipo -> . int
    (15) tipo -> . float
    (16) tipo -> . string
    (17) tipo -> . bool
    (18) tipo -> . hash
    (19) tipo -> . VOID
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (86) bool -> . BOOL
    (88) hash -> . HASH

    ENDVAR          reduce using rule 81 (empty -> .)
    VOID            shift and go to state 20
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    BOOL            shift and go to state 16
    HASH            shift and go to state 26

    hash                           shift and go to state 23
    bool                           shift and go to state 17
    empty                          shift and go to state 24
    int                            shift and go to state 27
    float                          shift and go to state 28
    vars_list                      shift and go to state 79
    vars_declaration               shift and go to state 21
    tipo                           shift and go to state 18
    string                         shift and go to state 30

state 47

    (82) identifier -> IDENTIFIER .

    VOID            reduce using rule 82 (identifier -> IDENTIFIER .)
    INT             reduce using rule 82 (identifier -> IDENTIFIER .)
    FLOAT           reduce using rule 82 (identifier -> IDENTIFIER .)
    STRING          reduce using rule 82 (identifier -> IDENTIFIER .)
    BOOL            reduce using rule 82 (identifier -> IDENTIFIER .)
    HASH            reduce using rule 82 (identifier -> IDENTIFIER .)
    BLOQUE          reduce using rule 82 (identifier -> IDENTIFIER .)
    EQUAL           reduce using rule 82 (identifier -> IDENTIFIER .)
    MULTI           reduce using rule 82 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 82 (identifier -> IDENTIFIER .)
    LTHAN           reduce using rule 82 (identifier -> IDENTIFIER .)
    GTHAN           reduce using rule 82 (identifier -> IDENTIFIER .)
    EQUALTO         reduce using rule 82 (identifier -> IDENTIFIER .)
    GTHANEQ         reduce using rule 82 (identifier -> IDENTIFIER .)
    LTHANEQ         reduce using rule 82 (identifier -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 82 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 82 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 82 (identifier -> IDENTIFIER .)
    AND             reduce using rule 82 (identifier -> IDENTIFIER .)
    OR              reduce using rule 82 (identifier -> IDENTIFIER .)
    IF              reduce using rule 82 (identifier -> IDENTIFIER .)
    PRINT           reduce using rule 82 (identifier -> IDENTIFIER .)
    READ            reduce using rule 82 (identifier -> IDENTIFIER .)
    WHILE           reduce using rule 82 (identifier -> IDENTIFIER .)
    FOR             reduce using rule 82 (identifier -> IDENTIFIER .)
    VAR             reduce using rule 82 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 82 (identifier -> IDENTIFIER .)
    ELSE            reduce using rule 82 (identifier -> IDENTIFIER .)
    ENDIF           reduce using rule 82 (identifier -> IDENTIFIER .)
    ELSEIF          reduce using rule 82 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 82 (identifier -> IDENTIFIER .)
    ENDBLOQUE       reduce using rule 82 (identifier -> IDENTIFIER .)
    ENDFOR          reduce using rule 82 (identifier -> IDENTIFIER .)
    ENDWHILE        reduce using rule 82 (identifier -> IDENTIFIER .)
    RPARENTHESES    reduce using rule 82 (identifier -> IDENTIFIER .)
    ENDMETHOD       reduce using rule 82 (identifier -> IDENTIFIER .)
    ENDGLOBAL       reduce using rule 82 (identifier -> IDENTIFIER .)
    ENDVAR          reduce using rule 82 (identifier -> IDENTIFIER .)
    LPARENTHESES    reduce using rule 82 (identifier -> IDENTIFIER .)
    CALLMETHOD      reduce using rule 82 (identifier -> IDENTIFIER .)


state 48

    (35) lectura -> READ . identifier
    (82) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 47

    identifier                     shift and go to state 80

state 49

    (5) funciones -> func funciones .

    ENDPROGRAM      reduce using rule 5 (funciones -> func funciones .)


state 50

    (71) funchead -> METHOD tipo . identifier parameter_list
    (72) funchead -> METHOD tipo . identifier
    (82) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 47

    identifier                     shift and go to state 81

state 51

    (69) prochead -> METHOD VOID . identifier parameter_list
    (70) prochead -> METHOD VOID . identifier
    (19) tipo -> VOID .
    (82) identifier -> . IDENTIFIER

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    IDENTIFIER      shift and go to state 47

  ! IDENTIFIER      [ reduce using rule 19 (tipo -> VOID .) ]

    identifier                     shift and go to state 82

state 52

    (2) programa -> PROGRAM bloque funciones ENDPROGRAM .

    $end            reduce using rule 2 (programa -> PROGRAM bloque funciones ENDPROGRAM .)


state 53

    (68) voidfunc -> prochead bloque . ENDMETHOD

    ENDMETHOD       shift and go to state 83


state 54

    (67) func -> funchead bloque . RETURN identifier ENDMETHOD

    RETURN          shift and go to state 84


state 55

    (6) funciones -> voidfunc funciones .

    ENDPROGRAM      reduce using rule 6 (funciones -> voidfunc funciones .)


state 56

    (3) programa -> PROGRAM global bloque funciones . ENDPROGRAM

    ENDPROGRAM      shift and go to state 85


state 57

    (4) programa -> PROGRAM global bloque ENDPROGRAM .

    $end            reduce using rule 4 (programa -> PROGRAM global bloque ENDPROGRAM .)


state 58

    (13) vars_declaration -> tipo identifier .

    VOID            reduce using rule 13 (vars_declaration -> tipo identifier .)
    INT             reduce using rule 13 (vars_declaration -> tipo identifier .)
    FLOAT           reduce using rule 13 (vars_declaration -> tipo identifier .)
    STRING          reduce using rule 13 (vars_declaration -> tipo identifier .)
    BOOL            reduce using rule 13 (vars_declaration -> tipo identifier .)
    HASH            reduce using rule 13 (vars_declaration -> tipo identifier .)
    ENDVAR          reduce using rule 13 (vars_declaration -> tipo identifier .)
    ENDGLOBAL       reduce using rule 13 (vars_declaration -> tipo identifier .)


state 59

    (10) vars_list -> vars_declaration vars_list .

    ENDGLOBAL       reduce using rule 10 (vars_list -> vars_declaration vars_list .)
    ENDVAR          reduce using rule 10 (vars_list -> vars_declaration vars_list .)


state 60

    (9) global -> GLOBAL vars_list ENDGLOBAL .

    BLOQUE          reduce using rule 9 (global -> GLOBAL vars_list ENDGLOBAL .)


state 61

    (36) condicion -> IF expresion . estatuto_list elseif ENDIF
    (37) condicion -> IF expresion . estatuto_list elseif ELSE estatuto_list ENDIF
    (38) condicion -> IF expresion . estatuto_list ELSE estatuto_list ENDIF
    (39) condicion -> IF expresion . estatuto_list ENDIF
    (44) expresion -> expresion . and_or termino
    (21) estatuto_list -> . estatuto estatuto_list
    (22) estatuto_list -> . estatuto
    (23) estatuto_list -> . empty
    (59) and_or -> . AND
    (60) and_or -> . OR
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . lectura
    (28) estatuto -> . while
    (29) estatuto -> . for
    (30) estatuto -> . vars
    (81) empty -> .
    (31) asignacion -> . identifier EQUAL expresion
    (36) condicion -> . IF expresion estatuto_list elseif ENDIF
    (37) condicion -> . IF expresion estatuto_list elseif ELSE estatuto_list ENDIF
    (38) condicion -> . IF expresion estatuto_list ELSE estatuto_list ENDIF
    (39) condicion -> . IF expresion estatuto_list ENDIF
    (32) escritura -> . PRINT escritura_vars
    (35) lectura -> . READ identifier
    (41) while -> . WHILE expresion estatuto_list ENDWHILE
    (42) for -> . FOR int estatuto_list ENDFOR
    (8) vars -> . VAR vars_list ENDVAR
    (82) identifier -> . IDENTIFIER

    AND             shift and go to state 87
    OR              shift and go to state 88
    ELSE            reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSEIF          reduce using rule 81 (empty -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 34
    READ            shift and go to state 48
    WHILE           shift and go to state 40
    FOR             shift and go to state 36
    VAR             shift and go to state 46
    IDENTIFIER      shift and go to state 47

    identifier                     shift and go to state 45
    estatuto_list                  shift and go to state 86
    vars                           shift and go to state 33
    for                            shift and go to state 41
    while                          shift and go to state 44
    lectura                        shift and go to state 43
    condicion                      shift and go to state 39
    empty                          shift and go to state 37
    escritura                      shift and go to state 42
    and_or                         shift and go to state 89
    estatuto                       shift and go to state 38
    asignacion                     shift and go to state 35

state 62

    (43) expresion -> termino .
    (46) termino -> termino . sign factor
    (49) sign -> . LTHAN
    (50) sign -> . GTHAN
    (51) sign -> . EQUALTO
    (52) sign -> . GTHANEQ
    (53) sign -> . LTHANEQ
    (54) sign -> . NOTEQUAL
    (55) sign -> . PLUS
    (56) sign -> . MINUS

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPARENTHESES    reduce using rule 43 (expresion -> termino .)
    AND             reduce using rule 43 (expresion -> termino .)
    OR              reduce using rule 43 (expresion -> termino .)
    MULTI           reduce using rule 43 (expresion -> termino .)
    DIVIDE          reduce using rule 43 (expresion -> termino .)
    IF              reduce using rule 43 (expresion -> termino .)
    PRINT           reduce using rule 43 (expresion -> termino .)
    READ            reduce using rule 43 (expresion -> termino .)
    WHILE           reduce using rule 43 (expresion -> termino .)
    FOR             reduce using rule 43 (expresion -> termino .)
    VAR             reduce using rule 43 (expresion -> termino .)
    IDENTIFIER      reduce using rule 43 (expresion -> termino .)
    ELSE            reduce using rule 43 (expresion -> termino .)
    ENDIF           reduce using rule 43 (expresion -> termino .)
    ELSEIF          reduce using rule 43 (expresion -> termino .)
    COMMA           reduce using rule 43 (expresion -> termino .)
    ENDBLOQUE       reduce using rule 43 (expresion -> termino .)
    ENDFOR          reduce using rule 43 (expresion -> termino .)
    ENDWHILE        reduce using rule 43 (expresion -> termino .)
    LTHAN           shift and go to state 93
    GTHAN           shift and go to state 91
    EQUALTO         shift and go to state 94
    GTHANEQ         shift and go to state 96
    LTHANEQ         shift and go to state 90
    NOTEQUAL        shift and go to state 92
    PLUS            shift and go to state 95
    MINUS           shift and go to state 98

  ! LTHAN           [ reduce using rule 43 (expresion -> termino .) ]
  ! GTHAN           [ reduce using rule 43 (expresion -> termino .) ]
  ! EQUALTO         [ reduce using rule 43 (expresion -> termino .) ]
  ! GTHANEQ         [ reduce using rule 43 (expresion -> termino .) ]
  ! LTHANEQ         [ reduce using rule 43 (expresion -> termino .) ]
  ! NOTEQUAL        [ reduce using rule 43 (expresion -> termino .) ]
  ! PLUS            [ reduce using rule 43 (expresion -> termino .) ]
  ! MINUS           [ reduce using rule 43 (expresion -> termino .) ]

    sign                           shift and go to state 97

state 63

    (77) llamarfun -> CALLMETHOD . identifier funparams
    (78) llamarfun -> CALLMETHOD . identifier
    (82) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 47

    identifier                     shift and go to state 99

state 64

    (63) elemento -> float .

    MULTI           reduce using rule 63 (elemento -> float .)
    DIVIDE          reduce using rule 63 (elemento -> float .)
    LTHAN           reduce using rule 63 (elemento -> float .)
    GTHAN           reduce using rule 63 (elemento -> float .)
    EQUALTO         reduce using rule 63 (elemento -> float .)
    GTHANEQ         reduce using rule 63 (elemento -> float .)
    LTHANEQ         reduce using rule 63 (elemento -> float .)
    NOTEQUAL        reduce using rule 63 (elemento -> float .)
    PLUS            reduce using rule 63 (elemento -> float .)
    MINUS           reduce using rule 63 (elemento -> float .)
    COMMA           reduce using rule 63 (elemento -> float .)
    AND             reduce using rule 63 (elemento -> float .)
    OR              reduce using rule 63 (elemento -> float .)
    IF              reduce using rule 63 (elemento -> float .)
    PRINT           reduce using rule 63 (elemento -> float .)
    READ            reduce using rule 63 (elemento -> float .)
    WHILE           reduce using rule 63 (elemento -> float .)
    FOR             reduce using rule 63 (elemento -> float .)
    VAR             reduce using rule 63 (elemento -> float .)
    IDENTIFIER      reduce using rule 63 (elemento -> float .)
    ENDBLOQUE       reduce using rule 63 (elemento -> float .)
    ELSE            reduce using rule 63 (elemento -> float .)
    ENDIF           reduce using rule 63 (elemento -> float .)
    ELSEIF          reduce using rule 63 (elemento -> float .)
    ENDFOR          reduce using rule 63 (elemento -> float .)
    ENDWHILE        reduce using rule 63 (elemento -> float .)
    RPARENTHESES    reduce using rule 63 (elemento -> float .)


state 65

    (64) elemento -> string .

    MULTI           reduce using rule 64 (elemento -> string .)
    DIVIDE          reduce using rule 64 (elemento -> string .)
    LTHAN           reduce using rule 64 (elemento -> string .)
    GTHAN           reduce using rule 64 (elemento -> string .)
    EQUALTO         reduce using rule 64 (elemento -> string .)
    GTHANEQ         reduce using rule 64 (elemento -> string .)
    LTHANEQ         reduce using rule 64 (elemento -> string .)
    NOTEQUAL        reduce using rule 64 (elemento -> string .)
    PLUS            reduce using rule 64 (elemento -> string .)
    MINUS           reduce using rule 64 (elemento -> string .)
    COMMA           reduce using rule 64 (elemento -> string .)
    AND             reduce using rule 64 (elemento -> string .)
    OR              reduce using rule 64 (elemento -> string .)
    IF              reduce using rule 64 (elemento -> string .)
    PRINT           reduce using rule 64 (elemento -> string .)
    READ            reduce using rule 64 (elemento -> string .)
    WHILE           reduce using rule 64 (elemento -> string .)
    FOR             reduce using rule 64 (elemento -> string .)
    VAR             reduce using rule 64 (elemento -> string .)
    IDENTIFIER      reduce using rule 64 (elemento -> string .)
    ENDBLOQUE       reduce using rule 64 (elemento -> string .)
    ELSE            reduce using rule 64 (elemento -> string .)
    ENDIF           reduce using rule 64 (elemento -> string .)
    ELSEIF          reduce using rule 64 (elemento -> string .)
    ENDFOR          reduce using rule 64 (elemento -> string .)
    ENDWHILE        reduce using rule 64 (elemento -> string .)
    RPARENTHESES    reduce using rule 64 (elemento -> string .)


state 66

    (65) elemento -> LPARENTHESES . expresion RPARENTHESES
    (43) expresion -> . termino
    (44) expresion -> . expresion and_or termino
    (45) termino -> . factor
    (46) termino -> . termino sign factor
    (47) factor -> . elemento
    (48) factor -> . factor psign elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

    expresion                      shift and go to state 100
    termino                        shift and go to state 62
    elemento                       shift and go to state 71
    factor                         shift and go to state 67
    llamarfun                      shift and go to state 68
    int                            shift and go to state 69
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    string                         shift and go to state 65

state 67

    (45) termino -> factor .
    (48) factor -> factor . psign elemento
    (57) psign -> . MULTI
    (58) psign -> . DIVIDE

  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    LTHAN           reduce using rule 45 (termino -> factor .)
    GTHAN           reduce using rule 45 (termino -> factor .)
    EQUALTO         reduce using rule 45 (termino -> factor .)
    GTHANEQ         reduce using rule 45 (termino -> factor .)
    LTHANEQ         reduce using rule 45 (termino -> factor .)
    NOTEQUAL        reduce using rule 45 (termino -> factor .)
    PLUS            reduce using rule 45 (termino -> factor .)
    MINUS           reduce using rule 45 (termino -> factor .)
    RPARENTHESES    reduce using rule 45 (termino -> factor .)
    AND             reduce using rule 45 (termino -> factor .)
    OR              reduce using rule 45 (termino -> factor .)
    IF              reduce using rule 45 (termino -> factor .)
    PRINT           reduce using rule 45 (termino -> factor .)
    READ            reduce using rule 45 (termino -> factor .)
    WHILE           reduce using rule 45 (termino -> factor .)
    FOR             reduce using rule 45 (termino -> factor .)
    VAR             reduce using rule 45 (termino -> factor .)
    IDENTIFIER      reduce using rule 45 (termino -> factor .)
    ENDWHILE        reduce using rule 45 (termino -> factor .)
    ELSE            reduce using rule 45 (termino -> factor .)
    ENDIF           reduce using rule 45 (termino -> factor .)
    ELSEIF          reduce using rule 45 (termino -> factor .)
    ENDBLOQUE       reduce using rule 45 (termino -> factor .)
    ENDFOR          reduce using rule 45 (termino -> factor .)
    COMMA           reduce using rule 45 (termino -> factor .)
    MULTI           shift and go to state 101
    DIVIDE          shift and go to state 103

  ! MULTI           [ reduce using rule 45 (termino -> factor .) ]
  ! DIVIDE          [ reduce using rule 45 (termino -> factor .) ]

    psign                          shift and go to state 102

state 68

    (66) elemento -> llamarfun .

    MULTI           reduce using rule 66 (elemento -> llamarfun .)
    DIVIDE          reduce using rule 66 (elemento -> llamarfun .)
    LTHAN           reduce using rule 66 (elemento -> llamarfun .)
    GTHAN           reduce using rule 66 (elemento -> llamarfun .)
    EQUALTO         reduce using rule 66 (elemento -> llamarfun .)
    GTHANEQ         reduce using rule 66 (elemento -> llamarfun .)
    LTHANEQ         reduce using rule 66 (elemento -> llamarfun .)
    NOTEQUAL        reduce using rule 66 (elemento -> llamarfun .)
    PLUS            reduce using rule 66 (elemento -> llamarfun .)
    MINUS           reduce using rule 66 (elemento -> llamarfun .)
    COMMA           reduce using rule 66 (elemento -> llamarfun .)
    AND             reduce using rule 66 (elemento -> llamarfun .)
    OR              reduce using rule 66 (elemento -> llamarfun .)
    IF              reduce using rule 66 (elemento -> llamarfun .)
    PRINT           reduce using rule 66 (elemento -> llamarfun .)
    READ            reduce using rule 66 (elemento -> llamarfun .)
    WHILE           reduce using rule 66 (elemento -> llamarfun .)
    FOR             reduce using rule 66 (elemento -> llamarfun .)
    VAR             reduce using rule 66 (elemento -> llamarfun .)
    IDENTIFIER      reduce using rule 66 (elemento -> llamarfun .)
    ENDBLOQUE       reduce using rule 66 (elemento -> llamarfun .)
    ELSE            reduce using rule 66 (elemento -> llamarfun .)
    ENDIF           reduce using rule 66 (elemento -> llamarfun .)
    ELSEIF          reduce using rule 66 (elemento -> llamarfun .)
    ENDFOR          reduce using rule 66 (elemento -> llamarfun .)
    ENDWHILE        reduce using rule 66 (elemento -> llamarfun .)
    RPARENTHESES    reduce using rule 66 (elemento -> llamarfun .)


state 69

    (62) elemento -> int .

    MULTI           reduce using rule 62 (elemento -> int .)
    DIVIDE          reduce using rule 62 (elemento -> int .)
    LTHAN           reduce using rule 62 (elemento -> int .)
    GTHAN           reduce using rule 62 (elemento -> int .)
    EQUALTO         reduce using rule 62 (elemento -> int .)
    GTHANEQ         reduce using rule 62 (elemento -> int .)
    LTHANEQ         reduce using rule 62 (elemento -> int .)
    NOTEQUAL        reduce using rule 62 (elemento -> int .)
    PLUS            reduce using rule 62 (elemento -> int .)
    MINUS           reduce using rule 62 (elemento -> int .)
    COMMA           reduce using rule 62 (elemento -> int .)
    AND             reduce using rule 62 (elemento -> int .)
    OR              reduce using rule 62 (elemento -> int .)
    IF              reduce using rule 62 (elemento -> int .)
    PRINT           reduce using rule 62 (elemento -> int .)
    READ            reduce using rule 62 (elemento -> int .)
    WHILE           reduce using rule 62 (elemento -> int .)
    FOR             reduce using rule 62 (elemento -> int .)
    VAR             reduce using rule 62 (elemento -> int .)
    IDENTIFIER      reduce using rule 62 (elemento -> int .)
    ENDBLOQUE       reduce using rule 62 (elemento -> int .)
    ELSE            reduce using rule 62 (elemento -> int .)
    ENDIF           reduce using rule 62 (elemento -> int .)
    ELSEIF          reduce using rule 62 (elemento -> int .)
    ENDFOR          reduce using rule 62 (elemento -> int .)
    ENDWHILE        reduce using rule 62 (elemento -> int .)
    RPARENTHESES    reduce using rule 62 (elemento -> int .)


state 70

    (61) elemento -> identifier .

    MULTI           reduce using rule 61 (elemento -> identifier .)
    DIVIDE          reduce using rule 61 (elemento -> identifier .)
    LTHAN           reduce using rule 61 (elemento -> identifier .)
    GTHAN           reduce using rule 61 (elemento -> identifier .)
    EQUALTO         reduce using rule 61 (elemento -> identifier .)
    GTHANEQ         reduce using rule 61 (elemento -> identifier .)
    LTHANEQ         reduce using rule 61 (elemento -> identifier .)
    NOTEQUAL        reduce using rule 61 (elemento -> identifier .)
    PLUS            reduce using rule 61 (elemento -> identifier .)
    MINUS           reduce using rule 61 (elemento -> identifier .)
    COMMA           reduce using rule 61 (elemento -> identifier .)
    AND             reduce using rule 61 (elemento -> identifier .)
    OR              reduce using rule 61 (elemento -> identifier .)
    IF              reduce using rule 61 (elemento -> identifier .)
    PRINT           reduce using rule 61 (elemento -> identifier .)
    READ            reduce using rule 61 (elemento -> identifier .)
    WHILE           reduce using rule 61 (elemento -> identifier .)
    FOR             reduce using rule 61 (elemento -> identifier .)
    VAR             reduce using rule 61 (elemento -> identifier .)
    IDENTIFIER      reduce using rule 61 (elemento -> identifier .)
    ENDBLOQUE       reduce using rule 61 (elemento -> identifier .)
    ELSE            reduce using rule 61 (elemento -> identifier .)
    ENDIF           reduce using rule 61 (elemento -> identifier .)
    ELSEIF          reduce using rule 61 (elemento -> identifier .)
    ENDFOR          reduce using rule 61 (elemento -> identifier .)
    ENDWHILE        reduce using rule 61 (elemento -> identifier .)
    RPARENTHESES    reduce using rule 61 (elemento -> identifier .)


state 71

    (47) factor -> elemento .

    MULTI           reduce using rule 47 (factor -> elemento .)
    DIVIDE          reduce using rule 47 (factor -> elemento .)
    LTHAN           reduce using rule 47 (factor -> elemento .)
    GTHAN           reduce using rule 47 (factor -> elemento .)
    EQUALTO         reduce using rule 47 (factor -> elemento .)
    GTHANEQ         reduce using rule 47 (factor -> elemento .)
    LTHANEQ         reduce using rule 47 (factor -> elemento .)
    NOTEQUAL        reduce using rule 47 (factor -> elemento .)
    PLUS            reduce using rule 47 (factor -> elemento .)
    MINUS           reduce using rule 47 (factor -> elemento .)
    AND             reduce using rule 47 (factor -> elemento .)
    OR              reduce using rule 47 (factor -> elemento .)
    IF              reduce using rule 47 (factor -> elemento .)
    PRINT           reduce using rule 47 (factor -> elemento .)
    READ            reduce using rule 47 (factor -> elemento .)
    WHILE           reduce using rule 47 (factor -> elemento .)
    FOR             reduce using rule 47 (factor -> elemento .)
    VAR             reduce using rule 47 (factor -> elemento .)
    IDENTIFIER      reduce using rule 47 (factor -> elemento .)
    ENDIF           reduce using rule 47 (factor -> elemento .)
    ELSE            reduce using rule 47 (factor -> elemento .)
    COMMA           reduce using rule 47 (factor -> elemento .)
    ENDBLOQUE       reduce using rule 47 (factor -> elemento .)
    ELSEIF          reduce using rule 47 (factor -> elemento .)
    ENDFOR          reduce using rule 47 (factor -> elemento .)
    ENDWHILE        reduce using rule 47 (factor -> elemento .)
    RPARENTHESES    reduce using rule 47 (factor -> elemento .)


state 72

    (20) bloque -> BLOQUE estatuto_list ENDBLOQUE .

    RETURN          reduce using rule 20 (bloque -> BLOQUE estatuto_list ENDBLOQUE .)
    ENDMETHOD       reduce using rule 20 (bloque -> BLOQUE estatuto_list ENDBLOQUE .)
    ENDPROGRAM      reduce using rule 20 (bloque -> BLOQUE estatuto_list ENDBLOQUE .)
    METHOD          reduce using rule 20 (bloque -> BLOQUE estatuto_list ENDBLOQUE .)


state 73

    (33) escritura_vars -> expresion . COMMA escritura_vars
    (34) escritura_vars -> expresion .
    (44) expresion -> expresion . and_or termino
    (59) and_or -> . AND
    (60) and_or -> . OR

    COMMA           shift and go to state 104
    IF              reduce using rule 34 (escritura_vars -> expresion .)
    PRINT           reduce using rule 34 (escritura_vars -> expresion .)
    READ            reduce using rule 34 (escritura_vars -> expresion .)
    WHILE           reduce using rule 34 (escritura_vars -> expresion .)
    FOR             reduce using rule 34 (escritura_vars -> expresion .)
    VAR             reduce using rule 34 (escritura_vars -> expresion .)
    IDENTIFIER      reduce using rule 34 (escritura_vars -> expresion .)
    ENDBLOQUE       reduce using rule 34 (escritura_vars -> expresion .)
    ELSE            reduce using rule 34 (escritura_vars -> expresion .)
    ENDIF           reduce using rule 34 (escritura_vars -> expresion .)
    ELSEIF          reduce using rule 34 (escritura_vars -> expresion .)
    ENDFOR          reduce using rule 34 (escritura_vars -> expresion .)
    ENDWHILE        reduce using rule 34 (escritura_vars -> expresion .)
    AND             shift and go to state 87
    OR              shift and go to state 88

    and_or                         shift and go to state 89

state 74

    (32) escritura -> PRINT escritura_vars .

    IF              reduce using rule 32 (escritura -> PRINT escritura_vars .)
    PRINT           reduce using rule 32 (escritura -> PRINT escritura_vars .)
    READ            reduce using rule 32 (escritura -> PRINT escritura_vars .)
    WHILE           reduce using rule 32 (escritura -> PRINT escritura_vars .)
    FOR             reduce using rule 32 (escritura -> PRINT escritura_vars .)
    VAR             reduce using rule 32 (escritura -> PRINT escritura_vars .)
    IDENTIFIER      reduce using rule 32 (escritura -> PRINT escritura_vars .)
    ENDFOR          reduce using rule 32 (escritura -> PRINT escritura_vars .)
    ENDWHILE        reduce using rule 32 (escritura -> PRINT escritura_vars .)
    ENDIF           reduce using rule 32 (escritura -> PRINT escritura_vars .)
    ENDBLOQUE       reduce using rule 32 (escritura -> PRINT escritura_vars .)
    ELSE            reduce using rule 32 (escritura -> PRINT escritura_vars .)
    ELSEIF          reduce using rule 32 (escritura -> PRINT escritura_vars .)


state 75

    (42) for -> FOR int . estatuto_list ENDFOR
    (21) estatuto_list -> . estatuto estatuto_list
    (22) estatuto_list -> . estatuto
    (23) estatuto_list -> . empty
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . lectura
    (28) estatuto -> . while
    (29) estatuto -> . for
    (30) estatuto -> . vars
    (81) empty -> .
    (31) asignacion -> . identifier EQUAL expresion
    (36) condicion -> . IF expresion estatuto_list elseif ENDIF
    (37) condicion -> . IF expresion estatuto_list elseif ELSE estatuto_list ENDIF
    (38) condicion -> . IF expresion estatuto_list ELSE estatuto_list ENDIF
    (39) condicion -> . IF expresion estatuto_list ENDIF
    (32) escritura -> . PRINT escritura_vars
    (35) lectura -> . READ identifier
    (41) while -> . WHILE expresion estatuto_list ENDWHILE
    (42) for -> . FOR int estatuto_list ENDFOR
    (8) vars -> . VAR vars_list ENDVAR
    (82) identifier -> . IDENTIFIER

    ENDFOR          reduce using rule 81 (empty -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 34
    READ            shift and go to state 48
    WHILE           shift and go to state 40
    FOR             shift and go to state 36
    VAR             shift and go to state 46
    IDENTIFIER      shift and go to state 47

    identifier                     shift and go to state 45
    estatuto_list                  shift and go to state 105
    vars                           shift and go to state 33
    for                            shift and go to state 41
    while                          shift and go to state 44
    empty                          shift and go to state 37
    condicion                      shift and go to state 39
    lectura                        shift and go to state 43
    escritura                      shift and go to state 42
    estatuto                       shift and go to state 38
    asignacion                     shift and go to state 35

state 76

    (21) estatuto_list -> estatuto estatuto_list .

    ENDIF           reduce using rule 21 (estatuto_list -> estatuto estatuto_list .)
    ELSE            reduce using rule 21 (estatuto_list -> estatuto estatuto_list .)
    ENDWHILE        reduce using rule 21 (estatuto_list -> estatuto estatuto_list .)
    ENDBLOQUE       reduce using rule 21 (estatuto_list -> estatuto estatuto_list .)
    ENDFOR          reduce using rule 21 (estatuto_list -> estatuto estatuto_list .)
    ELSEIF          reduce using rule 21 (estatuto_list -> estatuto estatuto_list .)


state 77

    (41) while -> WHILE expresion . estatuto_list ENDWHILE
    (44) expresion -> expresion . and_or termino
    (21) estatuto_list -> . estatuto estatuto_list
    (22) estatuto_list -> . estatuto
    (23) estatuto_list -> . empty
    (59) and_or -> . AND
    (60) and_or -> . OR
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . lectura
    (28) estatuto -> . while
    (29) estatuto -> . for
    (30) estatuto -> . vars
    (81) empty -> .
    (31) asignacion -> . identifier EQUAL expresion
    (36) condicion -> . IF expresion estatuto_list elseif ENDIF
    (37) condicion -> . IF expresion estatuto_list elseif ELSE estatuto_list ENDIF
    (38) condicion -> . IF expresion estatuto_list ELSE estatuto_list ENDIF
    (39) condicion -> . IF expresion estatuto_list ENDIF
    (32) escritura -> . PRINT escritura_vars
    (35) lectura -> . READ identifier
    (41) while -> . WHILE expresion estatuto_list ENDWHILE
    (42) for -> . FOR int estatuto_list ENDFOR
    (8) vars -> . VAR vars_list ENDVAR
    (82) identifier -> . IDENTIFIER

    AND             shift and go to state 87
    OR              shift and go to state 88
    ENDWHILE        reduce using rule 81 (empty -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 34
    READ            shift and go to state 48
    WHILE           shift and go to state 40
    FOR             shift and go to state 36
    VAR             shift and go to state 46
    IDENTIFIER      shift and go to state 47

    identifier                     shift and go to state 45
    estatuto_list                  shift and go to state 106
    vars                           shift and go to state 33
    for                            shift and go to state 41
    while                          shift and go to state 44
    empty                          shift and go to state 37
    condicion                      shift and go to state 39
    lectura                        shift and go to state 43
    escritura                      shift and go to state 42
    and_or                         shift and go to state 89
    estatuto                       shift and go to state 38
    asignacion                     shift and go to state 35

state 78

    (31) asignacion -> identifier EQUAL . expresion
    (43) expresion -> . termino
    (44) expresion -> . expresion and_or termino
    (45) termino -> . factor
    (46) termino -> . termino sign factor
    (47) factor -> . elemento
    (48) factor -> . factor psign elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

    expresion                      shift and go to state 107
    termino                        shift and go to state 62
    elemento                       shift and go to state 71
    factor                         shift and go to state 67
    llamarfun                      shift and go to state 68
    int                            shift and go to state 69
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    string                         shift and go to state 65

state 79

    (8) vars -> VAR vars_list . ENDVAR

    ENDVAR          shift and go to state 108


state 80

    (35) lectura -> READ identifier .

    IF              reduce using rule 35 (lectura -> READ identifier .)
    PRINT           reduce using rule 35 (lectura -> READ identifier .)
    READ            reduce using rule 35 (lectura -> READ identifier .)
    WHILE           reduce using rule 35 (lectura -> READ identifier .)
    FOR             reduce using rule 35 (lectura -> READ identifier .)
    VAR             reduce using rule 35 (lectura -> READ identifier .)
    IDENTIFIER      reduce using rule 35 (lectura -> READ identifier .)
    ENDIF           reduce using rule 35 (lectura -> READ identifier .)
    ENDBLOQUE       reduce using rule 35 (lectura -> READ identifier .)
    ELSE            reduce using rule 35 (lectura -> READ identifier .)
    ELSEIF          reduce using rule 35 (lectura -> READ identifier .)
    ENDFOR          reduce using rule 35 (lectura -> READ identifier .)
    ENDWHILE        reduce using rule 35 (lectura -> READ identifier .)


state 81

    (71) funchead -> METHOD tipo identifier . parameter_list
    (72) funchead -> METHOD tipo identifier .
    (73) parameter_list -> . parameter
    (74) parameter_list -> . parameter COMMA parameter_list
    (75) parameter -> . tipo identifier
    (76) parameter -> . tipo referencia
    (14) tipo -> . int
    (15) tipo -> . float
    (16) tipo -> . string
    (17) tipo -> . bool
    (18) tipo -> . hash
    (19) tipo -> . VOID
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (86) bool -> . BOOL
    (88) hash -> . HASH

    BLOQUE          reduce using rule 72 (funchead -> METHOD tipo identifier .)
    VOID            shift and go to state 20
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    BOOL            shift and go to state 16
    HASH            shift and go to state 26

    hash                           shift and go to state 23
    bool                           shift and go to state 17
    tipo                           shift and go to state 109
    string                         shift and go to state 30
    parameter_list                 shift and go to state 110
    parameter                      shift and go to state 111
    float                          shift and go to state 28
    int                            shift and go to state 27

state 82

    (69) prochead -> METHOD VOID identifier . parameter_list
    (70) prochead -> METHOD VOID identifier .
    (73) parameter_list -> . parameter
    (74) parameter_list -> . parameter COMMA parameter_list
    (75) parameter -> . tipo identifier
    (76) parameter -> . tipo referencia
    (14) tipo -> . int
    (15) tipo -> . float
    (16) tipo -> . string
    (17) tipo -> . bool
    (18) tipo -> . hash
    (19) tipo -> . VOID
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (86) bool -> . BOOL
    (88) hash -> . HASH

    BLOQUE          reduce using rule 70 (prochead -> METHOD VOID identifier .)
    VOID            shift and go to state 20
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    BOOL            shift and go to state 16
    HASH            shift and go to state 26

    hash                           shift and go to state 23
    bool                           shift and go to state 17
    tipo                           shift and go to state 109
    string                         shift and go to state 30
    parameter_list                 shift and go to state 112
    parameter                      shift and go to state 111
    float                          shift and go to state 28
    int                            shift and go to state 27

state 83

    (68) voidfunc -> prochead bloque ENDMETHOD .

    METHOD          reduce using rule 68 (voidfunc -> prochead bloque ENDMETHOD .)
    ENDPROGRAM      reduce using rule 68 (voidfunc -> prochead bloque ENDMETHOD .)


state 84

    (67) func -> funchead bloque RETURN . identifier ENDMETHOD
    (82) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 47

    identifier                     shift and go to state 113

state 85

    (3) programa -> PROGRAM global bloque funciones ENDPROGRAM .

    $end            reduce using rule 3 (programa -> PROGRAM global bloque funciones ENDPROGRAM .)


state 86

    (36) condicion -> IF expresion estatuto_list . elseif ENDIF
    (37) condicion -> IF expresion estatuto_list . elseif ELSE estatuto_list ENDIF
    (38) condicion -> IF expresion estatuto_list . ELSE estatuto_list ENDIF
    (39) condicion -> IF expresion estatuto_list . ENDIF
    (40) elseif -> . ELSEIF expresion estatuto_list

    ELSE            shift and go to state 117
    ENDIF           shift and go to state 116
    ELSEIF          shift and go to state 115

    elseif                         shift and go to state 114

state 87

    (59) and_or -> AND .

    LPARENTHESES    reduce using rule 59 (and_or -> AND .)
    IDENTIFIER      reduce using rule 59 (and_or -> AND .)
    INT             reduce using rule 59 (and_or -> AND .)
    FLOAT           reduce using rule 59 (and_or -> AND .)
    STRING          reduce using rule 59 (and_or -> AND .)
    CALLMETHOD      reduce using rule 59 (and_or -> AND .)


state 88

    (60) and_or -> OR .

    LPARENTHESES    reduce using rule 60 (and_or -> OR .)
    IDENTIFIER      reduce using rule 60 (and_or -> OR .)
    INT             reduce using rule 60 (and_or -> OR .)
    FLOAT           reduce using rule 60 (and_or -> OR .)
    STRING          reduce using rule 60 (and_or -> OR .)
    CALLMETHOD      reduce using rule 60 (and_or -> OR .)


state 89

    (44) expresion -> expresion and_or . termino
    (45) termino -> . factor
    (46) termino -> . termino sign factor
    (47) factor -> . elemento
    (48) factor -> . factor psign elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

    termino                        shift and go to state 118
    elemento                       shift and go to state 71
    factor                         shift and go to state 67
    llamarfun                      shift and go to state 68
    int                            shift and go to state 69
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    string                         shift and go to state 65

state 90

    (53) sign -> LTHANEQ .

    LPARENTHESES    reduce using rule 53 (sign -> LTHANEQ .)
    IDENTIFIER      reduce using rule 53 (sign -> LTHANEQ .)
    INT             reduce using rule 53 (sign -> LTHANEQ .)
    FLOAT           reduce using rule 53 (sign -> LTHANEQ .)
    STRING          reduce using rule 53 (sign -> LTHANEQ .)
    CALLMETHOD      reduce using rule 53 (sign -> LTHANEQ .)


state 91

    (50) sign -> GTHAN .

    LPARENTHESES    reduce using rule 50 (sign -> GTHAN .)
    IDENTIFIER      reduce using rule 50 (sign -> GTHAN .)
    INT             reduce using rule 50 (sign -> GTHAN .)
    FLOAT           reduce using rule 50 (sign -> GTHAN .)
    STRING          reduce using rule 50 (sign -> GTHAN .)
    CALLMETHOD      reduce using rule 50 (sign -> GTHAN .)


state 92

    (54) sign -> NOTEQUAL .

    LPARENTHESES    reduce using rule 54 (sign -> NOTEQUAL .)
    IDENTIFIER      reduce using rule 54 (sign -> NOTEQUAL .)
    INT             reduce using rule 54 (sign -> NOTEQUAL .)
    FLOAT           reduce using rule 54 (sign -> NOTEQUAL .)
    STRING          reduce using rule 54 (sign -> NOTEQUAL .)
    CALLMETHOD      reduce using rule 54 (sign -> NOTEQUAL .)


state 93

    (49) sign -> LTHAN .

    LPARENTHESES    reduce using rule 49 (sign -> LTHAN .)
    IDENTIFIER      reduce using rule 49 (sign -> LTHAN .)
    INT             reduce using rule 49 (sign -> LTHAN .)
    FLOAT           reduce using rule 49 (sign -> LTHAN .)
    STRING          reduce using rule 49 (sign -> LTHAN .)
    CALLMETHOD      reduce using rule 49 (sign -> LTHAN .)


state 94

    (51) sign -> EQUALTO .

    LPARENTHESES    reduce using rule 51 (sign -> EQUALTO .)
    IDENTIFIER      reduce using rule 51 (sign -> EQUALTO .)
    INT             reduce using rule 51 (sign -> EQUALTO .)
    FLOAT           reduce using rule 51 (sign -> EQUALTO .)
    STRING          reduce using rule 51 (sign -> EQUALTO .)
    CALLMETHOD      reduce using rule 51 (sign -> EQUALTO .)


state 95

    (55) sign -> PLUS .

    LPARENTHESES    reduce using rule 55 (sign -> PLUS .)
    IDENTIFIER      reduce using rule 55 (sign -> PLUS .)
    INT             reduce using rule 55 (sign -> PLUS .)
    FLOAT           reduce using rule 55 (sign -> PLUS .)
    STRING          reduce using rule 55 (sign -> PLUS .)
    CALLMETHOD      reduce using rule 55 (sign -> PLUS .)


state 96

    (52) sign -> GTHANEQ .

    LPARENTHESES    reduce using rule 52 (sign -> GTHANEQ .)
    IDENTIFIER      reduce using rule 52 (sign -> GTHANEQ .)
    INT             reduce using rule 52 (sign -> GTHANEQ .)
    FLOAT           reduce using rule 52 (sign -> GTHANEQ .)
    STRING          reduce using rule 52 (sign -> GTHANEQ .)
    CALLMETHOD      reduce using rule 52 (sign -> GTHANEQ .)


state 97

    (46) termino -> termino sign . factor
    (47) factor -> . elemento
    (48) factor -> . factor psign elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

    elemento                       shift and go to state 71
    factor                         shift and go to state 119
    llamarfun                      shift and go to state 68
    int                            shift and go to state 69
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    string                         shift and go to state 65

state 98

    (56) sign -> MINUS .

    LPARENTHESES    reduce using rule 56 (sign -> MINUS .)
    IDENTIFIER      reduce using rule 56 (sign -> MINUS .)
    INT             reduce using rule 56 (sign -> MINUS .)
    FLOAT           reduce using rule 56 (sign -> MINUS .)
    STRING          reduce using rule 56 (sign -> MINUS .)
    CALLMETHOD      reduce using rule 56 (sign -> MINUS .)


state 99

    (77) llamarfun -> CALLMETHOD identifier . funparams
    (78) llamarfun -> CALLMETHOD identifier .
    (79) funparams -> . expresion
    (80) funparams -> . expresion COMMA funparams
    (43) expresion -> . termino
    (44) expresion -> . expresion and_or termino
    (45) termino -> . factor
    (46) termino -> . termino sign factor
    (47) factor -> . elemento
    (48) factor -> . factor psign elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

  ! shift/reduce conflict for IDENTIFIER resolved as shift
    MULTI           reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    DIVIDE          reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    LTHAN           reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    GTHAN           reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    EQUALTO         reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    GTHANEQ         reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    LTHANEQ         reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    NOTEQUAL        reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    PLUS            reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    MINUS           reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    AND             reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    OR              reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    IF              reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    PRINT           reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    READ            reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    WHILE           reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    FOR             reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    VAR             reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    ELSE            reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    ENDIF           reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    ELSEIF          reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    COMMA           reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    ENDBLOQUE       reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    ENDFOR          reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    ENDWHILE        reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    RPARENTHESES    reduce using rule 78 (llamarfun -> CALLMETHOD identifier .)
    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

  ! IDENTIFIER      [ reduce using rule 78 (llamarfun -> CALLMETHOD identifier .) ]

    expresion                      shift and go to state 120
    termino                        shift and go to state 62
    factor                         shift and go to state 67
    llamarfun                      shift and go to state 68
    string                         shift and go to state 65
    funparams                      shift and go to state 121
    int                            shift and go to state 69
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    elemento                       shift and go to state 71

state 100

    (65) elemento -> LPARENTHESES expresion . RPARENTHESES
    (44) expresion -> expresion . and_or termino
    (59) and_or -> . AND
    (60) and_or -> . OR

    RPARENTHESES    shift and go to state 122
    AND             shift and go to state 87
    OR              shift and go to state 88

    and_or                         shift and go to state 89

state 101

    (57) psign -> MULTI .

    LPARENTHESES    reduce using rule 57 (psign -> MULTI .)
    IDENTIFIER      reduce using rule 57 (psign -> MULTI .)
    INT             reduce using rule 57 (psign -> MULTI .)
    FLOAT           reduce using rule 57 (psign -> MULTI .)
    STRING          reduce using rule 57 (psign -> MULTI .)
    CALLMETHOD      reduce using rule 57 (psign -> MULTI .)


state 102

    (48) factor -> factor psign . elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

    llamarfun                      shift and go to state 68
    string                         shift and go to state 65
    int                            shift and go to state 69
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    elemento                       shift and go to state 123

state 103

    (58) psign -> DIVIDE .

    LPARENTHESES    reduce using rule 58 (psign -> DIVIDE .)
    IDENTIFIER      reduce using rule 58 (psign -> DIVIDE .)
    INT             reduce using rule 58 (psign -> DIVIDE .)
    FLOAT           reduce using rule 58 (psign -> DIVIDE .)
    STRING          reduce using rule 58 (psign -> DIVIDE .)
    CALLMETHOD      reduce using rule 58 (psign -> DIVIDE .)


state 104

    (33) escritura_vars -> expresion COMMA . escritura_vars
    (33) escritura_vars -> . expresion COMMA escritura_vars
    (34) escritura_vars -> . expresion
    (43) expresion -> . termino
    (44) expresion -> . expresion and_or termino
    (45) termino -> . factor
    (46) termino -> . termino sign factor
    (47) factor -> . elemento
    (48) factor -> . factor psign elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

    expresion                      shift and go to state 73
    termino                        shift and go to state 62
    factor                         shift and go to state 67
    llamarfun                      shift and go to state 68
    string                         shift and go to state 65
    int                            shift and go to state 69
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    escritura_vars                 shift and go to state 124
    elemento                       shift and go to state 71

state 105

    (42) for -> FOR int estatuto_list . ENDFOR

    ENDFOR          shift and go to state 125


state 106

    (41) while -> WHILE expresion estatuto_list . ENDWHILE

    ENDWHILE        shift and go to state 126


state 107

    (31) asignacion -> identifier EQUAL expresion .
    (44) expresion -> expresion . and_or termino
    (59) and_or -> . AND
    (60) and_or -> . OR

    IF              reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    PRINT           reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    READ            reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    WHILE           reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    FOR             reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    VAR             reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    IDENTIFIER      reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    ENDBLOQUE       reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    ENDWHILE        reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    ENDIF           reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    ELSE            reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    ELSEIF          reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    ENDFOR          reduce using rule 31 (asignacion -> identifier EQUAL expresion .)
    AND             shift and go to state 87
    OR              shift and go to state 88

    and_or                         shift and go to state 89

state 108

    (8) vars -> VAR vars_list ENDVAR .

    IF              reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    PRINT           reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    READ            reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    WHILE           reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    FOR             reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    VAR             reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    IDENTIFIER      reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    ENDIF           reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    ENDWHILE        reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    ELSE            reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    ELSEIF          reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    ENDBLOQUE       reduce using rule 8 (vars -> VAR vars_list ENDVAR .)
    ENDFOR          reduce using rule 8 (vars -> VAR vars_list ENDVAR .)


state 109

    (75) parameter -> tipo . identifier
    (76) parameter -> tipo . referencia
    (82) identifier -> . IDENTIFIER
    (83) referencia -> . REFERENCIA

    IDENTIFIER      shift and go to state 47
    REFERENCIA      shift and go to state 128

    identifier                     shift and go to state 127
    referencia                     shift and go to state 129

state 110

    (71) funchead -> METHOD tipo identifier parameter_list .

    BLOQUE          reduce using rule 71 (funchead -> METHOD tipo identifier parameter_list .)


state 111

    (73) parameter_list -> parameter .
    (74) parameter_list -> parameter . COMMA parameter_list

    BLOQUE          reduce using rule 73 (parameter_list -> parameter .)
    COMMA           shift and go to state 130


state 112

    (69) prochead -> METHOD VOID identifier parameter_list .

    BLOQUE          reduce using rule 69 (prochead -> METHOD VOID identifier parameter_list .)


state 113

    (67) func -> funchead bloque RETURN identifier . ENDMETHOD

    ENDMETHOD       shift and go to state 131


state 114

    (36) condicion -> IF expresion estatuto_list elseif . ENDIF
    (37) condicion -> IF expresion estatuto_list elseif . ELSE estatuto_list ENDIF

    ENDIF           shift and go to state 132
    ELSE            shift and go to state 133


state 115

    (40) elseif -> ELSEIF . expresion estatuto_list
    (43) expresion -> . termino
    (44) expresion -> . expresion and_or termino
    (45) termino -> . factor
    (46) termino -> . termino sign factor
    (47) factor -> . elemento
    (48) factor -> . factor psign elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

    int                            shift and go to state 69
    expresion                      shift and go to state 134
    termino                        shift and go to state 62
    factor                         shift and go to state 67
    llamarfun                      shift and go to state 68
    string                         shift and go to state 65
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    elemento                       shift and go to state 71

state 116

    (39) condicion -> IF expresion estatuto_list ENDIF .

    IF              reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    PRINT           reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    READ            reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    WHILE           reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    FOR             reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    VAR             reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    IDENTIFIER      reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    ELSE            reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    ENDIF           reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    ELSEIF          reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    ENDBLOQUE       reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    ENDFOR          reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)
    ENDWHILE        reduce using rule 39 (condicion -> IF expresion estatuto_list ENDIF .)


state 117

    (38) condicion -> IF expresion estatuto_list ELSE . estatuto_list ENDIF
    (21) estatuto_list -> . estatuto estatuto_list
    (22) estatuto_list -> . estatuto
    (23) estatuto_list -> . empty
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . lectura
    (28) estatuto -> . while
    (29) estatuto -> . for
    (30) estatuto -> . vars
    (81) empty -> .
    (31) asignacion -> . identifier EQUAL expresion
    (36) condicion -> . IF expresion estatuto_list elseif ENDIF
    (37) condicion -> . IF expresion estatuto_list elseif ELSE estatuto_list ENDIF
    (38) condicion -> . IF expresion estatuto_list ELSE estatuto_list ENDIF
    (39) condicion -> . IF expresion estatuto_list ENDIF
    (32) escritura -> . PRINT escritura_vars
    (35) lectura -> . READ identifier
    (41) while -> . WHILE expresion estatuto_list ENDWHILE
    (42) for -> . FOR int estatuto_list ENDFOR
    (8) vars -> . VAR vars_list ENDVAR
    (82) identifier -> . IDENTIFIER

    ENDIF           reduce using rule 81 (empty -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 34
    READ            shift and go to state 48
    WHILE           shift and go to state 40
    FOR             shift and go to state 36
    VAR             shift and go to state 46
    IDENTIFIER      shift and go to state 47

    identifier                     shift and go to state 45
    estatuto_list                  shift and go to state 135
    vars                           shift and go to state 33
    for                            shift and go to state 41
    estatuto                       shift and go to state 38
    empty                          shift and go to state 37
    condicion                      shift and go to state 39
    lectura                        shift and go to state 43
    escritura                      shift and go to state 42
    while                          shift and go to state 44
    asignacion                     shift and go to state 35

state 118

    (44) expresion -> expresion and_or termino .
    (46) termino -> termino . sign factor
    (49) sign -> . LTHAN
    (50) sign -> . GTHAN
    (51) sign -> . EQUALTO
    (52) sign -> . GTHANEQ
    (53) sign -> . LTHANEQ
    (54) sign -> . NOTEQUAL
    (55) sign -> . PLUS
    (56) sign -> . MINUS

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RPARENTHESES    reduce using rule 44 (expresion -> expresion and_or termino .)
    AND             reduce using rule 44 (expresion -> expresion and_or termino .)
    OR              reduce using rule 44 (expresion -> expresion and_or termino .)
    MULTI           reduce using rule 44 (expresion -> expresion and_or termino .)
    DIVIDE          reduce using rule 44 (expresion -> expresion and_or termino .)
    IF              reduce using rule 44 (expresion -> expresion and_or termino .)
    PRINT           reduce using rule 44 (expresion -> expresion and_or termino .)
    READ            reduce using rule 44 (expresion -> expresion and_or termino .)
    WHILE           reduce using rule 44 (expresion -> expresion and_or termino .)
    FOR             reduce using rule 44 (expresion -> expresion and_or termino .)
    VAR             reduce using rule 44 (expresion -> expresion and_or termino .)
    IDENTIFIER      reduce using rule 44 (expresion -> expresion and_or termino .)
    ELSE            reduce using rule 44 (expresion -> expresion and_or termino .)
    ENDIF           reduce using rule 44 (expresion -> expresion and_or termino .)
    ELSEIF          reduce using rule 44 (expresion -> expresion and_or termino .)
    COMMA           reduce using rule 44 (expresion -> expresion and_or termino .)
    ENDBLOQUE       reduce using rule 44 (expresion -> expresion and_or termino .)
    ENDFOR          reduce using rule 44 (expresion -> expresion and_or termino .)
    ENDWHILE        reduce using rule 44 (expresion -> expresion and_or termino .)
    LTHAN           shift and go to state 93
    GTHAN           shift and go to state 91
    EQUALTO         shift and go to state 94
    GTHANEQ         shift and go to state 96
    LTHANEQ         shift and go to state 90
    NOTEQUAL        shift and go to state 92
    PLUS            shift and go to state 95
    MINUS           shift and go to state 98

  ! LTHAN           [ reduce using rule 44 (expresion -> expresion and_or termino .) ]
  ! GTHAN           [ reduce using rule 44 (expresion -> expresion and_or termino .) ]
  ! EQUALTO         [ reduce using rule 44 (expresion -> expresion and_or termino .) ]
  ! GTHANEQ         [ reduce using rule 44 (expresion -> expresion and_or termino .) ]
  ! LTHANEQ         [ reduce using rule 44 (expresion -> expresion and_or termino .) ]
  ! NOTEQUAL        [ reduce using rule 44 (expresion -> expresion and_or termino .) ]
  ! PLUS            [ reduce using rule 44 (expresion -> expresion and_or termino .) ]
  ! MINUS           [ reduce using rule 44 (expresion -> expresion and_or termino .) ]

    sign                           shift and go to state 97

state 119

    (46) termino -> termino sign factor .
    (48) factor -> factor . psign elemento
    (57) psign -> . MULTI
    (58) psign -> . DIVIDE

  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    LTHAN           reduce using rule 46 (termino -> termino sign factor .)
    GTHAN           reduce using rule 46 (termino -> termino sign factor .)
    EQUALTO         reduce using rule 46 (termino -> termino sign factor .)
    GTHANEQ         reduce using rule 46 (termino -> termino sign factor .)
    LTHANEQ         reduce using rule 46 (termino -> termino sign factor .)
    NOTEQUAL        reduce using rule 46 (termino -> termino sign factor .)
    PLUS            reduce using rule 46 (termino -> termino sign factor .)
    MINUS           reduce using rule 46 (termino -> termino sign factor .)
    RPARENTHESES    reduce using rule 46 (termino -> termino sign factor .)
    AND             reduce using rule 46 (termino -> termino sign factor .)
    OR              reduce using rule 46 (termino -> termino sign factor .)
    IF              reduce using rule 46 (termino -> termino sign factor .)
    PRINT           reduce using rule 46 (termino -> termino sign factor .)
    READ            reduce using rule 46 (termino -> termino sign factor .)
    WHILE           reduce using rule 46 (termino -> termino sign factor .)
    FOR             reduce using rule 46 (termino -> termino sign factor .)
    VAR             reduce using rule 46 (termino -> termino sign factor .)
    IDENTIFIER      reduce using rule 46 (termino -> termino sign factor .)
    ENDWHILE        reduce using rule 46 (termino -> termino sign factor .)
    ELSE            reduce using rule 46 (termino -> termino sign factor .)
    ENDIF           reduce using rule 46 (termino -> termino sign factor .)
    ELSEIF          reduce using rule 46 (termino -> termino sign factor .)
    ENDBLOQUE       reduce using rule 46 (termino -> termino sign factor .)
    ENDFOR          reduce using rule 46 (termino -> termino sign factor .)
    COMMA           reduce using rule 46 (termino -> termino sign factor .)
    MULTI           shift and go to state 101
    DIVIDE          shift and go to state 103

  ! MULTI           [ reduce using rule 46 (termino -> termino sign factor .) ]
  ! DIVIDE          [ reduce using rule 46 (termino -> termino sign factor .) ]

    psign                          shift and go to state 102

state 120

    (79) funparams -> expresion .
    (80) funparams -> expresion . COMMA funparams
    (44) expresion -> expresion . and_or termino
    (59) and_or -> . AND
    (60) and_or -> . OR

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    MULTI           reduce using rule 79 (funparams -> expresion .)
    DIVIDE          reduce using rule 79 (funparams -> expresion .)
    LTHAN           reduce using rule 79 (funparams -> expresion .)
    GTHAN           reduce using rule 79 (funparams -> expresion .)
    EQUALTO         reduce using rule 79 (funparams -> expresion .)
    GTHANEQ         reduce using rule 79 (funparams -> expresion .)
    LTHANEQ         reduce using rule 79 (funparams -> expresion .)
    NOTEQUAL        reduce using rule 79 (funparams -> expresion .)
    PLUS            reduce using rule 79 (funparams -> expresion .)
    MINUS           reduce using rule 79 (funparams -> expresion .)
    IF              reduce using rule 79 (funparams -> expresion .)
    PRINT           reduce using rule 79 (funparams -> expresion .)
    READ            reduce using rule 79 (funparams -> expresion .)
    WHILE           reduce using rule 79 (funparams -> expresion .)
    FOR             reduce using rule 79 (funparams -> expresion .)
    VAR             reduce using rule 79 (funparams -> expresion .)
    IDENTIFIER      reduce using rule 79 (funparams -> expresion .)
    ELSE            reduce using rule 79 (funparams -> expresion .)
    ENDIF           reduce using rule 79 (funparams -> expresion .)
    ELSEIF          reduce using rule 79 (funparams -> expresion .)
    ENDBLOQUE       reduce using rule 79 (funparams -> expresion .)
    ENDFOR          reduce using rule 79 (funparams -> expresion .)
    ENDWHILE        reduce using rule 79 (funparams -> expresion .)
    RPARENTHESES    reduce using rule 79 (funparams -> expresion .)
    COMMA           shift and go to state 136
    AND             shift and go to state 87
    OR              shift and go to state 88

  ! AND             [ reduce using rule 79 (funparams -> expresion .) ]
  ! OR              [ reduce using rule 79 (funparams -> expresion .) ]
  ! COMMA           [ reduce using rule 79 (funparams -> expresion .) ]

    and_or                         shift and go to state 89

state 121

    (77) llamarfun -> CALLMETHOD identifier funparams .

    MULTI           reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    DIVIDE          reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    LTHAN           reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    GTHAN           reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    EQUALTO         reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    GTHANEQ         reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    LTHANEQ         reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    NOTEQUAL        reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    PLUS            reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    MINUS           reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    AND             reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    OR              reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    IF              reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    PRINT           reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    READ            reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    WHILE           reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    FOR             reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    VAR             reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    IDENTIFIER      reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    ELSE            reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    ENDIF           reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    ELSEIF          reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    COMMA           reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    ENDBLOQUE       reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    ENDFOR          reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    ENDWHILE        reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)
    RPARENTHESES    reduce using rule 77 (llamarfun -> CALLMETHOD identifier funparams .)


state 122

    (65) elemento -> LPARENTHESES expresion RPARENTHESES .

    MULTI           reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    DIVIDE          reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    LTHAN           reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    GTHAN           reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    EQUALTO         reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    GTHANEQ         reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    LTHANEQ         reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    NOTEQUAL        reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    PLUS            reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    MINUS           reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    COMMA           reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    AND             reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    OR              reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    IF              reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    PRINT           reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    READ            reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    WHILE           reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    FOR             reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    VAR             reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    IDENTIFIER      reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    ENDBLOQUE       reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    ELSE            reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    ENDIF           reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    ELSEIF          reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    ENDFOR          reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    ENDWHILE        reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)
    RPARENTHESES    reduce using rule 65 (elemento -> LPARENTHESES expresion RPARENTHESES .)


state 123

    (48) factor -> factor psign elemento .

    MULTI           reduce using rule 48 (factor -> factor psign elemento .)
    DIVIDE          reduce using rule 48 (factor -> factor psign elemento .)
    LTHAN           reduce using rule 48 (factor -> factor psign elemento .)
    GTHAN           reduce using rule 48 (factor -> factor psign elemento .)
    EQUALTO         reduce using rule 48 (factor -> factor psign elemento .)
    GTHANEQ         reduce using rule 48 (factor -> factor psign elemento .)
    LTHANEQ         reduce using rule 48 (factor -> factor psign elemento .)
    NOTEQUAL        reduce using rule 48 (factor -> factor psign elemento .)
    PLUS            reduce using rule 48 (factor -> factor psign elemento .)
    MINUS           reduce using rule 48 (factor -> factor psign elemento .)
    AND             reduce using rule 48 (factor -> factor psign elemento .)
    OR              reduce using rule 48 (factor -> factor psign elemento .)
    IF              reduce using rule 48 (factor -> factor psign elemento .)
    PRINT           reduce using rule 48 (factor -> factor psign elemento .)
    READ            reduce using rule 48 (factor -> factor psign elemento .)
    WHILE           reduce using rule 48 (factor -> factor psign elemento .)
    FOR             reduce using rule 48 (factor -> factor psign elemento .)
    VAR             reduce using rule 48 (factor -> factor psign elemento .)
    IDENTIFIER      reduce using rule 48 (factor -> factor psign elemento .)
    ENDIF           reduce using rule 48 (factor -> factor psign elemento .)
    ELSE            reduce using rule 48 (factor -> factor psign elemento .)
    COMMA           reduce using rule 48 (factor -> factor psign elemento .)
    ENDBLOQUE       reduce using rule 48 (factor -> factor psign elemento .)
    ELSEIF          reduce using rule 48 (factor -> factor psign elemento .)
    ENDFOR          reduce using rule 48 (factor -> factor psign elemento .)
    ENDWHILE        reduce using rule 48 (factor -> factor psign elemento .)
    RPARENTHESES    reduce using rule 48 (factor -> factor psign elemento .)


state 124

    (33) escritura_vars -> expresion COMMA escritura_vars .

    IF              reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    PRINT           reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    READ            reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    WHILE           reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    FOR             reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    VAR             reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    IDENTIFIER      reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    ENDBLOQUE       reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    ELSE            reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    ENDIF           reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    ELSEIF          reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    ENDFOR          reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)
    ENDWHILE        reduce using rule 33 (escritura_vars -> expresion COMMA escritura_vars .)


state 125

    (42) for -> FOR int estatuto_list ENDFOR .

    IF              reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    PRINT           reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    READ            reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    WHILE           reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    FOR             reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    VAR             reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    IDENTIFIER      reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    ENDIF           reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    ENDWHILE        reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    ENDBLOQUE       reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    ELSE            reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    ENDFOR          reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)
    ELSEIF          reduce using rule 42 (for -> FOR int estatuto_list ENDFOR .)


state 126

    (41) while -> WHILE expresion estatuto_list ENDWHILE .

    IF              reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    PRINT           reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    READ            reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    WHILE           reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    FOR             reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    VAR             reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    IDENTIFIER      reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    ENDBLOQUE       reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    ELSE            reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    ENDIF           reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    ELSEIF          reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    ENDFOR          reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)
    ENDWHILE        reduce using rule 41 (while -> WHILE expresion estatuto_list ENDWHILE .)


state 127

    (75) parameter -> tipo identifier .

    COMMA           reduce using rule 75 (parameter -> tipo identifier .)
    BLOQUE          reduce using rule 75 (parameter -> tipo identifier .)


state 128

    (83) referencia -> REFERENCIA .

    COMMA           reduce using rule 83 (referencia -> REFERENCIA .)
    BLOQUE          reduce using rule 83 (referencia -> REFERENCIA .)


state 129

    (76) parameter -> tipo referencia .

    COMMA           reduce using rule 76 (parameter -> tipo referencia .)
    BLOQUE          reduce using rule 76 (parameter -> tipo referencia .)


state 130

    (74) parameter_list -> parameter COMMA . parameter_list
    (73) parameter_list -> . parameter
    (74) parameter_list -> . parameter COMMA parameter_list
    (75) parameter -> . tipo identifier
    (76) parameter -> . tipo referencia
    (14) tipo -> . int
    (15) tipo -> . float
    (16) tipo -> . string
    (17) tipo -> . bool
    (18) tipo -> . hash
    (19) tipo -> . VOID
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (86) bool -> . BOOL
    (88) hash -> . HASH

    VOID            shift and go to state 20
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    BOOL            shift and go to state 16
    HASH            shift and go to state 26

    hash                           shift and go to state 23
    bool                           shift and go to state 17
    tipo                           shift and go to state 109
    string                         shift and go to state 30
    parameter_list                 shift and go to state 137
    parameter                      shift and go to state 111
    float                          shift and go to state 28
    int                            shift and go to state 27

state 131

    (67) func -> funchead bloque RETURN identifier ENDMETHOD .

    METHOD          reduce using rule 67 (func -> funchead bloque RETURN identifier ENDMETHOD .)
    ENDPROGRAM      reduce using rule 67 (func -> funchead bloque RETURN identifier ENDMETHOD .)


state 132

    (36) condicion -> IF expresion estatuto_list elseif ENDIF .

    IF              reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    PRINT           reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    READ            reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    WHILE           reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    FOR             reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    VAR             reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    IDENTIFIER      reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    ELSE            reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    ENDIF           reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    ELSEIF          reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    ENDBLOQUE       reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    ENDFOR          reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)
    ENDWHILE        reduce using rule 36 (condicion -> IF expresion estatuto_list elseif ENDIF .)


state 133

    (37) condicion -> IF expresion estatuto_list elseif ELSE . estatuto_list ENDIF
    (21) estatuto_list -> . estatuto estatuto_list
    (22) estatuto_list -> . estatuto
    (23) estatuto_list -> . empty
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . lectura
    (28) estatuto -> . while
    (29) estatuto -> . for
    (30) estatuto -> . vars
    (81) empty -> .
    (31) asignacion -> . identifier EQUAL expresion
    (36) condicion -> . IF expresion estatuto_list elseif ENDIF
    (37) condicion -> . IF expresion estatuto_list elseif ELSE estatuto_list ENDIF
    (38) condicion -> . IF expresion estatuto_list ELSE estatuto_list ENDIF
    (39) condicion -> . IF expresion estatuto_list ENDIF
    (32) escritura -> . PRINT escritura_vars
    (35) lectura -> . READ identifier
    (41) while -> . WHILE expresion estatuto_list ENDWHILE
    (42) for -> . FOR int estatuto_list ENDFOR
    (8) vars -> . VAR vars_list ENDVAR
    (82) identifier -> . IDENTIFIER

    ENDIF           reduce using rule 81 (empty -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 34
    READ            shift and go to state 48
    WHILE           shift and go to state 40
    FOR             shift and go to state 36
    VAR             shift and go to state 46
    IDENTIFIER      shift and go to state 47

    identifier                     shift and go to state 45
    estatuto_list                  shift and go to state 138
    vars                           shift and go to state 33
    for                            shift and go to state 41
    estatuto                       shift and go to state 38
    lectura                        shift and go to state 43
    condicion                      shift and go to state 39
    empty                          shift and go to state 37
    escritura                      shift and go to state 42
    while                          shift and go to state 44
    asignacion                     shift and go to state 35

state 134

    (40) elseif -> ELSEIF expresion . estatuto_list
    (44) expresion -> expresion . and_or termino
    (21) estatuto_list -> . estatuto estatuto_list
    (22) estatuto_list -> . estatuto
    (23) estatuto_list -> . empty
    (59) and_or -> . AND
    (60) and_or -> . OR
    (24) estatuto -> . asignacion
    (25) estatuto -> . condicion
    (26) estatuto -> . escritura
    (27) estatuto -> . lectura
    (28) estatuto -> . while
    (29) estatuto -> . for
    (30) estatuto -> . vars
    (81) empty -> .
    (31) asignacion -> . identifier EQUAL expresion
    (36) condicion -> . IF expresion estatuto_list elseif ENDIF
    (37) condicion -> . IF expresion estatuto_list elseif ELSE estatuto_list ENDIF
    (38) condicion -> . IF expresion estatuto_list ELSE estatuto_list ENDIF
    (39) condicion -> . IF expresion estatuto_list ENDIF
    (32) escritura -> . PRINT escritura_vars
    (35) lectura -> . READ identifier
    (41) while -> . WHILE expresion estatuto_list ENDWHILE
    (42) for -> . FOR int estatuto_list ENDFOR
    (8) vars -> . VAR vars_list ENDVAR
    (82) identifier -> . IDENTIFIER

    AND             shift and go to state 87
    OR              shift and go to state 88
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    IF              shift and go to state 31
    PRINT           shift and go to state 34
    READ            shift and go to state 48
    WHILE           shift and go to state 40
    FOR             shift and go to state 36
    VAR             shift and go to state 46
    IDENTIFIER      shift and go to state 47

    identifier                     shift and go to state 45
    estatuto_list                  shift and go to state 139
    vars                           shift and go to state 33
    for                            shift and go to state 41
    while                          shift and go to state 44
    empty                          shift and go to state 37
    condicion                      shift and go to state 39
    lectura                        shift and go to state 43
    escritura                      shift and go to state 42
    and_or                         shift and go to state 89
    estatuto                       shift and go to state 38
    asignacion                     shift and go to state 35

state 135

    (38) condicion -> IF expresion estatuto_list ELSE estatuto_list . ENDIF

    ENDIF           shift and go to state 140


state 136

    (80) funparams -> expresion COMMA . funparams
    (79) funparams -> . expresion
    (80) funparams -> . expresion COMMA funparams
    (43) expresion -> . termino
    (44) expresion -> . expresion and_or termino
    (45) termino -> . factor
    (46) termino -> . termino sign factor
    (47) factor -> . elemento
    (48) factor -> . factor psign elemento
    (61) elemento -> . identifier
    (62) elemento -> . int
    (63) elemento -> . float
    (64) elemento -> . string
    (65) elemento -> . LPARENTHESES expresion RPARENTHESES
    (66) elemento -> . llamarfun
    (82) identifier -> . IDENTIFIER
    (84) int -> . INT
    (85) float -> . FLOAT
    (87) string -> . STRING
    (77) llamarfun -> . CALLMETHOD identifier funparams
    (78) llamarfun -> . CALLMETHOD identifier

    LPARENTHESES    shift and go to state 66
    IDENTIFIER      shift and go to state 47
    INT             shift and go to state 25
    FLOAT           shift and go to state 29
    STRING          shift and go to state 19
    CALLMETHOD      shift and go to state 63

    int                            shift and go to state 69
    expresion                      shift and go to state 120
    termino                        shift and go to state 62
    factor                         shift and go to state 67
    llamarfun                      shift and go to state 68
    string                         shift and go to state 65
    funparams                      shift and go to state 141
    float                          shift and go to state 64
    identifier                     shift and go to state 70
    elemento                       shift and go to state 71

state 137

    (74) parameter_list -> parameter COMMA parameter_list .

    BLOQUE          reduce using rule 74 (parameter_list -> parameter COMMA parameter_list .)


state 138

    (37) condicion -> IF expresion estatuto_list elseif ELSE estatuto_list . ENDIF

    ENDIF           shift and go to state 142


state 139

    (40) elseif -> ELSEIF expresion estatuto_list .

    ENDIF           reduce using rule 40 (elseif -> ELSEIF expresion estatuto_list .)
    ELSE            reduce using rule 40 (elseif -> ELSEIF expresion estatuto_list .)


state 140

    (38) condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .

    IF              reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    PRINT           reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    READ            reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    WHILE           reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    FOR             reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    VAR             reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    IDENTIFIER      reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    ELSE            reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    ENDIF           reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    ELSEIF          reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    ENDBLOQUE       reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    ENDFOR          reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)
    ENDWHILE        reduce using rule 38 (condicion -> IF expresion estatuto_list ELSE estatuto_list ENDIF .)


state 141

    (80) funparams -> expresion COMMA funparams .

    MULTI           reduce using rule 80 (funparams -> expresion COMMA funparams .)
    DIVIDE          reduce using rule 80 (funparams -> expresion COMMA funparams .)
    LTHAN           reduce using rule 80 (funparams -> expresion COMMA funparams .)
    GTHAN           reduce using rule 80 (funparams -> expresion COMMA funparams .)
    EQUALTO         reduce using rule 80 (funparams -> expresion COMMA funparams .)
    GTHANEQ         reduce using rule 80 (funparams -> expresion COMMA funparams .)
    LTHANEQ         reduce using rule 80 (funparams -> expresion COMMA funparams .)
    NOTEQUAL        reduce using rule 80 (funparams -> expresion COMMA funparams .)
    PLUS            reduce using rule 80 (funparams -> expresion COMMA funparams .)
    MINUS           reduce using rule 80 (funparams -> expresion COMMA funparams .)
    AND             reduce using rule 80 (funparams -> expresion COMMA funparams .)
    OR              reduce using rule 80 (funparams -> expresion COMMA funparams .)
    IF              reduce using rule 80 (funparams -> expresion COMMA funparams .)
    PRINT           reduce using rule 80 (funparams -> expresion COMMA funparams .)
    READ            reduce using rule 80 (funparams -> expresion COMMA funparams .)
    WHILE           reduce using rule 80 (funparams -> expresion COMMA funparams .)
    FOR             reduce using rule 80 (funparams -> expresion COMMA funparams .)
    VAR             reduce using rule 80 (funparams -> expresion COMMA funparams .)
    IDENTIFIER      reduce using rule 80 (funparams -> expresion COMMA funparams .)
    ELSE            reduce using rule 80 (funparams -> expresion COMMA funparams .)
    ENDIF           reduce using rule 80 (funparams -> expresion COMMA funparams .)
    ELSEIF          reduce using rule 80 (funparams -> expresion COMMA funparams .)
    COMMA           reduce using rule 80 (funparams -> expresion COMMA funparams .)
    ENDBLOQUE       reduce using rule 80 (funparams -> expresion COMMA funparams .)
    ENDFOR          reduce using rule 80 (funparams -> expresion COMMA funparams .)
    ENDWHILE        reduce using rule 80 (funparams -> expresion COMMA funparams .)
    RPARENTHESES    reduce using rule 80 (funparams -> expresion COMMA funparams .)


state 142

    (37) condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .

    IF              reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    PRINT           reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    READ            reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    WHILE           reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    FOR             reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    VAR             reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    IDENTIFIER      reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    ELSE            reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    ENDIF           reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    ELSEIF          reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    ENDBLOQUE       reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    ENDFOR          reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)
    ENDWHILE        reduce using rule 37 (condicion -> IF expresion estatuto_list elseif ELSE estatuto_list ENDIF .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ENDPROGRAM in state 3 resolved as shift
WARNING: shift/reduce conflict for ENDPROGRAM in state 15 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 51 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 62 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 62 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 62 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 62 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 62 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 99 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 118 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 118 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 118 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 118 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 118 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 119 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 119 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
WARNING: reduce/reduce conflict in state 21 resolved using rule (vars_list -> vars_declaration)
WARNING: rejected rule (empty -> <empty>) in state 21
WARNING: reduce/reduce conflict in state 38 resolved using rule (estatuto_list -> estatuto)
WARNING: rejected rule (empty -> <empty>) in state 38
