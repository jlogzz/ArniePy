Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM bloque ENDPROGRAM
Rule 2     programa -> global PROGRAM bloque ENDPROGRAM
Rule 3     programa -> PROGRAM bloque ENDPROGRAM funciones
Rule 4     programa -> global PROGRAM bloque ENDPROGRAM funciones
Rule 5     funciones -> func funciones
Rule 6     funciones -> voidfunc funciones
Rule 7     funciones -> empty
Rule 8     vars -> VAR vars1 ENDVAR
Rule 9     global -> GLOBAL vars1 ENDGLOBAL
Rule 10    vars1 -> tipo IDENTIFIER vars2
Rule 11    vars2 -> empty
Rule 12    vars2 -> COMMA IDENTIFIER vars2
Rule 13    tipo -> INT
Rule 14    tipo -> FLOAT
Rule 15    tipo -> STRING
Rule 16    tipo -> BOOL
Rule 17    tipo -> HASH
Rule 18    bloque -> empty
Rule 19    bloque -> estatuto bloque
Rule 20    estatuto -> asignacion
Rule 21    estatuto -> condicion
Rule 22    estatuto -> escritura
Rule 23    estatuto -> lectura
Rule 24    estatuto -> while
Rule 25    estatuto -> for
Rule 26    estatuto -> vars
Rule 27    estatuto -> empty
Rule 28    asignacion -> IDENTIFIER EQUAL expresion
Rule 29    escritura -> PRINT escritura1
Rule 30    escritura1 -> expresion escritura2
Rule 31    escritura2 -> empty
Rule 32    escritura2 -> COMMA escritura1
Rule 33    lectura -> READ IDENTIFIER
Rule 34    condicion -> IF expresion bloque condicion1 ENDIF
Rule 35    condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF
Rule 36    condicion1 -> empty
Rule 37    condicion1 -> ELSEIF expresion bloque condicion1
Rule 38    while -> WHILE expresion bloque ENDWHILE
Rule 39    for -> FOR CTEINT bloque ENDFOR
Rule 40    expresion -> exp
Rule 41    expresion -> exp expresion1 exp
Rule 42    expresion1 -> LTHAN
Rule 43    expresion1 -> GTHAN
Rule 44    expresion1 -> EQUALTO
Rule 45    expresion1 -> GTHANEQ
Rule 46    expresion1 -> LTHANEQ
Rule 47    expresion1 -> NOTEQUAL
Rule 48    expresion1 -> AND
Rule 49    expresion1 -> OR
Rule 50    exp -> termino exp1
Rule 51    exp1 -> empty
Rule 52    exp1 -> PLUS termino exp1
Rule 53    exp1 -> MINUS termino exp1
Rule 54    termino -> factor termino1
Rule 55    termino1 -> empty
Rule 56    termino1 -> MULTI factor termino1
Rule 57    termino1 -> DIVIDE factor termino1
Rule 58    factor -> LPARENTHESES expresion RPARENTHESES
Rule 59    factor -> factor1 varcte
Rule 60    factor1 -> empty
Rule 61    factor1 -> MULTI
Rule 62    factor1 -> DIVIDE
Rule 63    varcte -> IDENTIFIER
Rule 64    varcte -> CTEINT
Rule 65    varcte -> CTEFLOAT
Rule 66    varcte -> TRUE
Rule 67    varcte -> FALSE
Rule 68    varcte -> llamarfun
Rule 69    func -> METHOD tipo IDENTIFIER func1 bloque RETURN IDENTIFIER ENDMETHOD
Rule 70    voidfunc -> METHOD VOID IDENTIFIER func1 bloque ENDMETHOD
Rule 71    func1 -> tipo func2
Rule 72    func1 -> tipo func2 COMMA func1
Rule 73    func1 -> empty
Rule 74    func2 -> IDENTIFIER
Rule 75    func2 -> REFERENCIA
Rule 76    func2 -> VALOR
Rule 77    llamarfun -> CALLMETHOD IDENTIFIER llamarfun1
Rule 78    llamarfun1 -> expresion
Rule 79    llamarfun1 -> expresion COMMA llamarfun1
Rule 80    llamarfun1 -> empty
Rule 81    empty -> <empty>

Terminals, with rules where they appear

AND                  : 48
BOOL                 : 16
CALLMETHOD           : 77
COMMA                : 12 32 72 79
CTEFLOAT             : 65
CTEINT               : 39 64
DIVIDE               : 57 62
ELSE                 : 35
ELSEIF               : 37
ENDFOR               : 39
ENDGLOBAL            : 9
ENDIF                : 34 35
ENDMETHOD            : 69 70
ENDPROGRAM           : 1 2 3 4
ENDVAR               : 8
ENDWHILE             : 38
EQUAL                : 28
EQUALTO              : 44
FALSE                : 67
FLOAT                : 14
FOR                  : 39
GLOBAL               : 9
GTHAN                : 43
GTHANEQ              : 45
HASH                 : 17
IDENTIFIER           : 10 12 28 33 63 69 69 70 74 77
IF                   : 34 35
INT                  : 13
LPARENTHESES         : 58
LTHAN                : 42
LTHANEQ              : 46
METHOD               : 69 70
MINUS                : 53
MULTI                : 56 61
NOTEQUAL             : 47
OR                   : 49
PLUS                 : 52
PRINT                : 29
PROGRAM              : 1 2 3 4
READ                 : 33
REFERENCIA           : 75
RETURN               : 69
RPARENTHESES         : 58
STRING               : 15
TRUE                 : 66
VALOR                : 76
VAR                  : 8
VOID                 : 70
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

asignacion           : 20
bloque               : 1 2 3 4 19 34 35 35 37 38 39 69 70
condicion            : 21
condicion1           : 34 35 37
empty                : 7 11 18 27 31 36 51 55 60 73 80
escritura            : 22
escritura1           : 29 32
escritura2           : 30
estatuto             : 19
exp                  : 40 41 41
exp1                 : 50 52 53
expresion            : 28 30 34 35 37 38 58 78 79
expresion1           : 41
factor               : 54 56 57
factor1              : 59
for                  : 25
func                 : 5
func1                : 69 70 72
func2                : 71 72
funciones            : 3 4 5 6
global               : 2 4
lectura              : 23
llamarfun            : 68
llamarfun1           : 77 79
programa             : 0
termino              : 50 52 53
termino1             : 54 56 57
tipo                 : 10 69 71 72
varcte               : 59
vars                 : 26
vars1                : 8 9
vars2                : 10 12
voidfunc             : 6
while                : 24

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM bloque ENDPROGRAM
    (2) programa -> . global PROGRAM bloque ENDPROGRAM
    (3) programa -> . PROGRAM bloque ENDPROGRAM funciones
    (4) programa -> . global PROGRAM bloque ENDPROGRAM funciones
    (9) global -> . GLOBAL vars1 ENDGLOBAL

    PROGRAM         shift and go to state 4
    GLOBAL          shift and go to state 2

    programa                       shift and go to state 1
    global                         shift and go to state 3

state 1

    (0) S' -> programa .



state 2

    (9) global -> GLOBAL . vars1 ENDGLOBAL
    (10) vars1 -> . tipo IDENTIFIER vars2
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . STRING
    (16) tipo -> . BOOL
    (17) tipo -> . HASH

    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 11
    HASH            shift and go to state 6

    tipo                           shift and go to state 5
    vars1                          shift and go to state 10

state 3

    (2) programa -> global . PROGRAM bloque ENDPROGRAM
    (4) programa -> global . PROGRAM bloque ENDPROGRAM funciones

    PROGRAM         shift and go to state 12


state 4

    (1) programa -> PROGRAM . bloque ENDPROGRAM
    (3) programa -> PROGRAM . bloque ENDPROGRAM funciones
    (18) bloque -> . empty
    (19) bloque -> . estatuto bloque
    (81) empty -> .
    (20) estatuto -> . asignacion
    (21) estatuto -> . condicion
    (22) estatuto -> . escritura
    (23) estatuto -> . lectura
    (24) estatuto -> . while
    (25) estatuto -> . for
    (26) estatuto -> . vars
    (27) estatuto -> . empty
    (28) asignacion -> . IDENTIFIER EQUAL expresion
    (34) condicion -> . IF expresion bloque condicion1 ENDIF
    (35) condicion -> . IF expresion bloque condicion1 ELSE bloque ENDIF
    (29) escritura -> . PRINT escritura1
    (33) lectura -> . READ IDENTIFIER
    (38) while -> . WHILE expresion bloque ENDWHILE
    (39) for -> . FOR CTEINT bloque ENDFOR
    (8) vars -> . VAR vars1 ENDVAR

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 17
    READ            shift and go to state 29
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    VAR             shift and go to state 16

  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! READ            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! VAR             [ reduce using rule 81 (empty -> .) ]

    estatuto                       shift and go to state 13
    escritura                      shift and go to state 21
    condicion                      shift and go to state 15
    for                            shift and go to state 14
    while                          shift and go to state 23
    asignacion                     shift and go to state 18
    empty                          shift and go to state 19
    lectura                        shift and go to state 25
    bloque                         shift and go to state 27
    vars                           shift and go to state 24

state 5

    (10) vars1 -> tipo . IDENTIFIER vars2

    IDENTIFIER      shift and go to state 30


state 6

    (17) tipo -> HASH .

    IDENTIFIER      reduce using rule 17 (tipo -> HASH .)
    REFERENCIA      reduce using rule 17 (tipo -> HASH .)
    VALOR           reduce using rule 17 (tipo -> HASH .)


state 7

    (14) tipo -> FLOAT .

    IDENTIFIER      reduce using rule 14 (tipo -> FLOAT .)
    REFERENCIA      reduce using rule 14 (tipo -> FLOAT .)
    VALOR           reduce using rule 14 (tipo -> FLOAT .)


state 8

    (13) tipo -> INT .

    IDENTIFIER      reduce using rule 13 (tipo -> INT .)
    REFERENCIA      reduce using rule 13 (tipo -> INT .)
    VALOR           reduce using rule 13 (tipo -> INT .)


state 9

    (15) tipo -> STRING .

    IDENTIFIER      reduce using rule 15 (tipo -> STRING .)
    REFERENCIA      reduce using rule 15 (tipo -> STRING .)
    VALOR           reduce using rule 15 (tipo -> STRING .)


state 10

    (9) global -> GLOBAL vars1 . ENDGLOBAL

    ENDGLOBAL       shift and go to state 31


state 11

    (16) tipo -> BOOL .

    IDENTIFIER      reduce using rule 16 (tipo -> BOOL .)
    REFERENCIA      reduce using rule 16 (tipo -> BOOL .)
    VALOR           reduce using rule 16 (tipo -> BOOL .)


state 12

    (2) programa -> global PROGRAM . bloque ENDPROGRAM
    (4) programa -> global PROGRAM . bloque ENDPROGRAM funciones
    (18) bloque -> . empty
    (19) bloque -> . estatuto bloque
    (81) empty -> .
    (20) estatuto -> . asignacion
    (21) estatuto -> . condicion
    (22) estatuto -> . escritura
    (23) estatuto -> . lectura
    (24) estatuto -> . while
    (25) estatuto -> . for
    (26) estatuto -> . vars
    (27) estatuto -> . empty
    (28) asignacion -> . IDENTIFIER EQUAL expresion
    (34) condicion -> . IF expresion bloque condicion1 ENDIF
    (35) condicion -> . IF expresion bloque condicion1 ELSE bloque ENDIF
    (29) escritura -> . PRINT escritura1
    (33) lectura -> . READ IDENTIFIER
    (38) while -> . WHILE expresion bloque ENDWHILE
    (39) for -> . FOR CTEINT bloque ENDFOR
    (8) vars -> . VAR vars1 ENDVAR

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 17
    READ            shift and go to state 29
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    VAR             shift and go to state 16

  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! READ            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! VAR             [ reduce using rule 81 (empty -> .) ]

    estatuto                       shift and go to state 13
    escritura                      shift and go to state 21
    while                          shift and go to state 23
    for                            shift and go to state 14
    condicion                      shift and go to state 15
    asignacion                     shift and go to state 18
    empty                          shift and go to state 19
    lectura                        shift and go to state 25
    bloque                         shift and go to state 32
    vars                           shift and go to state 24

state 13

    (19) bloque -> estatuto . bloque
    (18) bloque -> . empty
    (19) bloque -> . estatuto bloque
    (81) empty -> .
    (20) estatuto -> . asignacion
    (21) estatuto -> . condicion
    (22) estatuto -> . escritura
    (23) estatuto -> . lectura
    (24) estatuto -> . while
    (25) estatuto -> . for
    (26) estatuto -> . vars
    (27) estatuto -> . empty
    (28) asignacion -> . IDENTIFIER EQUAL expresion
    (34) condicion -> . IF expresion bloque condicion1 ENDIF
    (35) condicion -> . IF expresion bloque condicion1 ELSE bloque ENDIF
    (29) escritura -> . PRINT escritura1
    (33) lectura -> . READ IDENTIFIER
    (38) while -> . WHILE expresion bloque ENDWHILE
    (39) for -> . FOR CTEINT bloque ENDFOR
    (8) vars -> . VAR vars1 ENDVAR

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    ENDWHILE        reduce using rule 81 (empty -> .)
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    ENDFOR          reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 17
    READ            shift and go to state 29
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    VAR             shift and go to state 16

  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! READ            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! VAR             [ reduce using rule 81 (empty -> .) ]

    estatuto                       shift and go to state 13
    escritura                      shift and go to state 21
    condicion                      shift and go to state 15
    for                            shift and go to state 14
    while                          shift and go to state 23
    asignacion                     shift and go to state 18
    empty                          shift and go to state 19
    lectura                        shift and go to state 25
    bloque                         shift and go to state 33
    vars                           shift and go to state 24

state 14

    (25) estatuto -> for .

    IDENTIFIER      reduce using rule 25 (estatuto -> for .)
    IF              reduce using rule 25 (estatuto -> for .)
    PRINT           reduce using rule 25 (estatuto -> for .)
    READ            reduce using rule 25 (estatuto -> for .)
    WHILE           reduce using rule 25 (estatuto -> for .)
    FOR             reduce using rule 25 (estatuto -> for .)
    VAR             reduce using rule 25 (estatuto -> for .)
    ENDIF           reduce using rule 25 (estatuto -> for .)
    ENDPROGRAM      reduce using rule 25 (estatuto -> for .)
    ENDWHILE        reduce using rule 25 (estatuto -> for .)
    ELSEIF          reduce using rule 25 (estatuto -> for .)
    ELSE            reduce using rule 25 (estatuto -> for .)
    ENDFOR          reduce using rule 25 (estatuto -> for .)
    RETURN          reduce using rule 25 (estatuto -> for .)
    ENDMETHOD       reduce using rule 25 (estatuto -> for .)


state 15

    (21) estatuto -> condicion .

    IDENTIFIER      reduce using rule 21 (estatuto -> condicion .)
    IF              reduce using rule 21 (estatuto -> condicion .)
    PRINT           reduce using rule 21 (estatuto -> condicion .)
    READ            reduce using rule 21 (estatuto -> condicion .)
    WHILE           reduce using rule 21 (estatuto -> condicion .)
    FOR             reduce using rule 21 (estatuto -> condicion .)
    VAR             reduce using rule 21 (estatuto -> condicion .)
    ENDIF           reduce using rule 21 (estatuto -> condicion .)
    ENDPROGRAM      reduce using rule 21 (estatuto -> condicion .)
    ENDWHILE        reduce using rule 21 (estatuto -> condicion .)
    ELSEIF          reduce using rule 21 (estatuto -> condicion .)
    ELSE            reduce using rule 21 (estatuto -> condicion .)
    ENDFOR          reduce using rule 21 (estatuto -> condicion .)
    RETURN          reduce using rule 21 (estatuto -> condicion .)
    ENDMETHOD       reduce using rule 21 (estatuto -> condicion .)


state 16

    (8) vars -> VAR . vars1 ENDVAR
    (10) vars1 -> . tipo IDENTIFIER vars2
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . STRING
    (16) tipo -> . BOOL
    (17) tipo -> . HASH

    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 11
    HASH            shift and go to state 6

    tipo                           shift and go to state 5
    vars1                          shift and go to state 34

state 17

    (29) escritura -> PRINT . escritura1
    (30) escritura1 -> . expresion escritura2
    (40) expresion -> . exp
    (41) expresion -> . exp expresion1 exp
    (50) exp -> . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    termino                        shift and go to state 36
    expresion                      shift and go to state 35
    exp                            shift and go to state 37
    factor                         shift and go to state 38
    empty                          shift and go to state 42
    escritura1                     shift and go to state 39
    factor1                        shift and go to state 44

state 18

    (20) estatuto -> asignacion .

    IDENTIFIER      reduce using rule 20 (estatuto -> asignacion .)
    IF              reduce using rule 20 (estatuto -> asignacion .)
    PRINT           reduce using rule 20 (estatuto -> asignacion .)
    READ            reduce using rule 20 (estatuto -> asignacion .)
    WHILE           reduce using rule 20 (estatuto -> asignacion .)
    FOR             reduce using rule 20 (estatuto -> asignacion .)
    VAR             reduce using rule 20 (estatuto -> asignacion .)
    ENDIF           reduce using rule 20 (estatuto -> asignacion .)
    ENDPROGRAM      reduce using rule 20 (estatuto -> asignacion .)
    ENDWHILE        reduce using rule 20 (estatuto -> asignacion .)
    ELSEIF          reduce using rule 20 (estatuto -> asignacion .)
    ELSE            reduce using rule 20 (estatuto -> asignacion .)
    ENDFOR          reduce using rule 20 (estatuto -> asignacion .)
    RETURN          reduce using rule 20 (estatuto -> asignacion .)
    ENDMETHOD       reduce using rule 20 (estatuto -> asignacion .)


state 19

    (18) bloque -> empty .
    (27) estatuto -> empty .

  ! reduce/reduce conflict for ENDIF resolved using rule 18 (bloque -> empty .)
  ! reduce/reduce conflict for ENDPROGRAM resolved using rule 18 (bloque -> empty .)
  ! reduce/reduce conflict for ENDWHILE resolved using rule 18 (bloque -> empty .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 18 (bloque -> empty .)
  ! reduce/reduce conflict for ELSE resolved using rule 18 (bloque -> empty .)
  ! reduce/reduce conflict for ENDFOR resolved using rule 18 (bloque -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 18 (bloque -> empty .)
  ! reduce/reduce conflict for ENDMETHOD resolved using rule 18 (bloque -> empty .)
    RETURN          reduce using rule 18 (bloque -> empty .)
    ENDPROGRAM      reduce using rule 18 (bloque -> empty .)
    ELSEIF          reduce using rule 18 (bloque -> empty .)
    ENDIF           reduce using rule 18 (bloque -> empty .)
    ELSE            reduce using rule 18 (bloque -> empty .)
    ENDWHILE        reduce using rule 18 (bloque -> empty .)
    ENDMETHOD       reduce using rule 18 (bloque -> empty .)
    ENDFOR          reduce using rule 18 (bloque -> empty .)
    IDENTIFIER      reduce using rule 27 (estatuto -> empty .)
    IF              reduce using rule 27 (estatuto -> empty .)
    PRINT           reduce using rule 27 (estatuto -> empty .)
    READ            reduce using rule 27 (estatuto -> empty .)
    WHILE           reduce using rule 27 (estatuto -> empty .)
    FOR             reduce using rule 27 (estatuto -> empty .)
    VAR             reduce using rule 27 (estatuto -> empty .)

  ! ENDIF           [ reduce using rule 27 (estatuto -> empty .) ]
  ! ENDPROGRAM      [ reduce using rule 27 (estatuto -> empty .) ]
  ! ENDWHILE        [ reduce using rule 27 (estatuto -> empty .) ]
  ! ELSEIF          [ reduce using rule 27 (estatuto -> empty .) ]
  ! ELSE            [ reduce using rule 27 (estatuto -> empty .) ]
  ! ENDFOR          [ reduce using rule 27 (estatuto -> empty .) ]
  ! RETURN          [ reduce using rule 27 (estatuto -> empty .) ]
  ! ENDMETHOD       [ reduce using rule 27 (estatuto -> empty .) ]


state 20

    (28) asignacion -> IDENTIFIER . EQUAL expresion

    EQUAL           shift and go to state 45


state 21

    (22) estatuto -> escritura .

    IDENTIFIER      reduce using rule 22 (estatuto -> escritura .)
    IF              reduce using rule 22 (estatuto -> escritura .)
    PRINT           reduce using rule 22 (estatuto -> escritura .)
    READ            reduce using rule 22 (estatuto -> escritura .)
    WHILE           reduce using rule 22 (estatuto -> escritura .)
    FOR             reduce using rule 22 (estatuto -> escritura .)
    VAR             reduce using rule 22 (estatuto -> escritura .)
    ENDIF           reduce using rule 22 (estatuto -> escritura .)
    ENDPROGRAM      reduce using rule 22 (estatuto -> escritura .)
    ENDWHILE        reduce using rule 22 (estatuto -> escritura .)
    ELSEIF          reduce using rule 22 (estatuto -> escritura .)
    ELSE            reduce using rule 22 (estatuto -> escritura .)
    ENDFOR          reduce using rule 22 (estatuto -> escritura .)
    RETURN          reduce using rule 22 (estatuto -> escritura .)
    ENDMETHOD       reduce using rule 22 (estatuto -> escritura .)


state 22

    (38) while -> WHILE . expresion bloque ENDWHILE
    (40) expresion -> . exp
    (41) expresion -> . exp expresion1 exp
    (50) exp -> . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    termino                        shift and go to state 36
    factor                         shift and go to state 38
    expresion                      shift and go to state 46
    empty                          shift and go to state 42
    factor1                        shift and go to state 44
    exp                            shift and go to state 37

state 23

    (24) estatuto -> while .

    IDENTIFIER      reduce using rule 24 (estatuto -> while .)
    IF              reduce using rule 24 (estatuto -> while .)
    PRINT           reduce using rule 24 (estatuto -> while .)
    READ            reduce using rule 24 (estatuto -> while .)
    WHILE           reduce using rule 24 (estatuto -> while .)
    FOR             reduce using rule 24 (estatuto -> while .)
    VAR             reduce using rule 24 (estatuto -> while .)
    ENDIF           reduce using rule 24 (estatuto -> while .)
    ENDPROGRAM      reduce using rule 24 (estatuto -> while .)
    ENDWHILE        reduce using rule 24 (estatuto -> while .)
    ELSEIF          reduce using rule 24 (estatuto -> while .)
    ELSE            reduce using rule 24 (estatuto -> while .)
    ENDFOR          reduce using rule 24 (estatuto -> while .)
    RETURN          reduce using rule 24 (estatuto -> while .)
    ENDMETHOD       reduce using rule 24 (estatuto -> while .)


state 24

    (26) estatuto -> vars .

    IDENTIFIER      reduce using rule 26 (estatuto -> vars .)
    IF              reduce using rule 26 (estatuto -> vars .)
    PRINT           reduce using rule 26 (estatuto -> vars .)
    READ            reduce using rule 26 (estatuto -> vars .)
    WHILE           reduce using rule 26 (estatuto -> vars .)
    FOR             reduce using rule 26 (estatuto -> vars .)
    VAR             reduce using rule 26 (estatuto -> vars .)
    ENDIF           reduce using rule 26 (estatuto -> vars .)
    ENDPROGRAM      reduce using rule 26 (estatuto -> vars .)
    ENDWHILE        reduce using rule 26 (estatuto -> vars .)
    ELSEIF          reduce using rule 26 (estatuto -> vars .)
    ELSE            reduce using rule 26 (estatuto -> vars .)
    ENDFOR          reduce using rule 26 (estatuto -> vars .)
    RETURN          reduce using rule 26 (estatuto -> vars .)
    ENDMETHOD       reduce using rule 26 (estatuto -> vars .)


state 25

    (23) estatuto -> lectura .

    IDENTIFIER      reduce using rule 23 (estatuto -> lectura .)
    IF              reduce using rule 23 (estatuto -> lectura .)
    PRINT           reduce using rule 23 (estatuto -> lectura .)
    READ            reduce using rule 23 (estatuto -> lectura .)
    WHILE           reduce using rule 23 (estatuto -> lectura .)
    FOR             reduce using rule 23 (estatuto -> lectura .)
    VAR             reduce using rule 23 (estatuto -> lectura .)
    ENDIF           reduce using rule 23 (estatuto -> lectura .)
    ENDPROGRAM      reduce using rule 23 (estatuto -> lectura .)
    ENDWHILE        reduce using rule 23 (estatuto -> lectura .)
    ELSEIF          reduce using rule 23 (estatuto -> lectura .)
    ELSE            reduce using rule 23 (estatuto -> lectura .)
    ENDFOR          reduce using rule 23 (estatuto -> lectura .)
    RETURN          reduce using rule 23 (estatuto -> lectura .)
    ENDMETHOD       reduce using rule 23 (estatuto -> lectura .)


state 26

    (34) condicion -> IF . expresion bloque condicion1 ENDIF
    (35) condicion -> IF . expresion bloque condicion1 ELSE bloque ENDIF
    (40) expresion -> . exp
    (41) expresion -> . exp expresion1 exp
    (50) exp -> . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    termino                        shift and go to state 36
    expresion                      shift and go to state 47
    factor1                        shift and go to state 44
    exp                            shift and go to state 37
    factor                         shift and go to state 38
    empty                          shift and go to state 42

state 27

    (1) programa -> PROGRAM bloque . ENDPROGRAM
    (3) programa -> PROGRAM bloque . ENDPROGRAM funciones

    ENDPROGRAM      shift and go to state 48


state 28

    (39) for -> FOR . CTEINT bloque ENDFOR

    CTEINT          shift and go to state 49


state 29

    (33) lectura -> READ . IDENTIFIER

    IDENTIFIER      shift and go to state 50


state 30

    (10) vars1 -> tipo IDENTIFIER . vars2
    (11) vars2 -> . empty
    (12) vars2 -> . COMMA IDENTIFIER vars2
    (81) empty -> .

    COMMA           shift and go to state 51
    ENDGLOBAL       reduce using rule 81 (empty -> .)
    ENDVAR          reduce using rule 81 (empty -> .)

    vars2                          shift and go to state 52
    empty                          shift and go to state 53

state 31

    (9) global -> GLOBAL vars1 ENDGLOBAL .

    PROGRAM         reduce using rule 9 (global -> GLOBAL vars1 ENDGLOBAL .)


state 32

    (2) programa -> global PROGRAM bloque . ENDPROGRAM
    (4) programa -> global PROGRAM bloque . ENDPROGRAM funciones

    ENDPROGRAM      shift and go to state 54


state 33

    (19) bloque -> estatuto bloque .

    RETURN          reduce using rule 19 (bloque -> estatuto bloque .)
    ENDPROGRAM      reduce using rule 19 (bloque -> estatuto bloque .)
    ELSEIF          reduce using rule 19 (bloque -> estatuto bloque .)
    ENDIF           reduce using rule 19 (bloque -> estatuto bloque .)
    ELSE            reduce using rule 19 (bloque -> estatuto bloque .)
    ENDWHILE        reduce using rule 19 (bloque -> estatuto bloque .)
    ENDMETHOD       reduce using rule 19 (bloque -> estatuto bloque .)
    ENDFOR          reduce using rule 19 (bloque -> estatuto bloque .)


state 34

    (8) vars -> VAR vars1 . ENDVAR

    ENDVAR          shift and go to state 55


state 35

    (30) escritura1 -> expresion . escritura2
    (31) escritura2 -> . empty
    (32) escritura2 -> . COMMA escritura1
    (81) empty -> .

    COMMA           shift and go to state 57
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    ENDWHILE        reduce using rule 81 (empty -> .)
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    ENDFOR          reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)

    escritura2                     shift and go to state 56
    empty                          shift and go to state 58

state 36

    (50) exp -> termino . exp1
    (51) exp1 -> . empty
    (52) exp1 -> . PLUS termino exp1
    (53) exp1 -> . MINUS termino exp1
    (81) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    LTHAN           reduce using rule 81 (empty -> .)
    GTHAN           reduce using rule 81 (empty -> .)
    EQUALTO         reduce using rule 81 (empty -> .)
    GTHANEQ         reduce using rule 81 (empty -> .)
    LTHANEQ         reduce using rule 81 (empty -> .)
    NOTEQUAL        reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    ENDWHILE        reduce using rule 81 (empty -> .)
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    ENDFOR          reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)
    RPARENTHESES    reduce using rule 81 (empty -> .)
    MULTI           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)

  ! PLUS            [ reduce using rule 81 (empty -> .) ]
  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    exp1                           shift and go to state 59
    empty                          shift and go to state 62

state 37

    (40) expresion -> exp .
    (41) expresion -> exp . expresion1 exp
    (42) expresion1 -> . LTHAN
    (43) expresion1 -> . GTHAN
    (44) expresion1 -> . EQUALTO
    (45) expresion1 -> . GTHANEQ
    (46) expresion1 -> . LTHANEQ
    (47) expresion1 -> . NOTEQUAL
    (48) expresion1 -> . AND
    (49) expresion1 -> . OR

  ! shift/reduce conflict for LTHAN resolved as shift
  ! shift/reduce conflict for GTHAN resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for GTHANEQ resolved as shift
  ! shift/reduce conflict for LTHANEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPARENTHESES    reduce using rule 40 (expresion -> exp .)
    COMMA           reduce using rule 40 (expresion -> exp .)
    IDENTIFIER      reduce using rule 40 (expresion -> exp .)
    IF              reduce using rule 40 (expresion -> exp .)
    PRINT           reduce using rule 40 (expresion -> exp .)
    READ            reduce using rule 40 (expresion -> exp .)
    WHILE           reduce using rule 40 (expresion -> exp .)
    FOR             reduce using rule 40 (expresion -> exp .)
    VAR             reduce using rule 40 (expresion -> exp .)
    ENDPROGRAM      reduce using rule 40 (expresion -> exp .)
    ENDWHILE        reduce using rule 40 (expresion -> exp .)
    ELSEIF          reduce using rule 40 (expresion -> exp .)
    ENDIF           reduce using rule 40 (expresion -> exp .)
    ELSE            reduce using rule 40 (expresion -> exp .)
    ENDFOR          reduce using rule 40 (expresion -> exp .)
    RETURN          reduce using rule 40 (expresion -> exp .)
    ENDMETHOD       reduce using rule 40 (expresion -> exp .)
    MULTI           reduce using rule 40 (expresion -> exp .)
    DIVIDE          reduce using rule 40 (expresion -> exp .)
    PLUS            reduce using rule 40 (expresion -> exp .)
    MINUS           reduce using rule 40 (expresion -> exp .)
    LTHAN           shift and go to state 71
    GTHAN           shift and go to state 69
    EQUALTO         shift and go to state 65
    GTHANEQ         shift and go to state 67
    LTHANEQ         shift and go to state 64
    NOTEQUAL        shift and go to state 63
    AND             shift and go to state 68
    OR              shift and go to state 70

  ! LTHAN           [ reduce using rule 40 (expresion -> exp .) ]
  ! GTHAN           [ reduce using rule 40 (expresion -> exp .) ]
  ! EQUALTO         [ reduce using rule 40 (expresion -> exp .) ]
  ! GTHANEQ         [ reduce using rule 40 (expresion -> exp .) ]
  ! LTHANEQ         [ reduce using rule 40 (expresion -> exp .) ]
  ! NOTEQUAL        [ reduce using rule 40 (expresion -> exp .) ]
  ! AND             [ reduce using rule 40 (expresion -> exp .) ]
  ! OR              [ reduce using rule 40 (expresion -> exp .) ]

    expresion1                     shift and go to state 66

state 38

    (54) termino -> factor . termino1
    (55) termino1 -> . empty
    (56) termino1 -> . MULTI factor termino1
    (57) termino1 -> . DIVIDE factor termino1
    (81) empty -> .

  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    MULTI           shift and go to state 73
    DIVIDE          shift and go to state 74
    LTHAN           reduce using rule 81 (empty -> .)
    GTHAN           reduce using rule 81 (empty -> .)
    EQUALTO         reduce using rule 81 (empty -> .)
    GTHANEQ         reduce using rule 81 (empty -> .)
    LTHANEQ         reduce using rule 81 (empty -> .)
    NOTEQUAL        reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    ENDWHILE        reduce using rule 81 (empty -> .)
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    ENDFOR          reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)
    RPARENTHESES    reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    MINUS           reduce using rule 81 (empty -> .)

  ! MULTI           [ reduce using rule 81 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 81 (empty -> .) ]

    termino1                       shift and go to state 72
    empty                          shift and go to state 75

state 39

    (29) escritura -> PRINT escritura1 .

    IDENTIFIER      reduce using rule 29 (escritura -> PRINT escritura1 .)
    IF              reduce using rule 29 (escritura -> PRINT escritura1 .)
    PRINT           reduce using rule 29 (escritura -> PRINT escritura1 .)
    READ            reduce using rule 29 (escritura -> PRINT escritura1 .)
    WHILE           reduce using rule 29 (escritura -> PRINT escritura1 .)
    FOR             reduce using rule 29 (escritura -> PRINT escritura1 .)
    VAR             reduce using rule 29 (escritura -> PRINT escritura1 .)
    ENDMETHOD       reduce using rule 29 (escritura -> PRINT escritura1 .)
    ENDPROGRAM      reduce using rule 29 (escritura -> PRINT escritura1 .)
    RETURN          reduce using rule 29 (escritura -> PRINT escritura1 .)
    ENDIF           reduce using rule 29 (escritura -> PRINT escritura1 .)
    ELSEIF          reduce using rule 29 (escritura -> PRINT escritura1 .)
    ELSE            reduce using rule 29 (escritura -> PRINT escritura1 .)
    ENDWHILE        reduce using rule 29 (escritura -> PRINT escritura1 .)
    ENDFOR          reduce using rule 29 (escritura -> PRINT escritura1 .)


state 40

    (58) factor -> LPARENTHESES . expresion RPARENTHESES
    (40) expresion -> . exp
    (41) expresion -> . exp expresion1 exp
    (50) exp -> . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    termino                        shift and go to state 36
    factor                         shift and go to state 38
    expresion                      shift and go to state 76
    empty                          shift and go to state 42
    factor1                        shift and go to state 44
    exp                            shift and go to state 37

state 41

    (62) factor1 -> DIVIDE .

    IDENTIFIER      reduce using rule 62 (factor1 -> DIVIDE .)
    CTEINT          reduce using rule 62 (factor1 -> DIVIDE .)
    CTEFLOAT        reduce using rule 62 (factor1 -> DIVIDE .)
    TRUE            reduce using rule 62 (factor1 -> DIVIDE .)
    FALSE           reduce using rule 62 (factor1 -> DIVIDE .)
    CALLMETHOD      reduce using rule 62 (factor1 -> DIVIDE .)


state 42

    (60) factor1 -> empty .

    IDENTIFIER      reduce using rule 60 (factor1 -> empty .)
    CTEINT          reduce using rule 60 (factor1 -> empty .)
    CTEFLOAT        reduce using rule 60 (factor1 -> empty .)
    TRUE            reduce using rule 60 (factor1 -> empty .)
    FALSE           reduce using rule 60 (factor1 -> empty .)
    CALLMETHOD      reduce using rule 60 (factor1 -> empty .)


state 43

    (61) factor1 -> MULTI .

    IDENTIFIER      reduce using rule 61 (factor1 -> MULTI .)
    CTEINT          reduce using rule 61 (factor1 -> MULTI .)
    CTEFLOAT        reduce using rule 61 (factor1 -> MULTI .)
    TRUE            reduce using rule 61 (factor1 -> MULTI .)
    FALSE           reduce using rule 61 (factor1 -> MULTI .)
    CALLMETHOD      reduce using rule 61 (factor1 -> MULTI .)


state 44

    (59) factor -> factor1 . varcte
    (63) varcte -> . IDENTIFIER
    (64) varcte -> . CTEINT
    (65) varcte -> . CTEFLOAT
    (66) varcte -> . TRUE
    (67) varcte -> . FALSE
    (68) varcte -> . llamarfun
    (77) llamarfun -> . CALLMETHOD IDENTIFIER llamarfun1

    IDENTIFIER      shift and go to state 82
    CTEINT          shift and go to state 79
    CTEFLOAT        shift and go to state 84
    TRUE            shift and go to state 83
    FALSE           shift and go to state 81
    CALLMETHOD      shift and go to state 80

    varcte                         shift and go to state 77
    llamarfun                      shift and go to state 78

state 45

    (28) asignacion -> IDENTIFIER EQUAL . expresion
    (40) expresion -> . exp
    (41) expresion -> . exp expresion1 exp
    (50) exp -> . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    termino                        shift and go to state 36
    factor                         shift and go to state 38
    expresion                      shift and go to state 85
    empty                          shift and go to state 42
    factor1                        shift and go to state 44
    exp                            shift and go to state 37

state 46

    (38) while -> WHILE expresion . bloque ENDWHILE
    (18) bloque -> . empty
    (19) bloque -> . estatuto bloque
    (81) empty -> .
    (20) estatuto -> . asignacion
    (21) estatuto -> . condicion
    (22) estatuto -> . escritura
    (23) estatuto -> . lectura
    (24) estatuto -> . while
    (25) estatuto -> . for
    (26) estatuto -> . vars
    (27) estatuto -> . empty
    (28) asignacion -> . IDENTIFIER EQUAL expresion
    (34) condicion -> . IF expresion bloque condicion1 ENDIF
    (35) condicion -> . IF expresion bloque condicion1 ELSE bloque ENDIF
    (29) escritura -> . PRINT escritura1
    (33) lectura -> . READ IDENTIFIER
    (38) while -> . WHILE expresion bloque ENDWHILE
    (39) for -> . FOR CTEINT bloque ENDFOR
    (8) vars -> . VAR vars1 ENDVAR

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    ENDWHILE        reduce using rule 81 (empty -> .)
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 17
    READ            shift and go to state 29
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    VAR             shift and go to state 16

  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! READ            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! VAR             [ reduce using rule 81 (empty -> .) ]

    estatuto                       shift and go to state 13
    escritura                      shift and go to state 21
    condicion                      shift and go to state 15
    for                            shift and go to state 14
    while                          shift and go to state 23
    asignacion                     shift and go to state 18
    empty                          shift and go to state 19
    lectura                        shift and go to state 25
    bloque                         shift and go to state 86
    vars                           shift and go to state 24

state 47

    (34) condicion -> IF expresion . bloque condicion1 ENDIF
    (35) condicion -> IF expresion . bloque condicion1 ELSE bloque ENDIF
    (18) bloque -> . empty
    (19) bloque -> . estatuto bloque
    (81) empty -> .
    (20) estatuto -> . asignacion
    (21) estatuto -> . condicion
    (22) estatuto -> . escritura
    (23) estatuto -> . lectura
    (24) estatuto -> . while
    (25) estatuto -> . for
    (26) estatuto -> . vars
    (27) estatuto -> . empty
    (28) asignacion -> . IDENTIFIER EQUAL expresion
    (34) condicion -> . IF expresion bloque condicion1 ENDIF
    (35) condicion -> . IF expresion bloque condicion1 ELSE bloque ENDIF
    (29) escritura -> . PRINT escritura1
    (33) lectura -> . READ IDENTIFIER
    (38) while -> . WHILE expresion bloque ENDWHILE
    (39) for -> . FOR CTEINT bloque ENDFOR
    (8) vars -> . VAR vars1 ENDVAR

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 17
    READ            shift and go to state 29
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    VAR             shift and go to state 16

  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! READ            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! VAR             [ reduce using rule 81 (empty -> .) ]

    estatuto                       shift and go to state 13
    escritura                      shift and go to state 21
    condicion                      shift and go to state 15
    for                            shift and go to state 14
    while                          shift and go to state 23
    asignacion                     shift and go to state 18
    empty                          shift and go to state 19
    lectura                        shift and go to state 25
    bloque                         shift and go to state 87
    vars                           shift and go to state 24

state 48

    (1) programa -> PROGRAM bloque ENDPROGRAM .
    (3) programa -> PROGRAM bloque ENDPROGRAM . funciones
    (5) funciones -> . func funciones
    (6) funciones -> . voidfunc funciones
    (7) funciones -> . empty
    (69) func -> . METHOD tipo IDENTIFIER func1 bloque RETURN IDENTIFIER ENDMETHOD
    (70) voidfunc -> . METHOD VOID IDENTIFIER func1 bloque ENDMETHOD
    (81) empty -> .

  ! reduce/reduce conflict for $end resolved using rule 1 (programa -> PROGRAM bloque ENDPROGRAM .)
    $end            reduce using rule 1 (programa -> PROGRAM bloque ENDPROGRAM .)
    METHOD          shift and go to state 90

  ! $end            [ reduce using rule 81 (empty -> .) ]

    funciones                      shift and go to state 89
    empty                          shift and go to state 91
    voidfunc                       shift and go to state 92
    func                           shift and go to state 88

state 49

    (39) for -> FOR CTEINT . bloque ENDFOR
    (18) bloque -> . empty
    (19) bloque -> . estatuto bloque
    (81) empty -> .
    (20) estatuto -> . asignacion
    (21) estatuto -> . condicion
    (22) estatuto -> . escritura
    (23) estatuto -> . lectura
    (24) estatuto -> . while
    (25) estatuto -> . for
    (26) estatuto -> . vars
    (27) estatuto -> . empty
    (28) asignacion -> . IDENTIFIER EQUAL expresion
    (34) condicion -> . IF expresion bloque condicion1 ENDIF
    (35) condicion -> . IF expresion bloque condicion1 ELSE bloque ENDIF
    (29) escritura -> . PRINT escritura1
    (33) lectura -> . READ IDENTIFIER
    (38) while -> . WHILE expresion bloque ENDWHILE
    (39) for -> . FOR CTEINT bloque ENDFOR
    (8) vars -> . VAR vars1 ENDVAR

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    ENDFOR          reduce using rule 81 (empty -> .)
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 17
    READ            shift and go to state 29
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    VAR             shift and go to state 16

  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! READ            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! VAR             [ reduce using rule 81 (empty -> .) ]

    estatuto                       shift and go to state 13
    escritura                      shift and go to state 21
    condicion                      shift and go to state 15
    for                            shift and go to state 14
    while                          shift and go to state 23
    asignacion                     shift and go to state 18
    empty                          shift and go to state 19
    lectura                        shift and go to state 25
    bloque                         shift and go to state 93
    vars                           shift and go to state 24

state 50

    (33) lectura -> READ IDENTIFIER .

    IDENTIFIER      reduce using rule 33 (lectura -> READ IDENTIFIER .)
    IF              reduce using rule 33 (lectura -> READ IDENTIFIER .)
    PRINT           reduce using rule 33 (lectura -> READ IDENTIFIER .)
    READ            reduce using rule 33 (lectura -> READ IDENTIFIER .)
    WHILE           reduce using rule 33 (lectura -> READ IDENTIFIER .)
    FOR             reduce using rule 33 (lectura -> READ IDENTIFIER .)
    VAR             reduce using rule 33 (lectura -> READ IDENTIFIER .)
    ENDPROGRAM      reduce using rule 33 (lectura -> READ IDENTIFIER .)
    ENDWHILE        reduce using rule 33 (lectura -> READ IDENTIFIER .)
    ELSEIF          reduce using rule 33 (lectura -> READ IDENTIFIER .)
    ENDIF           reduce using rule 33 (lectura -> READ IDENTIFIER .)
    ELSE            reduce using rule 33 (lectura -> READ IDENTIFIER .)
    ENDFOR          reduce using rule 33 (lectura -> READ IDENTIFIER .)
    RETURN          reduce using rule 33 (lectura -> READ IDENTIFIER .)
    ENDMETHOD       reduce using rule 33 (lectura -> READ IDENTIFIER .)


state 51

    (12) vars2 -> COMMA . IDENTIFIER vars2

    IDENTIFIER      shift and go to state 94


state 52

    (10) vars1 -> tipo IDENTIFIER vars2 .

    ENDGLOBAL       reduce using rule 10 (vars1 -> tipo IDENTIFIER vars2 .)
    ENDVAR          reduce using rule 10 (vars1 -> tipo IDENTIFIER vars2 .)


state 53

    (11) vars2 -> empty .

    ENDGLOBAL       reduce using rule 11 (vars2 -> empty .)
    ENDVAR          reduce using rule 11 (vars2 -> empty .)


state 54

    (2) programa -> global PROGRAM bloque ENDPROGRAM .
    (4) programa -> global PROGRAM bloque ENDPROGRAM . funciones
    (5) funciones -> . func funciones
    (6) funciones -> . voidfunc funciones
    (7) funciones -> . empty
    (69) func -> . METHOD tipo IDENTIFIER func1 bloque RETURN IDENTIFIER ENDMETHOD
    (70) voidfunc -> . METHOD VOID IDENTIFIER func1 bloque ENDMETHOD
    (81) empty -> .

  ! reduce/reduce conflict for $end resolved using rule 2 (programa -> global PROGRAM bloque ENDPROGRAM .)
    $end            reduce using rule 2 (programa -> global PROGRAM bloque ENDPROGRAM .)
    METHOD          shift and go to state 90

  ! $end            [ reduce using rule 81 (empty -> .) ]

    empty                          shift and go to state 91
    funciones                      shift and go to state 95
    voidfunc                       shift and go to state 92
    func                           shift and go to state 88

state 55

    (8) vars -> VAR vars1 ENDVAR .

    IDENTIFIER      reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    IF              reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    PRINT           reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    READ            reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    WHILE           reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    FOR             reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    VAR             reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    RETURN          reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    ENDIF           reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    ENDPROGRAM      reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    ENDWHILE        reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    ELSEIF          reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    ELSE            reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    ENDFOR          reduce using rule 8 (vars -> VAR vars1 ENDVAR .)
    ENDMETHOD       reduce using rule 8 (vars -> VAR vars1 ENDVAR .)


state 56

    (30) escritura1 -> expresion escritura2 .

    IDENTIFIER      reduce using rule 30 (escritura1 -> expresion escritura2 .)
    IF              reduce using rule 30 (escritura1 -> expresion escritura2 .)
    PRINT           reduce using rule 30 (escritura1 -> expresion escritura2 .)
    READ            reduce using rule 30 (escritura1 -> expresion escritura2 .)
    WHILE           reduce using rule 30 (escritura1 -> expresion escritura2 .)
    FOR             reduce using rule 30 (escritura1 -> expresion escritura2 .)
    VAR             reduce using rule 30 (escritura1 -> expresion escritura2 .)
    ENDPROGRAM      reduce using rule 30 (escritura1 -> expresion escritura2 .)
    ENDWHILE        reduce using rule 30 (escritura1 -> expresion escritura2 .)
    ELSEIF          reduce using rule 30 (escritura1 -> expresion escritura2 .)
    ENDIF           reduce using rule 30 (escritura1 -> expresion escritura2 .)
    ELSE            reduce using rule 30 (escritura1 -> expresion escritura2 .)
    ENDFOR          reduce using rule 30 (escritura1 -> expresion escritura2 .)
    RETURN          reduce using rule 30 (escritura1 -> expresion escritura2 .)
    ENDMETHOD       reduce using rule 30 (escritura1 -> expresion escritura2 .)


state 57

    (32) escritura2 -> COMMA . escritura1
    (30) escritura1 -> . expresion escritura2
    (40) expresion -> . exp
    (41) expresion -> . exp expresion1 exp
    (50) exp -> . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    termino                        shift and go to state 36
    expresion                      shift and go to state 35
    exp                            shift and go to state 37
    factor                         shift and go to state 38
    empty                          shift and go to state 42
    escritura1                     shift and go to state 96
    factor1                        shift and go to state 44

state 58

    (31) escritura2 -> empty .

    IDENTIFIER      reduce using rule 31 (escritura2 -> empty .)
    IF              reduce using rule 31 (escritura2 -> empty .)
    PRINT           reduce using rule 31 (escritura2 -> empty .)
    READ            reduce using rule 31 (escritura2 -> empty .)
    WHILE           reduce using rule 31 (escritura2 -> empty .)
    FOR             reduce using rule 31 (escritura2 -> empty .)
    VAR             reduce using rule 31 (escritura2 -> empty .)
    ENDPROGRAM      reduce using rule 31 (escritura2 -> empty .)
    ENDWHILE        reduce using rule 31 (escritura2 -> empty .)
    ELSEIF          reduce using rule 31 (escritura2 -> empty .)
    ENDIF           reduce using rule 31 (escritura2 -> empty .)
    ELSE            reduce using rule 31 (escritura2 -> empty .)
    ENDFOR          reduce using rule 31 (escritura2 -> empty .)
    RETURN          reduce using rule 31 (escritura2 -> empty .)
    ENDMETHOD       reduce using rule 31 (escritura2 -> empty .)


state 59

    (50) exp -> termino exp1 .

    LTHAN           reduce using rule 50 (exp -> termino exp1 .)
    GTHAN           reduce using rule 50 (exp -> termino exp1 .)
    EQUALTO         reduce using rule 50 (exp -> termino exp1 .)
    GTHANEQ         reduce using rule 50 (exp -> termino exp1 .)
    LTHANEQ         reduce using rule 50 (exp -> termino exp1 .)
    NOTEQUAL        reduce using rule 50 (exp -> termino exp1 .)
    AND             reduce using rule 50 (exp -> termino exp1 .)
    OR              reduce using rule 50 (exp -> termino exp1 .)
    IDENTIFIER      reduce using rule 50 (exp -> termino exp1 .)
    IF              reduce using rule 50 (exp -> termino exp1 .)
    PRINT           reduce using rule 50 (exp -> termino exp1 .)
    READ            reduce using rule 50 (exp -> termino exp1 .)
    WHILE           reduce using rule 50 (exp -> termino exp1 .)
    FOR             reduce using rule 50 (exp -> termino exp1 .)
    VAR             reduce using rule 50 (exp -> termino exp1 .)
    ELSEIF          reduce using rule 50 (exp -> termino exp1 .)
    ENDIF           reduce using rule 50 (exp -> termino exp1 .)
    ELSE            reduce using rule 50 (exp -> termino exp1 .)
    ENDWHILE        reduce using rule 50 (exp -> termino exp1 .)
    RPARENTHESES    reduce using rule 50 (exp -> termino exp1 .)
    COMMA           reduce using rule 50 (exp -> termino exp1 .)
    ENDPROGRAM      reduce using rule 50 (exp -> termino exp1 .)
    ENDFOR          reduce using rule 50 (exp -> termino exp1 .)
    RETURN          reduce using rule 50 (exp -> termino exp1 .)
    ENDMETHOD       reduce using rule 50 (exp -> termino exp1 .)
    MULTI           reduce using rule 50 (exp -> termino exp1 .)
    DIVIDE          reduce using rule 50 (exp -> termino exp1 .)
    PLUS            reduce using rule 50 (exp -> termino exp1 .)
    MINUS           reduce using rule 50 (exp -> termino exp1 .)


state 60

    (52) exp1 -> PLUS . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    termino                        shift and go to state 97
    factor                         shift and go to state 38
    empty                          shift and go to state 42
    factor1                        shift and go to state 44

state 61

    (53) exp1 -> MINUS . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    termino                        shift and go to state 98
    factor                         shift and go to state 38
    empty                          shift and go to state 42
    factor1                        shift and go to state 44

state 62

    (51) exp1 -> empty .

    LTHAN           reduce using rule 51 (exp1 -> empty .)
    GTHAN           reduce using rule 51 (exp1 -> empty .)
    EQUALTO         reduce using rule 51 (exp1 -> empty .)
    GTHANEQ         reduce using rule 51 (exp1 -> empty .)
    LTHANEQ         reduce using rule 51 (exp1 -> empty .)
    NOTEQUAL        reduce using rule 51 (exp1 -> empty .)
    AND             reduce using rule 51 (exp1 -> empty .)
    OR              reduce using rule 51 (exp1 -> empty .)
    COMMA           reduce using rule 51 (exp1 -> empty .)
    IDENTIFIER      reduce using rule 51 (exp1 -> empty .)
    IF              reduce using rule 51 (exp1 -> empty .)
    PRINT           reduce using rule 51 (exp1 -> empty .)
    READ            reduce using rule 51 (exp1 -> empty .)
    WHILE           reduce using rule 51 (exp1 -> empty .)
    FOR             reduce using rule 51 (exp1 -> empty .)
    VAR             reduce using rule 51 (exp1 -> empty .)
    ENDPROGRAM      reduce using rule 51 (exp1 -> empty .)
    ENDWHILE        reduce using rule 51 (exp1 -> empty .)
    ELSEIF          reduce using rule 51 (exp1 -> empty .)
    ENDIF           reduce using rule 51 (exp1 -> empty .)
    ELSE            reduce using rule 51 (exp1 -> empty .)
    ENDFOR          reduce using rule 51 (exp1 -> empty .)
    RETURN          reduce using rule 51 (exp1 -> empty .)
    ENDMETHOD       reduce using rule 51 (exp1 -> empty .)
    RPARENTHESES    reduce using rule 51 (exp1 -> empty .)
    MULTI           reduce using rule 51 (exp1 -> empty .)
    DIVIDE          reduce using rule 51 (exp1 -> empty .)
    PLUS            reduce using rule 51 (exp1 -> empty .)
    MINUS           reduce using rule 51 (exp1 -> empty .)


state 63

    (47) expresion1 -> NOTEQUAL .

    LPARENTHESES    reduce using rule 47 (expresion1 -> NOTEQUAL .)
    MULTI           reduce using rule 47 (expresion1 -> NOTEQUAL .)
    DIVIDE          reduce using rule 47 (expresion1 -> NOTEQUAL .)
    IDENTIFIER      reduce using rule 47 (expresion1 -> NOTEQUAL .)
    CTEINT          reduce using rule 47 (expresion1 -> NOTEQUAL .)
    CTEFLOAT        reduce using rule 47 (expresion1 -> NOTEQUAL .)
    TRUE            reduce using rule 47 (expresion1 -> NOTEQUAL .)
    FALSE           reduce using rule 47 (expresion1 -> NOTEQUAL .)
    CALLMETHOD      reduce using rule 47 (expresion1 -> NOTEQUAL .)


state 64

    (46) expresion1 -> LTHANEQ .

    LPARENTHESES    reduce using rule 46 (expresion1 -> LTHANEQ .)
    MULTI           reduce using rule 46 (expresion1 -> LTHANEQ .)
    DIVIDE          reduce using rule 46 (expresion1 -> LTHANEQ .)
    IDENTIFIER      reduce using rule 46 (expresion1 -> LTHANEQ .)
    CTEINT          reduce using rule 46 (expresion1 -> LTHANEQ .)
    CTEFLOAT        reduce using rule 46 (expresion1 -> LTHANEQ .)
    TRUE            reduce using rule 46 (expresion1 -> LTHANEQ .)
    FALSE           reduce using rule 46 (expresion1 -> LTHANEQ .)
    CALLMETHOD      reduce using rule 46 (expresion1 -> LTHANEQ .)


state 65

    (44) expresion1 -> EQUALTO .

    LPARENTHESES    reduce using rule 44 (expresion1 -> EQUALTO .)
    MULTI           reduce using rule 44 (expresion1 -> EQUALTO .)
    DIVIDE          reduce using rule 44 (expresion1 -> EQUALTO .)
    IDENTIFIER      reduce using rule 44 (expresion1 -> EQUALTO .)
    CTEINT          reduce using rule 44 (expresion1 -> EQUALTO .)
    CTEFLOAT        reduce using rule 44 (expresion1 -> EQUALTO .)
    TRUE            reduce using rule 44 (expresion1 -> EQUALTO .)
    FALSE           reduce using rule 44 (expresion1 -> EQUALTO .)
    CALLMETHOD      reduce using rule 44 (expresion1 -> EQUALTO .)


state 66

    (41) expresion -> exp expresion1 . exp
    (50) exp -> . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    termino                        shift and go to state 36
    factor                         shift and go to state 38
    empty                          shift and go to state 42
    factor1                        shift and go to state 44
    exp                            shift and go to state 99

state 67

    (45) expresion1 -> GTHANEQ .

    LPARENTHESES    reduce using rule 45 (expresion1 -> GTHANEQ .)
    MULTI           reduce using rule 45 (expresion1 -> GTHANEQ .)
    DIVIDE          reduce using rule 45 (expresion1 -> GTHANEQ .)
    IDENTIFIER      reduce using rule 45 (expresion1 -> GTHANEQ .)
    CTEINT          reduce using rule 45 (expresion1 -> GTHANEQ .)
    CTEFLOAT        reduce using rule 45 (expresion1 -> GTHANEQ .)
    TRUE            reduce using rule 45 (expresion1 -> GTHANEQ .)
    FALSE           reduce using rule 45 (expresion1 -> GTHANEQ .)
    CALLMETHOD      reduce using rule 45 (expresion1 -> GTHANEQ .)


state 68

    (48) expresion1 -> AND .

    LPARENTHESES    reduce using rule 48 (expresion1 -> AND .)
    MULTI           reduce using rule 48 (expresion1 -> AND .)
    DIVIDE          reduce using rule 48 (expresion1 -> AND .)
    IDENTIFIER      reduce using rule 48 (expresion1 -> AND .)
    CTEINT          reduce using rule 48 (expresion1 -> AND .)
    CTEFLOAT        reduce using rule 48 (expresion1 -> AND .)
    TRUE            reduce using rule 48 (expresion1 -> AND .)
    FALSE           reduce using rule 48 (expresion1 -> AND .)
    CALLMETHOD      reduce using rule 48 (expresion1 -> AND .)


state 69

    (43) expresion1 -> GTHAN .

    LPARENTHESES    reduce using rule 43 (expresion1 -> GTHAN .)
    MULTI           reduce using rule 43 (expresion1 -> GTHAN .)
    DIVIDE          reduce using rule 43 (expresion1 -> GTHAN .)
    IDENTIFIER      reduce using rule 43 (expresion1 -> GTHAN .)
    CTEINT          reduce using rule 43 (expresion1 -> GTHAN .)
    CTEFLOAT        reduce using rule 43 (expresion1 -> GTHAN .)
    TRUE            reduce using rule 43 (expresion1 -> GTHAN .)
    FALSE           reduce using rule 43 (expresion1 -> GTHAN .)
    CALLMETHOD      reduce using rule 43 (expresion1 -> GTHAN .)


state 70

    (49) expresion1 -> OR .

    LPARENTHESES    reduce using rule 49 (expresion1 -> OR .)
    MULTI           reduce using rule 49 (expresion1 -> OR .)
    DIVIDE          reduce using rule 49 (expresion1 -> OR .)
    IDENTIFIER      reduce using rule 49 (expresion1 -> OR .)
    CTEINT          reduce using rule 49 (expresion1 -> OR .)
    CTEFLOAT        reduce using rule 49 (expresion1 -> OR .)
    TRUE            reduce using rule 49 (expresion1 -> OR .)
    FALSE           reduce using rule 49 (expresion1 -> OR .)
    CALLMETHOD      reduce using rule 49 (expresion1 -> OR .)


state 71

    (42) expresion1 -> LTHAN .

    LPARENTHESES    reduce using rule 42 (expresion1 -> LTHAN .)
    MULTI           reduce using rule 42 (expresion1 -> LTHAN .)
    DIVIDE          reduce using rule 42 (expresion1 -> LTHAN .)
    IDENTIFIER      reduce using rule 42 (expresion1 -> LTHAN .)
    CTEINT          reduce using rule 42 (expresion1 -> LTHAN .)
    CTEFLOAT        reduce using rule 42 (expresion1 -> LTHAN .)
    TRUE            reduce using rule 42 (expresion1 -> LTHAN .)
    FALSE           reduce using rule 42 (expresion1 -> LTHAN .)
    CALLMETHOD      reduce using rule 42 (expresion1 -> LTHAN .)


state 72

    (54) termino -> factor termino1 .

    LTHAN           reduce using rule 54 (termino -> factor termino1 .)
    GTHAN           reduce using rule 54 (termino -> factor termino1 .)
    EQUALTO         reduce using rule 54 (termino -> factor termino1 .)
    GTHANEQ         reduce using rule 54 (termino -> factor termino1 .)
    LTHANEQ         reduce using rule 54 (termino -> factor termino1 .)
    NOTEQUAL        reduce using rule 54 (termino -> factor termino1 .)
    AND             reduce using rule 54 (termino -> factor termino1 .)
    OR              reduce using rule 54 (termino -> factor termino1 .)
    COMMA           reduce using rule 54 (termino -> factor termino1 .)
    IDENTIFIER      reduce using rule 54 (termino -> factor termino1 .)
    IF              reduce using rule 54 (termino -> factor termino1 .)
    PRINT           reduce using rule 54 (termino -> factor termino1 .)
    READ            reduce using rule 54 (termino -> factor termino1 .)
    WHILE           reduce using rule 54 (termino -> factor termino1 .)
    FOR             reduce using rule 54 (termino -> factor termino1 .)
    VAR             reduce using rule 54 (termino -> factor termino1 .)
    ENDPROGRAM      reduce using rule 54 (termino -> factor termino1 .)
    ENDWHILE        reduce using rule 54 (termino -> factor termino1 .)
    ELSEIF          reduce using rule 54 (termino -> factor termino1 .)
    ENDIF           reduce using rule 54 (termino -> factor termino1 .)
    ELSE            reduce using rule 54 (termino -> factor termino1 .)
    ENDFOR          reduce using rule 54 (termino -> factor termino1 .)
    RETURN          reduce using rule 54 (termino -> factor termino1 .)
    ENDMETHOD       reduce using rule 54 (termino -> factor termino1 .)
    RPARENTHESES    reduce using rule 54 (termino -> factor termino1 .)
    MULTI           reduce using rule 54 (termino -> factor termino1 .)
    DIVIDE          reduce using rule 54 (termino -> factor termino1 .)
    PLUS            reduce using rule 54 (termino -> factor termino1 .)
    MINUS           reduce using rule 54 (termino -> factor termino1 .)


state 73

    (56) termino1 -> MULTI . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    factor                         shift and go to state 100
    empty                          shift and go to state 42
    factor1                        shift and go to state 44

state 74

    (57) termino1 -> DIVIDE . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    factor                         shift and go to state 101
    empty                          shift and go to state 42
    factor1                        shift and go to state 44

state 75

    (55) termino1 -> empty .

    LTHAN           reduce using rule 55 (termino1 -> empty .)
    GTHAN           reduce using rule 55 (termino1 -> empty .)
    EQUALTO         reduce using rule 55 (termino1 -> empty .)
    GTHANEQ         reduce using rule 55 (termino1 -> empty .)
    LTHANEQ         reduce using rule 55 (termino1 -> empty .)
    NOTEQUAL        reduce using rule 55 (termino1 -> empty .)
    AND             reduce using rule 55 (termino1 -> empty .)
    OR              reduce using rule 55 (termino1 -> empty .)
    COMMA           reduce using rule 55 (termino1 -> empty .)
    IDENTIFIER      reduce using rule 55 (termino1 -> empty .)
    IF              reduce using rule 55 (termino1 -> empty .)
    PRINT           reduce using rule 55 (termino1 -> empty .)
    READ            reduce using rule 55 (termino1 -> empty .)
    WHILE           reduce using rule 55 (termino1 -> empty .)
    FOR             reduce using rule 55 (termino1 -> empty .)
    VAR             reduce using rule 55 (termino1 -> empty .)
    ENDPROGRAM      reduce using rule 55 (termino1 -> empty .)
    ENDWHILE        reduce using rule 55 (termino1 -> empty .)
    ELSEIF          reduce using rule 55 (termino1 -> empty .)
    ENDIF           reduce using rule 55 (termino1 -> empty .)
    ELSE            reduce using rule 55 (termino1 -> empty .)
    ENDFOR          reduce using rule 55 (termino1 -> empty .)
    RETURN          reduce using rule 55 (termino1 -> empty .)
    ENDMETHOD       reduce using rule 55 (termino1 -> empty .)
    RPARENTHESES    reduce using rule 55 (termino1 -> empty .)
    MULTI           reduce using rule 55 (termino1 -> empty .)
    DIVIDE          reduce using rule 55 (termino1 -> empty .)
    PLUS            reduce using rule 55 (termino1 -> empty .)
    MINUS           reduce using rule 55 (termino1 -> empty .)


state 76

    (58) factor -> LPARENTHESES expresion . RPARENTHESES

    RPARENTHESES    shift and go to state 102


state 77

    (59) factor -> factor1 varcte .

    MULTI           reduce using rule 59 (factor -> factor1 varcte .)
    DIVIDE          reduce using rule 59 (factor -> factor1 varcte .)
    PLUS            reduce using rule 59 (factor -> factor1 varcte .)
    MINUS           reduce using rule 59 (factor -> factor1 varcte .)
    LTHAN           reduce using rule 59 (factor -> factor1 varcte .)
    GTHAN           reduce using rule 59 (factor -> factor1 varcte .)
    EQUALTO         reduce using rule 59 (factor -> factor1 varcte .)
    GTHANEQ         reduce using rule 59 (factor -> factor1 varcte .)
    LTHANEQ         reduce using rule 59 (factor -> factor1 varcte .)
    NOTEQUAL        reduce using rule 59 (factor -> factor1 varcte .)
    AND             reduce using rule 59 (factor -> factor1 varcte .)
    OR              reduce using rule 59 (factor -> factor1 varcte .)
    IDENTIFIER      reduce using rule 59 (factor -> factor1 varcte .)
    IF              reduce using rule 59 (factor -> factor1 varcte .)
    PRINT           reduce using rule 59 (factor -> factor1 varcte .)
    READ            reduce using rule 59 (factor -> factor1 varcte .)
    WHILE           reduce using rule 59 (factor -> factor1 varcte .)
    FOR             reduce using rule 59 (factor -> factor1 varcte .)
    VAR             reduce using rule 59 (factor -> factor1 varcte .)
    ELSEIF          reduce using rule 59 (factor -> factor1 varcte .)
    ENDIF           reduce using rule 59 (factor -> factor1 varcte .)
    ELSE            reduce using rule 59 (factor -> factor1 varcte .)
    COMMA           reduce using rule 59 (factor -> factor1 varcte .)
    ENDPROGRAM      reduce using rule 59 (factor -> factor1 varcte .)
    ENDWHILE        reduce using rule 59 (factor -> factor1 varcte .)
    ENDFOR          reduce using rule 59 (factor -> factor1 varcte .)
    RETURN          reduce using rule 59 (factor -> factor1 varcte .)
    ENDMETHOD       reduce using rule 59 (factor -> factor1 varcte .)
    RPARENTHESES    reduce using rule 59 (factor -> factor1 varcte .)


state 78

    (68) varcte -> llamarfun .

    LTHAN           reduce using rule 68 (varcte -> llamarfun .)
    GTHAN           reduce using rule 68 (varcte -> llamarfun .)
    EQUALTO         reduce using rule 68 (varcte -> llamarfun .)
    GTHANEQ         reduce using rule 68 (varcte -> llamarfun .)
    LTHANEQ         reduce using rule 68 (varcte -> llamarfun .)
    NOTEQUAL        reduce using rule 68 (varcte -> llamarfun .)
    AND             reduce using rule 68 (varcte -> llamarfun .)
    OR              reduce using rule 68 (varcte -> llamarfun .)
    COMMA           reduce using rule 68 (varcte -> llamarfun .)
    IDENTIFIER      reduce using rule 68 (varcte -> llamarfun .)
    IF              reduce using rule 68 (varcte -> llamarfun .)
    PRINT           reduce using rule 68 (varcte -> llamarfun .)
    READ            reduce using rule 68 (varcte -> llamarfun .)
    WHILE           reduce using rule 68 (varcte -> llamarfun .)
    FOR             reduce using rule 68 (varcte -> llamarfun .)
    VAR             reduce using rule 68 (varcte -> llamarfun .)
    ENDPROGRAM      reduce using rule 68 (varcte -> llamarfun .)
    ENDWHILE        reduce using rule 68 (varcte -> llamarfun .)
    ELSEIF          reduce using rule 68 (varcte -> llamarfun .)
    ENDIF           reduce using rule 68 (varcte -> llamarfun .)
    ELSE            reduce using rule 68 (varcte -> llamarfun .)
    ENDFOR          reduce using rule 68 (varcte -> llamarfun .)
    RETURN          reduce using rule 68 (varcte -> llamarfun .)
    ENDMETHOD       reduce using rule 68 (varcte -> llamarfun .)
    RPARENTHESES    reduce using rule 68 (varcte -> llamarfun .)
    MULTI           reduce using rule 68 (varcte -> llamarfun .)
    DIVIDE          reduce using rule 68 (varcte -> llamarfun .)
    PLUS            reduce using rule 68 (varcte -> llamarfun .)
    MINUS           reduce using rule 68 (varcte -> llamarfun .)


state 79

    (64) varcte -> CTEINT .

    LTHAN           reduce using rule 64 (varcte -> CTEINT .)
    GTHAN           reduce using rule 64 (varcte -> CTEINT .)
    EQUALTO         reduce using rule 64 (varcte -> CTEINT .)
    GTHANEQ         reduce using rule 64 (varcte -> CTEINT .)
    LTHANEQ         reduce using rule 64 (varcte -> CTEINT .)
    NOTEQUAL        reduce using rule 64 (varcte -> CTEINT .)
    AND             reduce using rule 64 (varcte -> CTEINT .)
    OR              reduce using rule 64 (varcte -> CTEINT .)
    COMMA           reduce using rule 64 (varcte -> CTEINT .)
    IDENTIFIER      reduce using rule 64 (varcte -> CTEINT .)
    IF              reduce using rule 64 (varcte -> CTEINT .)
    PRINT           reduce using rule 64 (varcte -> CTEINT .)
    READ            reduce using rule 64 (varcte -> CTEINT .)
    WHILE           reduce using rule 64 (varcte -> CTEINT .)
    FOR             reduce using rule 64 (varcte -> CTEINT .)
    VAR             reduce using rule 64 (varcte -> CTEINT .)
    ENDPROGRAM      reduce using rule 64 (varcte -> CTEINT .)
    ENDWHILE        reduce using rule 64 (varcte -> CTEINT .)
    ELSEIF          reduce using rule 64 (varcte -> CTEINT .)
    ENDIF           reduce using rule 64 (varcte -> CTEINT .)
    ELSE            reduce using rule 64 (varcte -> CTEINT .)
    ENDFOR          reduce using rule 64 (varcte -> CTEINT .)
    RETURN          reduce using rule 64 (varcte -> CTEINT .)
    ENDMETHOD       reduce using rule 64 (varcte -> CTEINT .)
    RPARENTHESES    reduce using rule 64 (varcte -> CTEINT .)
    MULTI           reduce using rule 64 (varcte -> CTEINT .)
    DIVIDE          reduce using rule 64 (varcte -> CTEINT .)
    PLUS            reduce using rule 64 (varcte -> CTEINT .)
    MINUS           reduce using rule 64 (varcte -> CTEINT .)


state 80

    (77) llamarfun -> CALLMETHOD . IDENTIFIER llamarfun1

    IDENTIFIER      shift and go to state 103


state 81

    (67) varcte -> FALSE .

    LTHAN           reduce using rule 67 (varcte -> FALSE .)
    GTHAN           reduce using rule 67 (varcte -> FALSE .)
    EQUALTO         reduce using rule 67 (varcte -> FALSE .)
    GTHANEQ         reduce using rule 67 (varcte -> FALSE .)
    LTHANEQ         reduce using rule 67 (varcte -> FALSE .)
    NOTEQUAL        reduce using rule 67 (varcte -> FALSE .)
    AND             reduce using rule 67 (varcte -> FALSE .)
    OR              reduce using rule 67 (varcte -> FALSE .)
    COMMA           reduce using rule 67 (varcte -> FALSE .)
    IDENTIFIER      reduce using rule 67 (varcte -> FALSE .)
    IF              reduce using rule 67 (varcte -> FALSE .)
    PRINT           reduce using rule 67 (varcte -> FALSE .)
    READ            reduce using rule 67 (varcte -> FALSE .)
    WHILE           reduce using rule 67 (varcte -> FALSE .)
    FOR             reduce using rule 67 (varcte -> FALSE .)
    VAR             reduce using rule 67 (varcte -> FALSE .)
    ENDPROGRAM      reduce using rule 67 (varcte -> FALSE .)
    ENDWHILE        reduce using rule 67 (varcte -> FALSE .)
    ELSEIF          reduce using rule 67 (varcte -> FALSE .)
    ENDIF           reduce using rule 67 (varcte -> FALSE .)
    ELSE            reduce using rule 67 (varcte -> FALSE .)
    ENDFOR          reduce using rule 67 (varcte -> FALSE .)
    RETURN          reduce using rule 67 (varcte -> FALSE .)
    ENDMETHOD       reduce using rule 67 (varcte -> FALSE .)
    RPARENTHESES    reduce using rule 67 (varcte -> FALSE .)
    MULTI           reduce using rule 67 (varcte -> FALSE .)
    DIVIDE          reduce using rule 67 (varcte -> FALSE .)
    PLUS            reduce using rule 67 (varcte -> FALSE .)
    MINUS           reduce using rule 67 (varcte -> FALSE .)


state 82

    (63) varcte -> IDENTIFIER .

    LTHAN           reduce using rule 63 (varcte -> IDENTIFIER .)
    GTHAN           reduce using rule 63 (varcte -> IDENTIFIER .)
    EQUALTO         reduce using rule 63 (varcte -> IDENTIFIER .)
    GTHANEQ         reduce using rule 63 (varcte -> IDENTIFIER .)
    LTHANEQ         reduce using rule 63 (varcte -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 63 (varcte -> IDENTIFIER .)
    AND             reduce using rule 63 (varcte -> IDENTIFIER .)
    OR              reduce using rule 63 (varcte -> IDENTIFIER .)
    COMMA           reduce using rule 63 (varcte -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 63 (varcte -> IDENTIFIER .)
    IF              reduce using rule 63 (varcte -> IDENTIFIER .)
    PRINT           reduce using rule 63 (varcte -> IDENTIFIER .)
    READ            reduce using rule 63 (varcte -> IDENTIFIER .)
    WHILE           reduce using rule 63 (varcte -> IDENTIFIER .)
    FOR             reduce using rule 63 (varcte -> IDENTIFIER .)
    VAR             reduce using rule 63 (varcte -> IDENTIFIER .)
    ENDPROGRAM      reduce using rule 63 (varcte -> IDENTIFIER .)
    ENDWHILE        reduce using rule 63 (varcte -> IDENTIFIER .)
    ELSEIF          reduce using rule 63 (varcte -> IDENTIFIER .)
    ENDIF           reduce using rule 63 (varcte -> IDENTIFIER .)
    ELSE            reduce using rule 63 (varcte -> IDENTIFIER .)
    ENDFOR          reduce using rule 63 (varcte -> IDENTIFIER .)
    RETURN          reduce using rule 63 (varcte -> IDENTIFIER .)
    ENDMETHOD       reduce using rule 63 (varcte -> IDENTIFIER .)
    RPARENTHESES    reduce using rule 63 (varcte -> IDENTIFIER .)
    MULTI           reduce using rule 63 (varcte -> IDENTIFIER .)
    DIVIDE          reduce using rule 63 (varcte -> IDENTIFIER .)
    PLUS            reduce using rule 63 (varcte -> IDENTIFIER .)
    MINUS           reduce using rule 63 (varcte -> IDENTIFIER .)


state 83

    (66) varcte -> TRUE .

    LTHAN           reduce using rule 66 (varcte -> TRUE .)
    GTHAN           reduce using rule 66 (varcte -> TRUE .)
    EQUALTO         reduce using rule 66 (varcte -> TRUE .)
    GTHANEQ         reduce using rule 66 (varcte -> TRUE .)
    LTHANEQ         reduce using rule 66 (varcte -> TRUE .)
    NOTEQUAL        reduce using rule 66 (varcte -> TRUE .)
    AND             reduce using rule 66 (varcte -> TRUE .)
    OR              reduce using rule 66 (varcte -> TRUE .)
    COMMA           reduce using rule 66 (varcte -> TRUE .)
    IDENTIFIER      reduce using rule 66 (varcte -> TRUE .)
    IF              reduce using rule 66 (varcte -> TRUE .)
    PRINT           reduce using rule 66 (varcte -> TRUE .)
    READ            reduce using rule 66 (varcte -> TRUE .)
    WHILE           reduce using rule 66 (varcte -> TRUE .)
    FOR             reduce using rule 66 (varcte -> TRUE .)
    VAR             reduce using rule 66 (varcte -> TRUE .)
    ENDPROGRAM      reduce using rule 66 (varcte -> TRUE .)
    ENDWHILE        reduce using rule 66 (varcte -> TRUE .)
    ELSEIF          reduce using rule 66 (varcte -> TRUE .)
    ENDIF           reduce using rule 66 (varcte -> TRUE .)
    ELSE            reduce using rule 66 (varcte -> TRUE .)
    ENDFOR          reduce using rule 66 (varcte -> TRUE .)
    RETURN          reduce using rule 66 (varcte -> TRUE .)
    ENDMETHOD       reduce using rule 66 (varcte -> TRUE .)
    RPARENTHESES    reduce using rule 66 (varcte -> TRUE .)
    MULTI           reduce using rule 66 (varcte -> TRUE .)
    DIVIDE          reduce using rule 66 (varcte -> TRUE .)
    PLUS            reduce using rule 66 (varcte -> TRUE .)
    MINUS           reduce using rule 66 (varcte -> TRUE .)


state 84

    (65) varcte -> CTEFLOAT .

    LTHAN           reduce using rule 65 (varcte -> CTEFLOAT .)
    GTHAN           reduce using rule 65 (varcte -> CTEFLOAT .)
    EQUALTO         reduce using rule 65 (varcte -> CTEFLOAT .)
    GTHANEQ         reduce using rule 65 (varcte -> CTEFLOAT .)
    LTHANEQ         reduce using rule 65 (varcte -> CTEFLOAT .)
    NOTEQUAL        reduce using rule 65 (varcte -> CTEFLOAT .)
    AND             reduce using rule 65 (varcte -> CTEFLOAT .)
    OR              reduce using rule 65 (varcte -> CTEFLOAT .)
    COMMA           reduce using rule 65 (varcte -> CTEFLOAT .)
    IDENTIFIER      reduce using rule 65 (varcte -> CTEFLOAT .)
    IF              reduce using rule 65 (varcte -> CTEFLOAT .)
    PRINT           reduce using rule 65 (varcte -> CTEFLOAT .)
    READ            reduce using rule 65 (varcte -> CTEFLOAT .)
    WHILE           reduce using rule 65 (varcte -> CTEFLOAT .)
    FOR             reduce using rule 65 (varcte -> CTEFLOAT .)
    VAR             reduce using rule 65 (varcte -> CTEFLOAT .)
    ENDPROGRAM      reduce using rule 65 (varcte -> CTEFLOAT .)
    ENDWHILE        reduce using rule 65 (varcte -> CTEFLOAT .)
    ELSEIF          reduce using rule 65 (varcte -> CTEFLOAT .)
    ENDIF           reduce using rule 65 (varcte -> CTEFLOAT .)
    ELSE            reduce using rule 65 (varcte -> CTEFLOAT .)
    ENDFOR          reduce using rule 65 (varcte -> CTEFLOAT .)
    RETURN          reduce using rule 65 (varcte -> CTEFLOAT .)
    ENDMETHOD       reduce using rule 65 (varcte -> CTEFLOAT .)
    RPARENTHESES    reduce using rule 65 (varcte -> CTEFLOAT .)
    MULTI           reduce using rule 65 (varcte -> CTEFLOAT .)
    DIVIDE          reduce using rule 65 (varcte -> CTEFLOAT .)
    PLUS            reduce using rule 65 (varcte -> CTEFLOAT .)
    MINUS           reduce using rule 65 (varcte -> CTEFLOAT .)


state 85

    (28) asignacion -> IDENTIFIER EQUAL expresion .

    IDENTIFIER      reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    IF              reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    PRINT           reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    READ            reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    WHILE           reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    FOR             reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    VAR             reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    ELSEIF          reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    ENDIF           reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    ELSE            reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    RETURN          reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    ENDPROGRAM      reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    ENDFOR          reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    ENDMETHOD       reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)
    ENDWHILE        reduce using rule 28 (asignacion -> IDENTIFIER EQUAL expresion .)


state 86

    (38) while -> WHILE expresion bloque . ENDWHILE

    ENDWHILE        shift and go to state 104


state 87

    (34) condicion -> IF expresion bloque . condicion1 ENDIF
    (35) condicion -> IF expresion bloque . condicion1 ELSE bloque ENDIF
    (36) condicion1 -> . empty
    (37) condicion1 -> . ELSEIF expresion bloque condicion1
    (81) empty -> .

    ELSEIF          shift and go to state 107
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)

    condicion1                     shift and go to state 106
    empty                          shift and go to state 105

state 88

    (5) funciones -> func . funciones
    (5) funciones -> . func funciones
    (6) funciones -> . voidfunc funciones
    (7) funciones -> . empty
    (69) func -> . METHOD tipo IDENTIFIER func1 bloque RETURN IDENTIFIER ENDMETHOD
    (70) voidfunc -> . METHOD VOID IDENTIFIER func1 bloque ENDMETHOD
    (81) empty -> .

    METHOD          shift and go to state 90
    $end            reduce using rule 81 (empty -> .)

    voidfunc                       shift and go to state 92
    empty                          shift and go to state 91
    funciones                      shift and go to state 108
    func                           shift and go to state 88

state 89

    (3) programa -> PROGRAM bloque ENDPROGRAM funciones .

    $end            reduce using rule 3 (programa -> PROGRAM bloque ENDPROGRAM funciones .)


state 90

    (69) func -> METHOD . tipo IDENTIFIER func1 bloque RETURN IDENTIFIER ENDMETHOD
    (70) voidfunc -> METHOD . VOID IDENTIFIER func1 bloque ENDMETHOD
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . STRING
    (16) tipo -> . BOOL
    (17) tipo -> . HASH

    VOID            shift and go to state 110
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 11
    HASH            shift and go to state 6

    tipo                           shift and go to state 109

state 91

    (7) funciones -> empty .

    $end            reduce using rule 7 (funciones -> empty .)


state 92

    (6) funciones -> voidfunc . funciones
    (5) funciones -> . func funciones
    (6) funciones -> . voidfunc funciones
    (7) funciones -> . empty
    (69) func -> . METHOD tipo IDENTIFIER func1 bloque RETURN IDENTIFIER ENDMETHOD
    (70) voidfunc -> . METHOD VOID IDENTIFIER func1 bloque ENDMETHOD
    (81) empty -> .

    METHOD          shift and go to state 90
    $end            reduce using rule 81 (empty -> .)

    funciones                      shift and go to state 111
    empty                          shift and go to state 91
    voidfunc                       shift and go to state 92
    func                           shift and go to state 88

state 93

    (39) for -> FOR CTEINT bloque . ENDFOR

    ENDFOR          shift and go to state 112


state 94

    (12) vars2 -> COMMA IDENTIFIER . vars2
    (11) vars2 -> . empty
    (12) vars2 -> . COMMA IDENTIFIER vars2
    (81) empty -> .

    COMMA           shift and go to state 51
    ENDGLOBAL       reduce using rule 81 (empty -> .)
    ENDVAR          reduce using rule 81 (empty -> .)

    vars2                          shift and go to state 113
    empty                          shift and go to state 53

state 95

    (4) programa -> global PROGRAM bloque ENDPROGRAM funciones .

    $end            reduce using rule 4 (programa -> global PROGRAM bloque ENDPROGRAM funciones .)


state 96

    (32) escritura2 -> COMMA escritura1 .

    IDENTIFIER      reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    IF              reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    PRINT           reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    READ            reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    WHILE           reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    FOR             reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    VAR             reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    ENDPROGRAM      reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    ENDWHILE        reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    ELSEIF          reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    ENDIF           reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    ELSE            reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    ENDFOR          reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    RETURN          reduce using rule 32 (escritura2 -> COMMA escritura1 .)
    ENDMETHOD       reduce using rule 32 (escritura2 -> COMMA escritura1 .)


state 97

    (52) exp1 -> PLUS termino . exp1
    (51) exp1 -> . empty
    (52) exp1 -> . PLUS termino exp1
    (53) exp1 -> . MINUS termino exp1
    (81) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    LTHAN           reduce using rule 81 (empty -> .)
    GTHAN           reduce using rule 81 (empty -> .)
    EQUALTO         reduce using rule 81 (empty -> .)
    GTHANEQ         reduce using rule 81 (empty -> .)
    LTHANEQ         reduce using rule 81 (empty -> .)
    NOTEQUAL        reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    ENDWHILE        reduce using rule 81 (empty -> .)
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    ENDFOR          reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)
    RPARENTHESES    reduce using rule 81 (empty -> .)
    MULTI           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)

  ! PLUS            [ reduce using rule 81 (empty -> .) ]
  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    exp1                           shift and go to state 114
    empty                          shift and go to state 62

state 98

    (53) exp1 -> MINUS termino . exp1
    (51) exp1 -> . empty
    (52) exp1 -> . PLUS termino exp1
    (53) exp1 -> . MINUS termino exp1
    (81) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    LTHAN           reduce using rule 81 (empty -> .)
    GTHAN           reduce using rule 81 (empty -> .)
    EQUALTO         reduce using rule 81 (empty -> .)
    GTHANEQ         reduce using rule 81 (empty -> .)
    LTHANEQ         reduce using rule 81 (empty -> .)
    NOTEQUAL        reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    ENDWHILE        reduce using rule 81 (empty -> .)
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    ENDFOR          reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)
    RPARENTHESES    reduce using rule 81 (empty -> .)
    MULTI           reduce using rule 81 (empty -> .)
    DIVIDE          reduce using rule 81 (empty -> .)

  ! PLUS            [ reduce using rule 81 (empty -> .) ]
  ! MINUS           [ reduce using rule 81 (empty -> .) ]

    exp1                           shift and go to state 115
    empty                          shift and go to state 62

state 99

    (41) expresion -> exp expresion1 exp .

    RPARENTHESES    reduce using rule 41 (expresion -> exp expresion1 exp .)
    LTHAN           reduce using rule 41 (expresion -> exp expresion1 exp .)
    GTHAN           reduce using rule 41 (expresion -> exp expresion1 exp .)
    EQUALTO         reduce using rule 41 (expresion -> exp expresion1 exp .)
    GTHANEQ         reduce using rule 41 (expresion -> exp expresion1 exp .)
    LTHANEQ         reduce using rule 41 (expresion -> exp expresion1 exp .)
    NOTEQUAL        reduce using rule 41 (expresion -> exp expresion1 exp .)
    AND             reduce using rule 41 (expresion -> exp expresion1 exp .)
    OR              reduce using rule 41 (expresion -> exp expresion1 exp .)
    COMMA           reduce using rule 41 (expresion -> exp expresion1 exp .)
    IDENTIFIER      reduce using rule 41 (expresion -> exp expresion1 exp .)
    IF              reduce using rule 41 (expresion -> exp expresion1 exp .)
    PRINT           reduce using rule 41 (expresion -> exp expresion1 exp .)
    READ            reduce using rule 41 (expresion -> exp expresion1 exp .)
    WHILE           reduce using rule 41 (expresion -> exp expresion1 exp .)
    FOR             reduce using rule 41 (expresion -> exp expresion1 exp .)
    VAR             reduce using rule 41 (expresion -> exp expresion1 exp .)
    ENDPROGRAM      reduce using rule 41 (expresion -> exp expresion1 exp .)
    ENDWHILE        reduce using rule 41 (expresion -> exp expresion1 exp .)
    ELSEIF          reduce using rule 41 (expresion -> exp expresion1 exp .)
    ENDIF           reduce using rule 41 (expresion -> exp expresion1 exp .)
    ELSE            reduce using rule 41 (expresion -> exp expresion1 exp .)
    ENDFOR          reduce using rule 41 (expresion -> exp expresion1 exp .)
    RETURN          reduce using rule 41 (expresion -> exp expresion1 exp .)
    ENDMETHOD       reduce using rule 41 (expresion -> exp expresion1 exp .)
    MULTI           reduce using rule 41 (expresion -> exp expresion1 exp .)
    DIVIDE          reduce using rule 41 (expresion -> exp expresion1 exp .)
    PLUS            reduce using rule 41 (expresion -> exp expresion1 exp .)
    MINUS           reduce using rule 41 (expresion -> exp expresion1 exp .)


state 100

    (56) termino1 -> MULTI factor . termino1
    (55) termino1 -> . empty
    (56) termino1 -> . MULTI factor termino1
    (57) termino1 -> . DIVIDE factor termino1
    (81) empty -> .

  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    MULTI           shift and go to state 73
    DIVIDE          shift and go to state 74
    LTHAN           reduce using rule 81 (empty -> .)
    GTHAN           reduce using rule 81 (empty -> .)
    EQUALTO         reduce using rule 81 (empty -> .)
    GTHANEQ         reduce using rule 81 (empty -> .)
    LTHANEQ         reduce using rule 81 (empty -> .)
    NOTEQUAL        reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    ENDWHILE        reduce using rule 81 (empty -> .)
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    ENDFOR          reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)
    RPARENTHESES    reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    MINUS           reduce using rule 81 (empty -> .)

  ! MULTI           [ reduce using rule 81 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 81 (empty -> .) ]

    termino1                       shift and go to state 116
    empty                          shift and go to state 75

state 101

    (57) termino1 -> DIVIDE factor . termino1
    (55) termino1 -> . empty
    (56) termino1 -> . MULTI factor termino1
    (57) termino1 -> . DIVIDE factor termino1
    (81) empty -> .

  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    MULTI           shift and go to state 73
    DIVIDE          shift and go to state 74
    LTHAN           reduce using rule 81 (empty -> .)
    GTHAN           reduce using rule 81 (empty -> .)
    EQUALTO         reduce using rule 81 (empty -> .)
    GTHANEQ         reduce using rule 81 (empty -> .)
    LTHANEQ         reduce using rule 81 (empty -> .)
    NOTEQUAL        reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    ENDWHILE        reduce using rule 81 (empty -> .)
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    ENDFOR          reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)
    RPARENTHESES    reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    MINUS           reduce using rule 81 (empty -> .)

  ! MULTI           [ reduce using rule 81 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 81 (empty -> .) ]

    termino1                       shift and go to state 117
    empty                          shift and go to state 75

state 102

    (58) factor -> LPARENTHESES expresion RPARENTHESES .

    MULTI           reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    DIVIDE          reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    PLUS            reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    MINUS           reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    LTHAN           reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    GTHAN           reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    EQUALTO         reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    GTHANEQ         reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    LTHANEQ         reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    NOTEQUAL        reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    AND             reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    OR              reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    IDENTIFIER      reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    IF              reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    PRINT           reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    READ            reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    WHILE           reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    FOR             reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    VAR             reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    ELSEIF          reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    ENDIF           reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    ELSE            reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    COMMA           reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    ENDPROGRAM      reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    ENDWHILE        reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    ENDFOR          reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    RETURN          reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    ENDMETHOD       reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)
    RPARENTHESES    reduce using rule 58 (factor -> LPARENTHESES expresion RPARENTHESES .)


state 103

    (77) llamarfun -> CALLMETHOD IDENTIFIER . llamarfun1
    (78) llamarfun1 -> . expresion
    (79) llamarfun1 -> . expresion COMMA llamarfun1
    (80) llamarfun1 -> . empty
    (40) expresion -> . exp
    (41) expresion -> . exp expresion1 exp
    (81) empty -> .
    (50) exp -> . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE

  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    LTHAN           reduce using rule 81 (empty -> .)
    GTHAN           reduce using rule 81 (empty -> .)
    EQUALTO         reduce using rule 81 (empty -> .)
    GTHANEQ         reduce using rule 81 (empty -> .)
    LTHANEQ         reduce using rule 81 (empty -> .)
    NOTEQUAL        reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    ENDWHILE        reduce using rule 81 (empty -> .)
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    ENDFOR          reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)
    RPARENTHESES    reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    MINUS           reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)
    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41

  ! MULTI           [ reduce using rule 81 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 81 (empty -> .) ]

    termino                        shift and go to state 36
    factor                         shift and go to state 38
    expresion                      shift and go to state 118
    empty                          shift and go to state 119
    llamarfun1                     shift and go to state 120
    factor1                        shift and go to state 44
    exp                            shift and go to state 37

state 104

    (38) while -> WHILE expresion bloque ENDWHILE .

    IDENTIFIER      reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    IF              reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    PRINT           reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    READ            reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    WHILE           reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    FOR             reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    VAR             reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    ENDMETHOD       reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    ENDIF           reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    ENDPROGRAM      reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    ENDWHILE        reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    ELSEIF          reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    ELSE            reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    ENDFOR          reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)
    RETURN          reduce using rule 38 (while -> WHILE expresion bloque ENDWHILE .)


state 105

    (36) condicion1 -> empty .

    ENDIF           reduce using rule 36 (condicion1 -> empty .)
    ELSE            reduce using rule 36 (condicion1 -> empty .)


state 106

    (34) condicion -> IF expresion bloque condicion1 . ENDIF
    (35) condicion -> IF expresion bloque condicion1 . ELSE bloque ENDIF

    ENDIF           shift and go to state 121
    ELSE            shift and go to state 122


state 107

    (37) condicion1 -> ELSEIF . expresion bloque condicion1
    (40) expresion -> . exp
    (41) expresion -> . exp expresion1 exp
    (50) exp -> . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE
    (81) empty -> .

    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41
    IDENTIFIER      reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)

    termino                        shift and go to state 36
    expresion                      shift and go to state 123
    factor1                        shift and go to state 44
    exp                            shift and go to state 37
    factor                         shift and go to state 38
    empty                          shift and go to state 42

state 108

    (5) funciones -> func funciones .

    $end            reduce using rule 5 (funciones -> func funciones .)


state 109

    (69) func -> METHOD tipo . IDENTIFIER func1 bloque RETURN IDENTIFIER ENDMETHOD

    IDENTIFIER      shift and go to state 124


state 110

    (70) voidfunc -> METHOD VOID . IDENTIFIER func1 bloque ENDMETHOD

    IDENTIFIER      shift and go to state 125


state 111

    (6) funciones -> voidfunc funciones .

    $end            reduce using rule 6 (funciones -> voidfunc funciones .)


state 112

    (39) for -> FOR CTEINT bloque ENDFOR .

    IDENTIFIER      reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    IF              reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    PRINT           reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    READ            reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    WHILE           reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    FOR             reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    VAR             reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    ENDPROGRAM      reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    ELSEIF          reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    ENDIF           reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    ELSE            reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    ENDWHILE        reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    ENDFOR          reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    RETURN          reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)
    ENDMETHOD       reduce using rule 39 (for -> FOR CTEINT bloque ENDFOR .)


state 113

    (12) vars2 -> COMMA IDENTIFIER vars2 .

    ENDGLOBAL       reduce using rule 12 (vars2 -> COMMA IDENTIFIER vars2 .)
    ENDVAR          reduce using rule 12 (vars2 -> COMMA IDENTIFIER vars2 .)


state 114

    (52) exp1 -> PLUS termino exp1 .

    LTHAN           reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    GTHAN           reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    EQUALTO         reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    GTHANEQ         reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    LTHANEQ         reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    NOTEQUAL        reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    AND             reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    OR              reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    COMMA           reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    IDENTIFIER      reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    IF              reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    PRINT           reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    READ            reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    WHILE           reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    FOR             reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    VAR             reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    ENDPROGRAM      reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    ENDWHILE        reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    ELSEIF          reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    ENDIF           reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    ELSE            reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    ENDFOR          reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    RETURN          reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    ENDMETHOD       reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    RPARENTHESES    reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    MULTI           reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    DIVIDE          reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    PLUS            reduce using rule 52 (exp1 -> PLUS termino exp1 .)
    MINUS           reduce using rule 52 (exp1 -> PLUS termino exp1 .)


state 115

    (53) exp1 -> MINUS termino exp1 .

    LTHAN           reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    GTHAN           reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    EQUALTO         reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    GTHANEQ         reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    LTHANEQ         reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    NOTEQUAL        reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    AND             reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    OR              reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    COMMA           reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    IDENTIFIER      reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    IF              reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    PRINT           reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    READ            reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    WHILE           reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    FOR             reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    VAR             reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    ENDPROGRAM      reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    ENDWHILE        reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    ELSEIF          reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    ENDIF           reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    ELSE            reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    ENDFOR          reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    RETURN          reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    ENDMETHOD       reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    RPARENTHESES    reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    MULTI           reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    DIVIDE          reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    PLUS            reduce using rule 53 (exp1 -> MINUS termino exp1 .)
    MINUS           reduce using rule 53 (exp1 -> MINUS termino exp1 .)


state 116

    (56) termino1 -> MULTI factor termino1 .

    LTHAN           reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    GTHAN           reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    EQUALTO         reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    GTHANEQ         reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    LTHANEQ         reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    NOTEQUAL        reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    AND             reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    OR              reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    COMMA           reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    IDENTIFIER      reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    IF              reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    PRINT           reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    READ            reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    WHILE           reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    FOR             reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    VAR             reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    ENDPROGRAM      reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    ENDWHILE        reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    ELSEIF          reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    ENDIF           reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    ELSE            reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    ENDFOR          reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    RETURN          reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    ENDMETHOD       reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    RPARENTHESES    reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    MULTI           reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    DIVIDE          reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    PLUS            reduce using rule 56 (termino1 -> MULTI factor termino1 .)
    MINUS           reduce using rule 56 (termino1 -> MULTI factor termino1 .)


state 117

    (57) termino1 -> DIVIDE factor termino1 .

    LTHAN           reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    GTHAN           reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    EQUALTO         reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    GTHANEQ         reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    LTHANEQ         reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    NOTEQUAL        reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    AND             reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    OR              reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    COMMA           reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    IDENTIFIER      reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    IF              reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    PRINT           reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    READ            reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    WHILE           reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    FOR             reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    VAR             reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    ENDPROGRAM      reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    ENDWHILE        reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    ELSEIF          reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    ENDIF           reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    ELSE            reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    ENDFOR          reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    RETURN          reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    ENDMETHOD       reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    RPARENTHESES    reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    MULTI           reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    DIVIDE          reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    PLUS            reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)
    MINUS           reduce using rule 57 (termino1 -> DIVIDE factor termino1 .)


state 118

    (78) llamarfun1 -> expresion .
    (79) llamarfun1 -> expresion . COMMA llamarfun1

  ! shift/reduce conflict for COMMA resolved as shift
    LTHAN           reduce using rule 78 (llamarfun1 -> expresion .)
    GTHAN           reduce using rule 78 (llamarfun1 -> expresion .)
    EQUALTO         reduce using rule 78 (llamarfun1 -> expresion .)
    GTHANEQ         reduce using rule 78 (llamarfun1 -> expresion .)
    LTHANEQ         reduce using rule 78 (llamarfun1 -> expresion .)
    NOTEQUAL        reduce using rule 78 (llamarfun1 -> expresion .)
    AND             reduce using rule 78 (llamarfun1 -> expresion .)
    OR              reduce using rule 78 (llamarfun1 -> expresion .)
    IDENTIFIER      reduce using rule 78 (llamarfun1 -> expresion .)
    IF              reduce using rule 78 (llamarfun1 -> expresion .)
    PRINT           reduce using rule 78 (llamarfun1 -> expresion .)
    READ            reduce using rule 78 (llamarfun1 -> expresion .)
    WHILE           reduce using rule 78 (llamarfun1 -> expresion .)
    FOR             reduce using rule 78 (llamarfun1 -> expresion .)
    VAR             reduce using rule 78 (llamarfun1 -> expresion .)
    ENDPROGRAM      reduce using rule 78 (llamarfun1 -> expresion .)
    ENDWHILE        reduce using rule 78 (llamarfun1 -> expresion .)
    ELSEIF          reduce using rule 78 (llamarfun1 -> expresion .)
    ENDIF           reduce using rule 78 (llamarfun1 -> expresion .)
    ELSE            reduce using rule 78 (llamarfun1 -> expresion .)
    ENDFOR          reduce using rule 78 (llamarfun1 -> expresion .)
    RETURN          reduce using rule 78 (llamarfun1 -> expresion .)
    ENDMETHOD       reduce using rule 78 (llamarfun1 -> expresion .)
    RPARENTHESES    reduce using rule 78 (llamarfun1 -> expresion .)
    MULTI           reduce using rule 78 (llamarfun1 -> expresion .)
    DIVIDE          reduce using rule 78 (llamarfun1 -> expresion .)
    PLUS            reduce using rule 78 (llamarfun1 -> expresion .)
    MINUS           reduce using rule 78 (llamarfun1 -> expresion .)
    COMMA           shift and go to state 126

  ! COMMA           [ reduce using rule 78 (llamarfun1 -> expresion .) ]


state 119

    (80) llamarfun1 -> empty .
    (60) factor1 -> empty .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 60 (factor1 -> empty .)
    LTHAN           reduce using rule 80 (llamarfun1 -> empty .)
    GTHAN           reduce using rule 80 (llamarfun1 -> empty .)
    EQUALTO         reduce using rule 80 (llamarfun1 -> empty .)
    GTHANEQ         reduce using rule 80 (llamarfun1 -> empty .)
    LTHANEQ         reduce using rule 80 (llamarfun1 -> empty .)
    NOTEQUAL        reduce using rule 80 (llamarfun1 -> empty .)
    AND             reduce using rule 80 (llamarfun1 -> empty .)
    OR              reduce using rule 80 (llamarfun1 -> empty .)
    COMMA           reduce using rule 80 (llamarfun1 -> empty .)
    IF              reduce using rule 80 (llamarfun1 -> empty .)
    PRINT           reduce using rule 80 (llamarfun1 -> empty .)
    READ            reduce using rule 80 (llamarfun1 -> empty .)
    WHILE           reduce using rule 80 (llamarfun1 -> empty .)
    FOR             reduce using rule 80 (llamarfun1 -> empty .)
    VAR             reduce using rule 80 (llamarfun1 -> empty .)
    ENDPROGRAM      reduce using rule 80 (llamarfun1 -> empty .)
    ENDWHILE        reduce using rule 80 (llamarfun1 -> empty .)
    ELSEIF          reduce using rule 80 (llamarfun1 -> empty .)
    ENDIF           reduce using rule 80 (llamarfun1 -> empty .)
    ELSE            reduce using rule 80 (llamarfun1 -> empty .)
    ENDFOR          reduce using rule 80 (llamarfun1 -> empty .)
    RETURN          reduce using rule 80 (llamarfun1 -> empty .)
    ENDMETHOD       reduce using rule 80 (llamarfun1 -> empty .)
    RPARENTHESES    reduce using rule 80 (llamarfun1 -> empty .)
    MULTI           reduce using rule 80 (llamarfun1 -> empty .)
    DIVIDE          reduce using rule 80 (llamarfun1 -> empty .)
    PLUS            reduce using rule 80 (llamarfun1 -> empty .)
    MINUS           reduce using rule 80 (llamarfun1 -> empty .)
    IDENTIFIER      reduce using rule 60 (factor1 -> empty .)
    CTEINT          reduce using rule 60 (factor1 -> empty .)
    CTEFLOAT        reduce using rule 60 (factor1 -> empty .)
    TRUE            reduce using rule 60 (factor1 -> empty .)
    FALSE           reduce using rule 60 (factor1 -> empty .)
    CALLMETHOD      reduce using rule 60 (factor1 -> empty .)

  ! IDENTIFIER      [ reduce using rule 80 (llamarfun1 -> empty .) ]


state 120

    (77) llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .

    LTHAN           reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    GTHAN           reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    EQUALTO         reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    GTHANEQ         reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    LTHANEQ         reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    NOTEQUAL        reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    AND             reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    OR              reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    COMMA           reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    IDENTIFIER      reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    IF              reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    PRINT           reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    READ            reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    WHILE           reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    FOR             reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    VAR             reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    ENDPROGRAM      reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    ENDWHILE        reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    ELSEIF          reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    ENDIF           reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    ELSE            reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    ENDFOR          reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    RETURN          reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    ENDMETHOD       reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    RPARENTHESES    reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    MULTI           reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    DIVIDE          reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    PLUS            reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)
    MINUS           reduce using rule 77 (llamarfun -> CALLMETHOD IDENTIFIER llamarfun1 .)


state 121

    (34) condicion -> IF expresion bloque condicion1 ENDIF .

    IDENTIFIER      reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    IF              reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    PRINT           reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    READ            reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    WHILE           reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    FOR             reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    VAR             reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    ELSEIF          reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    ENDIF           reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    ELSE            reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    ENDWHILE        reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    ENDPROGRAM      reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    ENDFOR          reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    ENDMETHOD       reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)
    RETURN          reduce using rule 34 (condicion -> IF expresion bloque condicion1 ENDIF .)


state 122

    (35) condicion -> IF expresion bloque condicion1 ELSE . bloque ENDIF
    (18) bloque -> . empty
    (19) bloque -> . estatuto bloque
    (81) empty -> .
    (20) estatuto -> . asignacion
    (21) estatuto -> . condicion
    (22) estatuto -> . escritura
    (23) estatuto -> . lectura
    (24) estatuto -> . while
    (25) estatuto -> . for
    (26) estatuto -> . vars
    (27) estatuto -> . empty
    (28) asignacion -> . IDENTIFIER EQUAL expresion
    (34) condicion -> . IF expresion bloque condicion1 ENDIF
    (35) condicion -> . IF expresion bloque condicion1 ELSE bloque ENDIF
    (29) escritura -> . PRINT escritura1
    (33) lectura -> . READ IDENTIFIER
    (38) while -> . WHILE expresion bloque ENDWHILE
    (39) for -> . FOR CTEINT bloque ENDFOR
    (8) vars -> . VAR vars1 ENDVAR

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    ENDIF           reduce using rule 81 (empty -> .)
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 17
    READ            shift and go to state 29
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    VAR             shift and go to state 16

  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! READ            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! VAR             [ reduce using rule 81 (empty -> .) ]

    estatuto                       shift and go to state 13
    escritura                      shift and go to state 21
    condicion                      shift and go to state 15
    for                            shift and go to state 14
    while                          shift and go to state 23
    asignacion                     shift and go to state 18
    empty                          shift and go to state 19
    lectura                        shift and go to state 25
    bloque                         shift and go to state 127
    vars                           shift and go to state 24

state 123

    (37) condicion1 -> ELSEIF expresion . bloque condicion1
    (18) bloque -> . empty
    (19) bloque -> . estatuto bloque
    (81) empty -> .
    (20) estatuto -> . asignacion
    (21) estatuto -> . condicion
    (22) estatuto -> . escritura
    (23) estatuto -> . lectura
    (24) estatuto -> . while
    (25) estatuto -> . for
    (26) estatuto -> . vars
    (27) estatuto -> . empty
    (28) asignacion -> . IDENTIFIER EQUAL expresion
    (34) condicion -> . IF expresion bloque condicion1 ENDIF
    (35) condicion -> . IF expresion bloque condicion1 ELSE bloque ENDIF
    (29) escritura -> . PRINT escritura1
    (33) lectura -> . READ IDENTIFIER
    (38) while -> . WHILE expresion bloque ENDWHILE
    (39) for -> . FOR CTEINT bloque ENDFOR
    (8) vars -> . VAR vars1 ENDVAR

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 17
    READ            shift and go to state 29
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    VAR             shift and go to state 16

  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! READ            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! VAR             [ reduce using rule 81 (empty -> .) ]

    estatuto                       shift and go to state 13
    escritura                      shift and go to state 21
    condicion                      shift and go to state 15
    for                            shift and go to state 14
    while                          shift and go to state 23
    asignacion                     shift and go to state 18
    empty                          shift and go to state 19
    lectura                        shift and go to state 25
    bloque                         shift and go to state 128
    vars                           shift and go to state 24

state 124

    (69) func -> METHOD tipo IDENTIFIER . func1 bloque RETURN IDENTIFIER ENDMETHOD
    (71) func1 -> . tipo func2
    (72) func1 -> . tipo func2 COMMA func1
    (73) func1 -> . empty
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . STRING
    (16) tipo -> . BOOL
    (17) tipo -> . HASH
    (81) empty -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 11
    HASH            shift and go to state 6
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)

    tipo                           shift and go to state 129
    func1                          shift and go to state 130
    empty                          shift and go to state 131

state 125

    (70) voidfunc -> METHOD VOID IDENTIFIER . func1 bloque ENDMETHOD
    (71) func1 -> . tipo func2
    (72) func1 -> . tipo func2 COMMA func1
    (73) func1 -> . empty
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . STRING
    (16) tipo -> . BOOL
    (17) tipo -> . HASH
    (81) empty -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 11
    HASH            shift and go to state 6
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)

    tipo                           shift and go to state 129
    func1                          shift and go to state 132
    empty                          shift and go to state 131

state 126

    (79) llamarfun1 -> expresion COMMA . llamarfun1
    (78) llamarfun1 -> . expresion
    (79) llamarfun1 -> . expresion COMMA llamarfun1
    (80) llamarfun1 -> . empty
    (40) expresion -> . exp
    (41) expresion -> . exp expresion1 exp
    (81) empty -> .
    (50) exp -> . termino exp1
    (54) termino -> . factor termino1
    (58) factor -> . LPARENTHESES expresion RPARENTHESES
    (59) factor -> . factor1 varcte
    (60) factor1 -> . empty
    (61) factor1 -> . MULTI
    (62) factor1 -> . DIVIDE

  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    LTHAN           reduce using rule 81 (empty -> .)
    GTHAN           reduce using rule 81 (empty -> .)
    EQUALTO         reduce using rule 81 (empty -> .)
    GTHANEQ         reduce using rule 81 (empty -> .)
    LTHANEQ         reduce using rule 81 (empty -> .)
    NOTEQUAL        reduce using rule 81 (empty -> .)
    AND             reduce using rule 81 (empty -> .)
    OR              reduce using rule 81 (empty -> .)
    COMMA           reduce using rule 81 (empty -> .)
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    ENDPROGRAM      reduce using rule 81 (empty -> .)
    ENDWHILE        reduce using rule 81 (empty -> .)
    ELSEIF          reduce using rule 81 (empty -> .)
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)
    ENDFOR          reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)
    RPARENTHESES    reduce using rule 81 (empty -> .)
    PLUS            reduce using rule 81 (empty -> .)
    MINUS           reduce using rule 81 (empty -> .)
    CTEINT          reduce using rule 81 (empty -> .)
    CTEFLOAT        reduce using rule 81 (empty -> .)
    TRUE            reduce using rule 81 (empty -> .)
    FALSE           reduce using rule 81 (empty -> .)
    CALLMETHOD      reduce using rule 81 (empty -> .)
    LPARENTHESES    shift and go to state 40
    MULTI           shift and go to state 43
    DIVIDE          shift and go to state 41

  ! MULTI           [ reduce using rule 81 (empty -> .) ]
  ! DIVIDE          [ reduce using rule 81 (empty -> .) ]

    termino                        shift and go to state 36
    factor                         shift and go to state 38
    expresion                      shift and go to state 118
    empty                          shift and go to state 119
    llamarfun1                     shift and go to state 133
    factor1                        shift and go to state 44
    exp                            shift and go to state 37

state 127

    (35) condicion -> IF expresion bloque condicion1 ELSE bloque . ENDIF

    ENDIF           shift and go to state 134


state 128

    (37) condicion1 -> ELSEIF expresion bloque . condicion1
    (36) condicion1 -> . empty
    (37) condicion1 -> . ELSEIF expresion bloque condicion1
    (81) empty -> .

    ELSEIF          shift and go to state 107
    ENDIF           reduce using rule 81 (empty -> .)
    ELSE            reduce using rule 81 (empty -> .)

    condicion1                     shift and go to state 135
    empty                          shift and go to state 105

state 129

    (71) func1 -> tipo . func2
    (72) func1 -> tipo . func2 COMMA func1
    (74) func2 -> . IDENTIFIER
    (75) func2 -> . REFERENCIA
    (76) func2 -> . VALOR

    IDENTIFIER      shift and go to state 139
    REFERENCIA      shift and go to state 137
    VALOR           shift and go to state 136

    func2                          shift and go to state 138

state 130

    (69) func -> METHOD tipo IDENTIFIER func1 . bloque RETURN IDENTIFIER ENDMETHOD
    (18) bloque -> . empty
    (19) bloque -> . estatuto bloque
    (81) empty -> .
    (20) estatuto -> . asignacion
    (21) estatuto -> . condicion
    (22) estatuto -> . escritura
    (23) estatuto -> . lectura
    (24) estatuto -> . while
    (25) estatuto -> . for
    (26) estatuto -> . vars
    (27) estatuto -> . empty
    (28) asignacion -> . IDENTIFIER EQUAL expresion
    (34) condicion -> . IF expresion bloque condicion1 ENDIF
    (35) condicion -> . IF expresion bloque condicion1 ELSE bloque ENDIF
    (29) escritura -> . PRINT escritura1
    (33) lectura -> . READ IDENTIFIER
    (38) while -> . WHILE expresion bloque ENDWHILE
    (39) for -> . FOR CTEINT bloque ENDFOR
    (8) vars -> . VAR vars1 ENDVAR

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    RETURN          reduce using rule 81 (empty -> .)
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 17
    READ            shift and go to state 29
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    VAR             shift and go to state 16

  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! READ            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! VAR             [ reduce using rule 81 (empty -> .) ]

    escritura                      shift and go to state 21
    estatuto                       shift and go to state 13
    condicion                      shift and go to state 15
    for                            shift and go to state 14
    while                          shift and go to state 23
    asignacion                     shift and go to state 18
    empty                          shift and go to state 19
    lectura                        shift and go to state 25
    bloque                         shift and go to state 140
    vars                           shift and go to state 24

state 131

    (73) func1 -> empty .

    IDENTIFIER      reduce using rule 73 (func1 -> empty .)
    IF              reduce using rule 73 (func1 -> empty .)
    PRINT           reduce using rule 73 (func1 -> empty .)
    READ            reduce using rule 73 (func1 -> empty .)
    WHILE           reduce using rule 73 (func1 -> empty .)
    FOR             reduce using rule 73 (func1 -> empty .)
    VAR             reduce using rule 73 (func1 -> empty .)
    RETURN          reduce using rule 73 (func1 -> empty .)
    ENDMETHOD       reduce using rule 73 (func1 -> empty .)


state 132

    (70) voidfunc -> METHOD VOID IDENTIFIER func1 . bloque ENDMETHOD
    (18) bloque -> . empty
    (19) bloque -> . estatuto bloque
    (81) empty -> .
    (20) estatuto -> . asignacion
    (21) estatuto -> . condicion
    (22) estatuto -> . escritura
    (23) estatuto -> . lectura
    (24) estatuto -> . while
    (25) estatuto -> . for
    (26) estatuto -> . vars
    (27) estatuto -> . empty
    (28) asignacion -> . IDENTIFIER EQUAL expresion
    (34) condicion -> . IF expresion bloque condicion1 ENDIF
    (35) condicion -> . IF expresion bloque condicion1 ELSE bloque ENDIF
    (29) escritura -> . PRINT escritura1
    (33) lectura -> . READ IDENTIFIER
    (38) while -> . WHILE expresion bloque ENDWHILE
    (39) for -> . FOR CTEINT bloque ENDFOR
    (8) vars -> . VAR vars1 ENDVAR

  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    ENDMETHOD       reduce using rule 81 (empty -> .)
    IDENTIFIER      shift and go to state 20
    IF              shift and go to state 26
    PRINT           shift and go to state 17
    READ            shift and go to state 29
    WHILE           shift and go to state 22
    FOR             shift and go to state 28
    VAR             shift and go to state 16

  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! READ            [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! VAR             [ reduce using rule 81 (empty -> .) ]

    estatuto                       shift and go to state 13
    escritura                      shift and go to state 21
    condicion                      shift and go to state 15
    for                            shift and go to state 14
    while                          shift and go to state 23
    asignacion                     shift and go to state 18
    empty                          shift and go to state 19
    lectura                        shift and go to state 25
    bloque                         shift and go to state 141
    vars                           shift and go to state 24

state 133

    (79) llamarfun1 -> expresion COMMA llamarfun1 .

    LTHAN           reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    GTHAN           reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    EQUALTO         reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    GTHANEQ         reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    LTHANEQ         reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    NOTEQUAL        reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    AND             reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    OR              reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    COMMA           reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    IDENTIFIER      reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    IF              reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    PRINT           reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    READ            reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    WHILE           reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    FOR             reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    VAR             reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    ENDPROGRAM      reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    ENDWHILE        reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    ELSEIF          reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    ENDIF           reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    ELSE            reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    ENDFOR          reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    RETURN          reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    ENDMETHOD       reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    RPARENTHESES    reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    MULTI           reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    DIVIDE          reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    PLUS            reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)
    MINUS           reduce using rule 79 (llamarfun1 -> expresion COMMA llamarfun1 .)


state 134

    (35) condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .

    IDENTIFIER      reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    IF              reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    PRINT           reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    READ            reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    WHILE           reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    FOR             reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    VAR             reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    ELSEIF          reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    ENDIF           reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    ELSE            reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    ENDWHILE        reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    ENDPROGRAM      reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    ENDFOR          reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    ENDMETHOD       reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)
    RETURN          reduce using rule 35 (condicion -> IF expresion bloque condicion1 ELSE bloque ENDIF .)


state 135

    (37) condicion1 -> ELSEIF expresion bloque condicion1 .

    ENDIF           reduce using rule 37 (condicion1 -> ELSEIF expresion bloque condicion1 .)
    ELSE            reduce using rule 37 (condicion1 -> ELSEIF expresion bloque condicion1 .)


state 136

    (76) func2 -> VALOR .

    COMMA           reduce using rule 76 (func2 -> VALOR .)
    IDENTIFIER      reduce using rule 76 (func2 -> VALOR .)
    IF              reduce using rule 76 (func2 -> VALOR .)
    PRINT           reduce using rule 76 (func2 -> VALOR .)
    READ            reduce using rule 76 (func2 -> VALOR .)
    WHILE           reduce using rule 76 (func2 -> VALOR .)
    FOR             reduce using rule 76 (func2 -> VALOR .)
    VAR             reduce using rule 76 (func2 -> VALOR .)
    RETURN          reduce using rule 76 (func2 -> VALOR .)
    ENDMETHOD       reduce using rule 76 (func2 -> VALOR .)


state 137

    (75) func2 -> REFERENCIA .

    COMMA           reduce using rule 75 (func2 -> REFERENCIA .)
    IDENTIFIER      reduce using rule 75 (func2 -> REFERENCIA .)
    IF              reduce using rule 75 (func2 -> REFERENCIA .)
    PRINT           reduce using rule 75 (func2 -> REFERENCIA .)
    READ            reduce using rule 75 (func2 -> REFERENCIA .)
    WHILE           reduce using rule 75 (func2 -> REFERENCIA .)
    FOR             reduce using rule 75 (func2 -> REFERENCIA .)
    VAR             reduce using rule 75 (func2 -> REFERENCIA .)
    RETURN          reduce using rule 75 (func2 -> REFERENCIA .)
    ENDMETHOD       reduce using rule 75 (func2 -> REFERENCIA .)


state 138

    (71) func1 -> tipo func2 .
    (72) func1 -> tipo func2 . COMMA func1

    IDENTIFIER      reduce using rule 71 (func1 -> tipo func2 .)
    IF              reduce using rule 71 (func1 -> tipo func2 .)
    PRINT           reduce using rule 71 (func1 -> tipo func2 .)
    READ            reduce using rule 71 (func1 -> tipo func2 .)
    WHILE           reduce using rule 71 (func1 -> tipo func2 .)
    FOR             reduce using rule 71 (func1 -> tipo func2 .)
    VAR             reduce using rule 71 (func1 -> tipo func2 .)
    RETURN          reduce using rule 71 (func1 -> tipo func2 .)
    ENDMETHOD       reduce using rule 71 (func1 -> tipo func2 .)
    COMMA           shift and go to state 142


state 139

    (74) func2 -> IDENTIFIER .

    COMMA           reduce using rule 74 (func2 -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 74 (func2 -> IDENTIFIER .)
    IF              reduce using rule 74 (func2 -> IDENTIFIER .)
    PRINT           reduce using rule 74 (func2 -> IDENTIFIER .)
    READ            reduce using rule 74 (func2 -> IDENTIFIER .)
    WHILE           reduce using rule 74 (func2 -> IDENTIFIER .)
    FOR             reduce using rule 74 (func2 -> IDENTIFIER .)
    VAR             reduce using rule 74 (func2 -> IDENTIFIER .)
    RETURN          reduce using rule 74 (func2 -> IDENTIFIER .)
    ENDMETHOD       reduce using rule 74 (func2 -> IDENTIFIER .)


state 140

    (69) func -> METHOD tipo IDENTIFIER func1 bloque . RETURN IDENTIFIER ENDMETHOD

    RETURN          shift and go to state 143


state 141

    (70) voidfunc -> METHOD VOID IDENTIFIER func1 bloque . ENDMETHOD

    ENDMETHOD       shift and go to state 144


state 142

    (72) func1 -> tipo func2 COMMA . func1
    (71) func1 -> . tipo func2
    (72) func1 -> . tipo func2 COMMA func1
    (73) func1 -> . empty
    (13) tipo -> . INT
    (14) tipo -> . FLOAT
    (15) tipo -> . STRING
    (16) tipo -> . BOOL
    (17) tipo -> . HASH
    (81) empty -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    STRING          shift and go to state 9
    BOOL            shift and go to state 11
    HASH            shift and go to state 6
    IDENTIFIER      reduce using rule 81 (empty -> .)
    IF              reduce using rule 81 (empty -> .)
    PRINT           reduce using rule 81 (empty -> .)
    READ            reduce using rule 81 (empty -> .)
    WHILE           reduce using rule 81 (empty -> .)
    FOR             reduce using rule 81 (empty -> .)
    VAR             reduce using rule 81 (empty -> .)
    RETURN          reduce using rule 81 (empty -> .)
    ENDMETHOD       reduce using rule 81 (empty -> .)

    tipo                           shift and go to state 129
    func1                          shift and go to state 145
    empty                          shift and go to state 131

state 143

    (69) func -> METHOD tipo IDENTIFIER func1 bloque RETURN . IDENTIFIER ENDMETHOD

    IDENTIFIER      shift and go to state 146


state 144

    (70) voidfunc -> METHOD VOID IDENTIFIER func1 bloque ENDMETHOD .

    METHOD          reduce using rule 70 (voidfunc -> METHOD VOID IDENTIFIER func1 bloque ENDMETHOD .)
    $end            reduce using rule 70 (voidfunc -> METHOD VOID IDENTIFIER func1 bloque ENDMETHOD .)


state 145

    (72) func1 -> tipo func2 COMMA func1 .

    IDENTIFIER      reduce using rule 72 (func1 -> tipo func2 COMMA func1 .)
    IF              reduce using rule 72 (func1 -> tipo func2 COMMA func1 .)
    PRINT           reduce using rule 72 (func1 -> tipo func2 COMMA func1 .)
    READ            reduce using rule 72 (func1 -> tipo func2 COMMA func1 .)
    WHILE           reduce using rule 72 (func1 -> tipo func2 COMMA func1 .)
    FOR             reduce using rule 72 (func1 -> tipo func2 COMMA func1 .)
    VAR             reduce using rule 72 (func1 -> tipo func2 COMMA func1 .)
    RETURN          reduce using rule 72 (func1 -> tipo func2 COMMA func1 .)
    ENDMETHOD       reduce using rule 72 (func1 -> tipo func2 COMMA func1 .)


state 146

    (69) func -> METHOD tipo IDENTIFIER func1 bloque RETURN IDENTIFIER . ENDMETHOD

    ENDMETHOD       shift and go to state 147


state 147

    (69) func -> METHOD tipo IDENTIFIER func1 bloque RETURN IDENTIFIER ENDMETHOD .

    METHOD          reduce using rule 69 (func -> METHOD tipo IDENTIFIER func1 bloque RETURN IDENTIFIER ENDMETHOD .)
    $end            reduce using rule 69 (func -> METHOD tipo IDENTIFIER func1 bloque RETURN IDENTIFIER ENDMETHOD .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENTIFIER in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for READ in state 4 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for VAR in state 4 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 12 resolved as shift
WARNING: shift/reduce conflict for IF in state 12 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 12 resolved as shift
WARNING: shift/reduce conflict for READ in state 12 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 12 resolved as shift
WARNING: shift/reduce conflict for FOR in state 12 resolved as shift
WARNING: shift/reduce conflict for VAR in state 12 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 13 resolved as shift
WARNING: shift/reduce conflict for IF in state 13 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 13 resolved as shift
WARNING: shift/reduce conflict for READ in state 13 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 13 resolved as shift
WARNING: shift/reduce conflict for FOR in state 13 resolved as shift
WARNING: shift/reduce conflict for VAR in state 13 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 36 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 36 resolved as shift
WARNING: shift/reduce conflict for LTHAN in state 37 resolved as shift
WARNING: shift/reduce conflict for GTHAN in state 37 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 37 resolved as shift
WARNING: shift/reduce conflict for GTHANEQ in state 37 resolved as shift
WARNING: shift/reduce conflict for LTHANEQ in state 37 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 37 resolved as shift
WARNING: shift/reduce conflict for AND in state 37 resolved as shift
WARNING: shift/reduce conflict for OR in state 37 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 38 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 38 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 46 resolved as shift
WARNING: shift/reduce conflict for IF in state 46 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 46 resolved as shift
WARNING: shift/reduce conflict for READ in state 46 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 46 resolved as shift
WARNING: shift/reduce conflict for FOR in state 46 resolved as shift
WARNING: shift/reduce conflict for VAR in state 46 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 47 resolved as shift
WARNING: shift/reduce conflict for IF in state 47 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 47 resolved as shift
WARNING: shift/reduce conflict for READ in state 47 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 47 resolved as shift
WARNING: shift/reduce conflict for FOR in state 47 resolved as shift
WARNING: shift/reduce conflict for VAR in state 47 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 49 resolved as shift
WARNING: shift/reduce conflict for IF in state 49 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 49 resolved as shift
WARNING: shift/reduce conflict for READ in state 49 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 49 resolved as shift
WARNING: shift/reduce conflict for FOR in state 49 resolved as shift
WARNING: shift/reduce conflict for VAR in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 118 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 122 resolved as shift
WARNING: shift/reduce conflict for IF in state 122 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 122 resolved as shift
WARNING: shift/reduce conflict for READ in state 122 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 122 resolved as shift
WARNING: shift/reduce conflict for FOR in state 122 resolved as shift
WARNING: shift/reduce conflict for VAR in state 122 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 123 resolved as shift
WARNING: shift/reduce conflict for IF in state 123 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 123 resolved as shift
WARNING: shift/reduce conflict for READ in state 123 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 123 resolved as shift
WARNING: shift/reduce conflict for FOR in state 123 resolved as shift
WARNING: shift/reduce conflict for VAR in state 123 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 126 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 126 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 130 resolved as shift
WARNING: shift/reduce conflict for IF in state 130 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 130 resolved as shift
WARNING: shift/reduce conflict for READ in state 130 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 130 resolved as shift
WARNING: shift/reduce conflict for FOR in state 130 resolved as shift
WARNING: shift/reduce conflict for VAR in state 130 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 132 resolved as shift
WARNING: shift/reduce conflict for IF in state 132 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 132 resolved as shift
WARNING: shift/reduce conflict for READ in state 132 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 132 resolved as shift
WARNING: shift/reduce conflict for FOR in state 132 resolved as shift
WARNING: shift/reduce conflict for VAR in state 132 resolved as shift
WARNING: reduce/reduce conflict in state 19 resolved using rule (bloque -> empty)
WARNING: rejected rule (estatuto -> empty) in state 19
WARNING: reduce/reduce conflict in state 48 resolved using rule (programa -> PROGRAM bloque ENDPROGRAM)
WARNING: rejected rule (empty -> <empty>) in state 48
WARNING: reduce/reduce conflict in state 54 resolved using rule (programa -> global PROGRAM bloque ENDPROGRAM)
WARNING: rejected rule (empty -> <empty>) in state 54
WARNING: reduce/reduce conflict in state 119 resolved using rule (factor1 -> empty)
WARNING: rejected rule (llamarfun1 -> empty) in state 119
